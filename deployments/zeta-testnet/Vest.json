{
  "address": "0x6fD4Bc528A83726Fb2664F133394aB86417D307F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Zebra",
      "outputs": [
        {
          "internalType": "contract IZebra",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZebraCore",
      "outputs": [
        {
          "internalType": "contract IZebraCore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "batchEarned",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "earneds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "claimAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cliffTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "currentIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "esZebra",
      "outputs": [
        {
          "internalType": "contract IEsZebra",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IZebraCore",
          "name": "_ZebraCore",
          "type": "address"
        },
        {
          "internalType": "contract IZebra",
          "name": "_Zebra",
          "type": "address"
        },
        {
          "internalType": "contract IEsZebra",
          "name": "_esZebra",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDeposits",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "orderInfos",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "start",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "cliffEnd",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "releaseEnd",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "released",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "stateOf",
      "outputs": [
        {
          "internalType": "enum Vest.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "totalEarned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcfa5c5e092505e5c8efbf10d11bb1b46dcaed49234f5e91593eca898424c4245",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0x6fD4Bc528A83726Fb2664F133394aB86417D307F",
    "transactionIndex": 0,
    "gasUsed": "1587602",
    "logsBloom": "0x
    "blockHash": "0x3dccc7d2150911e8cd390ea3e00d79e4551346785f75c5acdf1ae065cf3c6a1e",
    "transactionHash": "0xcfa5c5e092505e5c8efbf10d11bb1b46dcaed49234f5e91593eca898424c4245",
    "logs": [],
    "blockNumber": 4050023,
    "cumulativeGasUsed": "1587602",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b91301f1a84b6c2e358640cd7d231682",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Zebra\",\"outputs\":[{\"internalType\":\"contract IZebra\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZebraCore\",\"outputs\":[{\"internalType\":\"contract IZebraCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"batchEarned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"earneds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliffTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esZebra\",\"outputs\":[{\"internalType\":\"contract IEsZebra\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IZebraCore\",\"name\":\"_ZebraCore\",\"type\":\"address\"},{\"internalType\":\"contract IZebra\",\"name\":\"_Zebra\",\"type\":\"address\"},{\"internalType\":\"contract IEsZebra\",\"name\":\"_esZebra\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDeposits\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderInfos\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"cliffEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"releaseEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"released\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"stateOf\",\"outputs\":[{\"internalType\":\"enum Vest.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"totalEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Vest.sol\":\"Vest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/core/Vest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../dependencies/ZebraOwnableUpgradeable.sol\\\";\\nimport \\\"../interfaces/IZebra.sol\\\";\\nimport \\\"../interfaces/IEsZebra.sol\\\";\\n\\ncontract Vest is ZebraOwnableUpgradeable {\\n\\tenum State {\\n\\t\\tinCliff,\\n\\t\\tinRelease,\\n\\t\\toutOfRelease\\n\\t}\\n\\n\\tstruct OrderInfo {\\n\\t\\tuint64 start;\\n\\t\\tuint64 cliffEnd;\\n\\t\\tuint64 releaseEnd;\\n\\t\\tuint64 released;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tIEsZebra public esZebra;\\n\\tIZebra public Zebra;\\n\\n\\tuint64 public cliffTime;\\n\\tuint64 public releaseTime;\\n\\tuint64 public minDeposits;\\n\\n\\tmapping(address => uint256) public currentIds;\\n\\tmapping(address => mapping(uint256 => OrderInfo)) public orderInfos;\\n\\n\\tevent Staked(address account, uint256 id, uint256 amount);\\n\\tevent Claimed(address account, uint256 id, uint256 amount);\\n\\n\\tfunction initialize(IZebraCore _ZebraCore, IZebra _Zebra, IEsZebra _esZebra) external initializer {\\n\\t\\t__InitCore(_ZebraCore);\\n\\t\\tZebra = _Zebra;\\n\\t\\tesZebra = _esZebra;\\n\\t\\tcliffTime = 14 days;\\n\\t\\treleaseTime = 14 days;\\n\\t\\tminDeposits = 1e18;\\n\\t}\\n\\n\\tfunction stake(uint256 amount) external {\\n\\t\\trequire(amount >= minDeposits, \\\"Vest: too little deposits to stake\\\");\\n\\t\\taddress account = msg.sender;\\n\\t\\tesZebra.sendToken(account, amount);\\n\\t\\tuint256 currentId = currentIds[account]++;\\n\\t\\torderInfos[account][currentId] = OrderInfo({ start: uint64(block.timestamp), cliffEnd: uint64(block.timestamp + cliffTime), releaseEnd: uint64(block.timestamp + cliffTime + releaseTime), released: 0, amount: amount });\\n\\t\\temit Staked(account, currentId, amount);\\n\\t}\\n\\n\\tfunction stateOf(address account, uint256 id) public view returns (State) {\\n\\t\\trequire(id < currentIds[account], \\\"Vest: invalid order id\\\");\\n\\t\\tif (block.timestamp < orderInfos[account][id].cliffEnd) {\\n\\t\\t\\treturn State.inCliff;\\n\\t\\t} else if (block.timestamp < orderInfos[account][id].releaseEnd) {\\n\\t\\t\\treturn State.inRelease;\\n\\t\\t}\\n\\t\\treturn State.outOfRelease;\\n\\t}\\n\\n\\tfunction claimAll(uint256[] memory ids) external {\\n\\t\\taddress account = msg.sender;\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\tuint256 id = ids[i];\\n\\t\\t\\trequire(id < currentIds[account], \\\"Vest: invalid id\\\");\\n\\t\\t\\tState state = stateOf(account, id);\\n\\t\\t\\tuint64 total = orderInfos[account][id].releaseEnd - orderInfos[account][id].cliffEnd;\\n\\t\\t\\tif (orderInfos[account][id].released == total) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tif (state == State.inCliff) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t} else if (state == State.inRelease) {\\n\\t\\t\\t\\tuint64 walked = uint64(block.timestamp - orderInfos[account][id].cliffEnd);\\n\\t\\t\\t\\tuint256 amount = ((walked - orderInfos[account][id].released) * orderInfos[account][id].amount) / total;\\n\\t\\t\\t\\torderInfos[account][id].released = walked;\\n\\t\\t\\t\\tZebra.esZebra2Zebra(account, amount);\\n\\t\\t\\t\\temit Claimed(account, id, amount);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tuint64 leftWalk = total - orderInfos[account][id].released;\\n\\t\\t\\t\\tuint256 amount = (leftWalk * orderInfos[account][id].amount) / total;\\n\\t\\t\\t\\torderInfos[account][id].released = total;\\n\\t\\t\\t\\tZebra.esZebra2Zebra(account, amount);\\n\\t\\t\\t\\temit Claimed(account, id, amount);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction claim(uint256 id) external {\\n\\t\\taddress account = msg.sender;\\n\\t\\trequire(id < currentIds[account], \\\"Vest: invalid id\\\");\\n\\t\\tState state = stateOf(account, id);\\n\\t\\tuint64 total = orderInfos[account][id].releaseEnd - orderInfos[account][id].cliffEnd;\\n\\t\\trequire(orderInfos[account][id].released < total, \\\"Vest: order claimed\\\");\\n\\t\\tif (state == State.inCliff) {\\n\\t\\t\\trevert(\\\"Vest: in cliff\\\");\\n\\t\\t} else if (state == State.inRelease) {\\n\\t\\t\\tuint64 walked = uint64(block.timestamp - orderInfos[account][id].cliffEnd);\\n\\t\\t\\tuint256 amount = ((walked - orderInfos[account][id].released) * orderInfos[account][id].amount) / total;\\n\\t\\t\\torderInfos[account][id].released = walked;\\n\\t\\t\\tZebra.esZebra2Zebra(account, amount);\\n\\t\\t\\temit Claimed(account, id, amount);\\n\\t\\t} else {\\n\\t\\t\\tuint64 leftWalk = total - orderInfos[account][id].released;\\n\\t\\t\\tuint256 amount = (leftWalk * orderInfos[account][id].amount) / total;\\n\\t\\t\\torderInfos[account][id].released = total;\\n\\t\\t\\tZebra.esZebra2Zebra(account, amount);\\n\\t\\t\\temit Claimed(account, id, amount);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction earned(address account, uint256 id) public view returns (uint256) {\\n\\t\\trequire(id < currentIds[account], \\\"Vest: invalid id\\\");\\n\\t\\tState state = stateOf(account, id);\\n\\t\\tuint64 total = orderInfos[account][id].releaseEnd - orderInfos[account][id].cliffEnd;\\n\\t\\tif (total == orderInfos[account][id].released) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\tif (state == State.inCliff) {\\n\\t\\t\\treturn 0;\\n\\t\\t} else if (state == State.inRelease) {\\n\\t\\t\\tuint64 walked = uint64(block.timestamp - orderInfos[account][id].cliffEnd);\\n\\t\\t\\treturn ((walked - orderInfos[account][id].released) * orderInfos[account][id].amount) / total;\\n\\t\\t} else {\\n\\t\\t\\tuint64 leftWalk = total - orderInfos[account][id].released;\\n\\t\\t\\treturn (leftWalk * orderInfos[account][id].amount) / total;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction batchEarned(address account, uint256[] memory ids) public view returns (uint256[] memory earneds) {\\n\\t\\tearneds = new uint256[](ids.length);\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\tearneds[i] = earned(account, ids[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction totalEarned(address account, uint256[] memory ids) public view returns (uint256 total) {\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\ttotal += earned(account, ids[i]);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x1f58bde6a7b30a9bc3f67876c75d90d31136f04230221507f6d51bc5f9db951e\",\"license\":\"MIT\"},\"contracts/dependencies/ZebraOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IZebraCore.sol\\\";\\n\\n/**\\n    @title Zebra Ownable\\n    @notice Contracts inheriting `ZebraOwnable` have the same owner as `ZebraCore`.\\n            The ownership cannot be independently modified or renounced.\\n */\\ncontract ZebraOwnableUpgradeable is Initializable {\\n\\tIZebraCore public ZebraCore;\\n\\n\\tfunction __InitCore(IZebraCore _ZebraCore) internal {\\n\\t\\tZebraCore = _ZebraCore;\\n\\t}\\n\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(msg.sender == owner(), \\\"Only owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyGuardian() {\\n\\t\\trequire(msg.sender == guardian(), \\\"Only guardian\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction owner() public view returns (address) {\\n\\t\\treturn ZebraCore.owner();\\n\\t}\\n\\n\\tfunction guardian() public view returns (address) {\\n\\t\\treturn ZebraCore.guardian();\\n\\t}\\n}\\n\",\"keccak256\":\"0x63470a32a4ef57702c77a5326f425defb975787faf37cd73de3d218a8b40272c\",\"license\":\"MIT\"},\"contracts/interfaces/IEsZebra.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IEsZebra is IERC20 {\\n\\tevent SenderUpdated(address sender, bool enabled);\\n\\tevent ReceiverUpdated(address receiver, bool enabled);\\n\\n\\tfunction mint(address account, uint256 amount) external;\\n\\n\\tfunction burn(uint256 amount) external;\\n\\n\\tfunction burnFrom(address account, uint256 amount) external;\\n\\n\\tfunction burnFromZebra(address account, uint256 amount) external;\\n\\n\\tfunction sendToken(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa9494d2997270447565cf2892287e0460b785de228d7aaf4035fdeb405eb5f17\",\"license\":\"MIT\"},\"contracts/interfaces/IZebra.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IZebra is IERC20 {\\n\\tevent EsZebraToZebra(address account, uint256 amount);\\n\\n\\tevent ZebraToEsZebra(address account, uint256 amount);\\n\\n\\tfunction zebra2EsZebra(address account, uint256 amount) external;\\n\\n\\tfunction esZebra2Zebra(address account, uint256 amount) external;\\n\\n\\tfunction burn(uint256 amount) external;\\n\\n\\tfunction burnFrom(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa4ebe6791dfb396d53c7ba4cb1cf3a40cddae3f6bdab85f785fdadf36bf6c8d2\",\"license\":\"MIT\"},\"contracts/interfaces/IZebraCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IZebraCore {\\n\\tevent FeeReceiverSet(address feeReceiver);\\n\\tevent GuardianSet(address guardian);\\n\\tevent NewOwnerAccepted(address oldOwner, address owner);\\n\\tevent NewOwnerCommitted(address owner, address pendingOwner, uint256 deadline);\\n\\tevent NewOwnerRevoked(address owner, address revokedOwner);\\n\\tevent Paused();\\n\\tevent PriceFeedSet(address priceFeed);\\n\\tevent Unpaused();\\n\\n\\tfunction acceptTransferOwnership() external;\\n\\n\\tfunction commitTransferOwnership(address newOwner) external;\\n\\n\\tfunction revokeTransferOwnership() external;\\n\\n\\tfunction setFeeReceiver(address _feeReceiver) external;\\n\\n\\tfunction setGuardian(address _guardian) external;\\n\\n\\tfunction setPaused(bool _paused) external;\\n\\n\\tfunction setPriceFeed(address _priceFeed) external;\\n\\n\\tfunction OWNERSHIP_TRANSFER_DELAY() external view returns (uint256);\\n\\n\\tfunction feeReceiver() external view returns (address);\\n\\n\\tfunction guardian() external view returns (address);\\n\\n\\tfunction owner() external view returns (address);\\n\\n\\tfunction ownershipTransferDeadline() external view returns (uint256);\\n\\n\\tfunction paused() external view returns (bool);\\n\\n\\tfunction pendingOwner() external view returns (address);\\n\\n\\tfunction startTime() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1fc4f5dd11e33a377d954cb7c45d16193f93bc3f47bb4dc1703e6794bc2053c9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611bd8806100206000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80638da5cb5b116100b2578063c0c53b8b11610081578063cf888ec311610066578063cf888ec31461035c578063d30fa0051461037c578063e311455f1461038f57600080fd5b8063c0c53b8b14610329578063cd23bcf61461033c57600080fd5b80638da5cb5b146102da578063a694fc3a146102e2578063b4bb2285146102f5578063b91d40011461031557600080fd5b80633e491d471161010957806360a1cbd7116100ee57806360a1cbd71461020757806363c18396146102a757806381a94573146102ba57600080fd5b80633e491d47146101de578063452a9320146101ff57600080fd5b80630f1a64441461013b57806328c77820146101855780632fbea0141461019a578063379607f5146101cb575b600080fd5b6002546101679074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020015b60405180910390f35b6101986101933660046118c6565b6103a2565b005b6000546101b3906201000090046001600160a01b031681565b6040516001600160a01b03909116815260200161017c565b6101986101d9366004611903565b610889565b6101f16101ec366004611934565b610d95565b60405190815260200161017c565b6101b3611023565b61026b610215366004611934565b60056020908152600092835260408084209091529082529020805460019091015467ffffffffffffffff80831692680100000000000000008104821692600160801b8204831692600160c01b9092049091169085565b6040805167ffffffffffffffff96871681529486166020860152928516928401929092529092166060820152608081019190915260a00161017c565b6001546101b3906001600160a01b031681565b6003546101679068010000000000000000900467ffffffffffffffff1681565b6101b36110a0565b6101986102f0366004611903565b6110f4565b6101f1610303366004611960565b60046020526000908152604090205481565b6003546101679067ffffffffffffffff1681565b610198610337366004611984565b6113e4565b61034f61034a3660046119cf565b61160c565b60405161017c9190611a1f565b61036f61036a366004611934565b6116b9565b60405161017c9190611a79565b6101f161038a3660046119cf565b6117b6565b6002546101b3906001600160a01b031681565b3360005b82518110156108845760008382815181106103c3576103c3611aa1565b6020026020010151905060046000846001600160a01b03166001600160a01b031681526020019081526020016000205481106104465760405162461bcd60e51b815260206004820152601060248201527f566573743a20696e76616c69642069640000000000000000000000000000000060448201526064015b60405180910390fd5b600061045284836116b9565b6001600160a01b0385166000908152600560209081526040808320868452909152812054919250906104a39067ffffffffffffffff680100000000000000008204811691600160801b900416611acd565b6001600160a01b038616600090815260056020908152604080832087845290915290205490915067ffffffffffffffff808316600160c01b90920416036104ec57505050610872565b600082600281111561050057610500611a63565b0361050d57505050610872565b600182600281111561052157610521611a63565b036106df576001600160a01b038516600090815260056020908152604080832086845290915281205461056a9068010000000000000000900467ffffffffffffffff1642611aee565b6001600160a01b0387166000908152600560209081526040808320888452909152812060018101549054929350909167ffffffffffffffff85811692916105ba91600160c01b9091041685611acd565b67ffffffffffffffff166105ce9190611b01565b6105d89190611b18565b6001600160a01b0388811660008181526005602090815260408083208b845290915290819020805477ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b67ffffffffffffffff8916021790556002549051636d75007760e01b8152600481019290925260248201849052929350911690636d75007790604401600060405180830381600087803b15801561067557600080fd5b505af1158015610689573d6000803e3d6000fd5b5050604080516001600160a01b038b168152602081018990529081018490527f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a9250606001905060405180910390a1505061086e565b6001600160a01b038516600090815260056020908152604080832086845290915281205461071e90600160c01b900467ffffffffffffffff1683611acd565b6001600160a01b03871660009081526005602090815260408083208884529091528120600101549192509067ffffffffffffffff80851691610761918516611b01565b61076b9190611b18565b6001600160a01b0388811660008181526005602090815260408083208b845290915290819020805477ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b67ffffffffffffffff8a16021790556002549051636d75007760e01b8152600481019290925260248201849052929350911690636d75007790604401600060405180830381600087803b15801561080857600080fd5b505af115801561081c573d6000803e3d6000fd5b5050604080516001600160a01b038b168152602081018990529081018490527f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a9250606001905060405180910390a150505b5050505b8061087c81611b3a565b9150506103a6565b505050565b3360008181526004602052604090205482106108e75760405162461bcd60e51b815260206004820152601060248201527f566573743a20696e76616c696420696400000000000000000000000000000000604482015260640161043d565b60006108f382846116b9565b6001600160a01b0383166000908152600560209081526040808320878452909152812054919250906109449067ffffffffffffffff680100000000000000008204811691600160801b900416611acd565b6001600160a01b038416600090815260056020908152604080832088845290915290205490915067ffffffffffffffff808316600160c01b90920416106109cd5760405162461bcd60e51b815260206004820152601360248201527f566573743a206f7264657220636c61696d656400000000000000000000000000604482015260640161043d565b60008260028111156109e1576109e1611a63565b03610a2e5760405162461bcd60e51b815260206004820152600e60248201527f566573743a20696e20636c696666000000000000000000000000000000000000604482015260640161043d565b6001826002811115610a4257610a42611a63565b03610c00576001600160a01b0383166000908152600560209081526040808320878452909152812054610a8b9068010000000000000000900467ffffffffffffffff1642611aee565b6001600160a01b0385166000908152600560209081526040808320898452909152812060018101549054929350909167ffffffffffffffff8581169291610adb91600160c01b9091041685611acd565b67ffffffffffffffff16610aef9190611b01565b610af99190611b18565b6001600160a01b0386811660008181526005602090815260408083208c845290915290819020805477ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b67ffffffffffffffff8916021790556002549051636d75007760e01b8152600481019290925260248201849052929350911690636d75007790604401600060405180830381600087803b158015610b9657600080fd5b505af1158015610baa573d6000803e3d6000fd5b5050604080516001600160a01b0389168152602081018a90529081018490527f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a9250606001905060405180910390a15050610d8f565b6001600160a01b0383166000908152600560209081526040808320878452909152812054610c3f90600160c01b900467ffffffffffffffff1683611acd565b6001600160a01b03851660009081526005602090815260408083208984529091528120600101549192509067ffffffffffffffff80851691610c82918516611b01565b610c8c9190611b18565b6001600160a01b0386811660008181526005602090815260408083208c845290915290819020805477ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b67ffffffffffffffff8a16021790556002549051636d75007760e01b8152600481019290925260248201849052929350911690636d75007790604401600060405180830381600087803b158015610d2957600080fd5b505af1158015610d3d573d6000803e3d6000fd5b5050604080516001600160a01b0389168152602081018a90529081018490527f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a9250606001905060405180910390a150505b50505050565b6001600160a01b0382166000908152600460205260408120548210610dfc5760405162461bcd60e51b815260206004820152601060248201527f566573743a20696e76616c696420696400000000000000000000000000000000604482015260640161043d565b6000610e0884846116b9565b6001600160a01b038516600090815260056020908152604080832087845290915281205491925090610e599067ffffffffffffffff680100000000000000008204811691600160801b900416611acd565b6001600160a01b038616600090815260056020908152604080832088845290915290205490915067ffffffffffffffff600160c01b909104811690821603610ea65760009250505061101d565b6000826002811115610eba57610eba611a63565b03610eca5760009250505061101d565b6001826002811115610ede57610ede611a63565b03610f9c576001600160a01b0385166000908152600560209081526040808320878452909152812054610f279068010000000000000000900467ffffffffffffffff1642611aee565b6001600160a01b038716600090815260056020908152604080832089845290915290206001810154905491925067ffffffffffffffff84811692610f7491600160c01b9091041684611acd565b67ffffffffffffffff16610f889190611b01565b610f929190611b18565b935050505061101d565b6001600160a01b0385166000908152600560209081526040808320878452909152812054610fdb90600160c01b900467ffffffffffffffff1683611acd565b6001600160a01b038716600090815260056020908152604080832089845290915290206001015490915067ffffffffffffffff80841691610f88918416611b01565b92915050565b60008060029054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611077573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109b9190611b72565b905090565b60008060029054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611077573d6000803e3d6000fd5b60035468010000000000000000900467ffffffffffffffff168110156111825760405162461bcd60e51b815260206004820152602260248201527f566573743a20746f6f206c6974746c65206465706f7369747320746f2073746160448201527f6b65000000000000000000000000000000000000000000000000000000000000606482015260840161043d565b6001546040517f412664ae000000000000000000000000000000000000000000000000000000008152336004820181905260248201849052916001600160a01b03169063412664ae90604401600060405180830381600087803b1580156111e857600080fd5b505af11580156111fc573d6000803e3d6000fd5b505050506001600160a01b03811660009081526004602052604081208054908261122583611b3a565b9190505590506040518060a001604052804267ffffffffffffffff168152602001600260149054906101000a900467ffffffffffffffff1667ffffffffffffffff16426112729190611b8f565b67ffffffffffffffff9081168252600354600254602090930192908216916112b3917401000000000000000000000000000000000000000090041642611b8f565b6112bd9190611b8f565b67ffffffffffffffff90811682526000602080840182905260409384018890526001600160a01b038716808352600582528483208784528252918490208551815487840151888801516060808b01518916600160c01b0277ffffffffffffffffffffffffffffffffffffffffffffffff928a16600160801b02929092166fffffffffffffffffffffffffffffffff938a1668010000000000000000027fffffffffffffffffffffffffffffffff00000000000000000000000000000000909516959099169490941792909217169590951794909417815560809095015160019095019490945582519081529283018490529082018590527f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a1505050565b600054610100900460ff16158080156114045750600054600160ff909116105b8061141e5750303b15801561141e575060005460ff166001145b6114905760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161043d565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156114d1576000805461ff0019166101001790555b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b0387160217905560028054600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038681169190911790915585167fffffffff0000000000000000000000000000000000000000000000000000000090911617761275000000000000000000000000000000000000000000179055600380547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166f0de0b6b3a764000000000000001275001790558015610d8f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b6060815167ffffffffffffffff811115611628576116286117f7565b604051908082528060200260200182016040528015611651578160200160208202803683370190505b50905060005b82518110156116b2576116838484838151811061167657611676611aa1565b6020026020010151610d95565b82828151811061169557611695611aa1565b6020908102919091010152806116aa81611b3a565b915050611657565b5092915050565b6001600160a01b03821660009081526004602052604081205482106117205760405162461bcd60e51b815260206004820152601660248201527f566573743a20696e76616c6964206f7264657220696400000000000000000000604482015260640161043d565b6001600160a01b038316600090815260056020908152604080832085845290915290205468010000000000000000900467ffffffffffffffff164210156117695750600061101d565b6001600160a01b0383166000908152600560209081526040808320858452909152902054600160801b900467ffffffffffffffff164210156117ad5750600161101d565b50600292915050565b6000805b82518110156116b2576117d98484838151811061167657611676611aa1565b6117e39083611b8f565b9150806117ef81611b3a565b9150506117ba565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261181e57600080fd5b8135602067ffffffffffffffff8083111561183b5761183b6117f7565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110848211171561187e5761187e6117f7565b60405293845285810183019383810192508785111561189c57600080fd5b83870191505b848210156118bb578135835291830191908301906118a2565b979650505050505050565b6000602082840312156118d857600080fd5b813567ffffffffffffffff8111156118ef57600080fd5b6118fb8482850161180d565b949350505050565b60006020828403121561191557600080fd5b5035919050565b6001600160a01b038116811461193157600080fd5b50565b6000806040838503121561194757600080fd5b82356119528161191c565b946020939093013593505050565b60006020828403121561197257600080fd5b813561197d8161191c565b9392505050565b60008060006060848603121561199957600080fd5b83356119a48161191c565b925060208401356119b48161191c565b915060408401356119c48161191c565b809150509250925092565b600080604083850312156119e257600080fd5b82356119ed8161191c565b9150602083013567ffffffffffffffff811115611a0957600080fd5b611a158582860161180d565b9150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611a5757835183529284019291840191600101611a3b565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b6020810160038310611a9b57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff8281168282160390808211156116b2576116b2611ab7565b8181038181111561101d5761101d611ab7565b808202811582820484141761101d5761101d611ab7565b600082611b3557634e487b7160e01b600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b6b57611b6b611ab7565b5060010190565b600060208284031215611b8457600080fd5b815161197d8161191c565b8082018082111561101d5761101d611ab756fea2646970667358221220b805d556c6cc504eadcc4cce905adb8f5fa3dfd94aa485f320dfba1640d5631464736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c80638da5cb5b116100b2578063c0c53b8b11610081578063cf888ec311610066578063cf888ec31461035c578063d30fa0051461037c578063e311455f1461038f57600080fd5b8063c0c53b8b14610329578063cd23bcf61461033c57600080fd5b80638da5cb5b146102da578063a694fc3a146102e2578063b4bb2285146102f5578063b91d40011461031557600080fd5b80633e491d471161010957806360a1cbd7116100ee57806360a1cbd71461020757806363c18396146102a757806381a94573146102ba57600080fd5b80633e491d47146101de578063452a9320146101ff57600080fd5b80630f1a64441461013b57806328c77820146101855780632fbea0141461019a578063379607f5146101cb575b600080fd5b6002546101679074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020015b60405180910390f35b6101986101933660046118c6565b6103a2565b005b6000546101b3906201000090046001600160a01b031681565b6040516001600160a01b03909116815260200161017c565b6101986101d9366004611903565b610889565b6101f16101ec366004611934565b610d95565b60405190815260200161017c565b6101b3611023565b61026b610215366004611934565b60056020908152600092835260408084209091529082529020805460019091015467ffffffffffffffff80831692680100000000000000008104821692600160801b8204831692600160c01b9092049091169085565b6040805167ffffffffffffffff96871681529486166020860152928516928401929092529092166060820152608081019190915260a00161017c565b6001546101b3906001600160a01b031681565b6003546101679068010000000000000000900467ffffffffffffffff1681565b6101b36110a0565b6101986102f0366004611903565b6110f4565b6101f1610303366004611960565b60046020526000908152604090205481565b6003546101679067ffffffffffffffff1681565b610198610337366004611984565b6113e4565b61034f61034a3660046119cf565b61160c565b60405161017c9190611a1f565b61036f61036a366004611934565b6116b9565b60405161017c9190611a79565b6101f161038a3660046119cf565b6117b6565b6002546101b3906001600160a01b031681565b3360005b82518110156108845760008382815181106103c3576103c3611aa1565b6020026020010151905060046000846001600160a01b03166001600160a01b031681526020019081526020016000205481106104465760405162461bcd60e51b815260206004820152601060248201527f566573743a20696e76616c69642069640000000000000000000000000000000060448201526064015b60405180910390fd5b600061045284836116b9565b6001600160a01b0385166000908152600560209081526040808320868452909152812054919250906104a39067ffffffffffffffff680100000000000000008204811691600160801b900416611acd565b6001600160a01b038616600090815260056020908152604080832087845290915290205490915067ffffffffffffffff808316600160c01b90920416036104ec57505050610872565b600082600281111561050057610500611a63565b0361050d57505050610872565b600182600281111561052157610521611a63565b036106df576001600160a01b038516600090815260056020908152604080832086845290915281205461056a9068010000000000000000900467ffffffffffffffff1642611aee565b6001600160a01b0387166000908152600560209081526040808320888452909152812060018101549054929350909167ffffffffffffffff85811692916105ba91600160c01b9091041685611acd565b67ffffffffffffffff166105ce9190611b01565b6105d89190611b18565b6001600160a01b0388811660008181526005602090815260408083208b845290915290819020805477ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b67ffffffffffffffff8916021790556002549051636d75007760e01b8152600481019290925260248201849052929350911690636d75007790604401600060405180830381600087803b15801561067557600080fd5b505af1158015610689573d6000803e3d6000fd5b5050604080516001600160a01b038b168152602081018990529081018490527f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a9250606001905060405180910390a1505061086e565b6001600160a01b038516600090815260056020908152604080832086845290915281205461071e90600160c01b900467ffffffffffffffff1683611acd565b6001600160a01b03871660009081526005602090815260408083208884529091528120600101549192509067ffffffffffffffff80851691610761918516611b01565b61076b9190611b18565b6001600160a01b0388811660008181526005602090815260408083208b845290915290819020805477ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b67ffffffffffffffff8a16021790556002549051636d75007760e01b8152600481019290925260248201849052929350911690636d75007790604401600060405180830381600087803b15801561080857600080fd5b505af115801561081c573d6000803e3d6000fd5b5050604080516001600160a01b038b168152602081018990529081018490527f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a9250606001905060405180910390a150505b5050505b8061087c81611b3a565b9150506103a6565b505050565b3360008181526004602052604090205482106108e75760405162461bcd60e51b815260206004820152601060248201527f566573743a20696e76616c696420696400000000000000000000000000000000604482015260640161043d565b60006108f382846116b9565b6001600160a01b0383166000908152600560209081526040808320878452909152812054919250906109449067ffffffffffffffff680100000000000000008204811691600160801b900416611acd565b6001600160a01b038416600090815260056020908152604080832088845290915290205490915067ffffffffffffffff808316600160c01b90920416106109cd5760405162461bcd60e51b815260206004820152601360248201527f566573743a206f7264657220636c61696d656400000000000000000000000000604482015260640161043d565b60008260028111156109e1576109e1611a63565b03610a2e5760405162461bcd60e51b815260206004820152600e60248201527f566573743a20696e20636c696666000000000000000000000000000000000000604482015260640161043d565b6001826002811115610a4257610a42611a63565b03610c00576001600160a01b0383166000908152600560209081526040808320878452909152812054610a8b9068010000000000000000900467ffffffffffffffff1642611aee565b6001600160a01b0385166000908152600560209081526040808320898452909152812060018101549054929350909167ffffffffffffffff8581169291610adb91600160c01b9091041685611acd565b67ffffffffffffffff16610aef9190611b01565b610af99190611b18565b6001600160a01b0386811660008181526005602090815260408083208c845290915290819020805477ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b67ffffffffffffffff8916021790556002549051636d75007760e01b8152600481019290925260248201849052929350911690636d75007790604401600060405180830381600087803b158015610b9657600080fd5b505af1158015610baa573d6000803e3d6000fd5b5050604080516001600160a01b0389168152602081018a90529081018490527f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a9250606001905060405180910390a15050610d8f565b6001600160a01b0383166000908152600560209081526040808320878452909152812054610c3f90600160c01b900467ffffffffffffffff1683611acd565b6001600160a01b03851660009081526005602090815260408083208984529091528120600101549192509067ffffffffffffffff80851691610c82918516611b01565b610c8c9190611b18565b6001600160a01b0386811660008181526005602090815260408083208c845290915290819020805477ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b67ffffffffffffffff8a16021790556002549051636d75007760e01b8152600481019290925260248201849052929350911690636d75007790604401600060405180830381600087803b158015610d2957600080fd5b505af1158015610d3d573d6000803e3d6000fd5b5050604080516001600160a01b0389168152602081018a90529081018490527f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a9250606001905060405180910390a150505b50505050565b6001600160a01b0382166000908152600460205260408120548210610dfc5760405162461bcd60e51b815260206004820152601060248201527f566573743a20696e76616c696420696400000000000000000000000000000000604482015260640161043d565b6000610e0884846116b9565b6001600160a01b038516600090815260056020908152604080832087845290915281205491925090610e599067ffffffffffffffff680100000000000000008204811691600160801b900416611acd565b6001600160a01b038616600090815260056020908152604080832088845290915290205490915067ffffffffffffffff600160c01b909104811690821603610ea65760009250505061101d565b6000826002811115610eba57610eba611a63565b03610eca5760009250505061101d565b6001826002811115610ede57610ede611a63565b03610f9c576001600160a01b0385166000908152600560209081526040808320878452909152812054610f279068010000000000000000900467ffffffffffffffff1642611aee565b6001600160a01b038716600090815260056020908152604080832089845290915290206001810154905491925067ffffffffffffffff84811692610f7491600160c01b9091041684611acd565b67ffffffffffffffff16610f889190611b01565b610f929190611b18565b935050505061101d565b6001600160a01b0385166000908152600560209081526040808320878452909152812054610fdb90600160c01b900467ffffffffffffffff1683611acd565b6001600160a01b038716600090815260056020908152604080832089845290915290206001015490915067ffffffffffffffff80841691610f88918416611b01565b92915050565b60008060029054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611077573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109b9190611b72565b905090565b60008060029054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611077573d6000803e3d6000fd5b60035468010000000000000000900467ffffffffffffffff168110156111825760405162461bcd60e51b815260206004820152602260248201527f566573743a20746f6f206c6974746c65206465706f7369747320746f2073746160448201527f6b65000000000000000000000000000000000000000000000000000000000000606482015260840161043d565b6001546040517f412664ae000000000000000000000000000000000000000000000000000000008152336004820181905260248201849052916001600160a01b03169063412664ae90604401600060405180830381600087803b1580156111e857600080fd5b505af11580156111fc573d6000803e3d6000fd5b505050506001600160a01b03811660009081526004602052604081208054908261122583611b3a565b9190505590506040518060a001604052804267ffffffffffffffff168152602001600260149054906101000a900467ffffffffffffffff1667ffffffffffffffff16426112729190611b8f565b67ffffffffffffffff9081168252600354600254602090930192908216916112b3917401000000000000000000000000000000000000000090041642611b8f565b6112bd9190611b8f565b67ffffffffffffffff90811682526000602080840182905260409384018890526001600160a01b038716808352600582528483208784528252918490208551815487840151888801516060808b01518916600160c01b0277ffffffffffffffffffffffffffffffffffffffffffffffff928a16600160801b02929092166fffffffffffffffffffffffffffffffff938a1668010000000000000000027fffffffffffffffffffffffffffffffff00000000000000000000000000000000909516959099169490941792909217169590951794909417815560809095015160019095019490945582519081529283018490529082018590527f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a1505050565b600054610100900460ff16158080156114045750600054600160ff909116105b8061141e5750303b15801561141e575060005460ff166001145b6114905760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161043d565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156114d1576000805461ff0019166101001790555b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b0387160217905560028054600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038681169190911790915585167fffffffff0000000000000000000000000000000000000000000000000000000090911617761275000000000000000000000000000000000000000000179055600380547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166f0de0b6b3a764000000000000001275001790558015610d8f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b6060815167ffffffffffffffff811115611628576116286117f7565b604051908082528060200260200182016040528015611651578160200160208202803683370190505b50905060005b82518110156116b2576116838484838151811061167657611676611aa1565b6020026020010151610d95565b82828151811061169557611695611aa1565b6020908102919091010152806116aa81611b3a565b915050611657565b5092915050565b6001600160a01b03821660009081526004602052604081205482106117205760405162461bcd60e51b815260206004820152601660248201527f566573743a20696e76616c6964206f7264657220696400000000000000000000604482015260640161043d565b6001600160a01b038316600090815260056020908152604080832085845290915290205468010000000000000000900467ffffffffffffffff164210156117695750600061101d565b6001600160a01b0383166000908152600560209081526040808320858452909152902054600160801b900467ffffffffffffffff164210156117ad5750600161101d565b50600292915050565b6000805b82518110156116b2576117d98484838151811061167657611676611aa1565b6117e39083611b8f565b9150806117ef81611b3a565b9150506117ba565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261181e57600080fd5b8135602067ffffffffffffffff8083111561183b5761183b6117f7565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110848211171561187e5761187e6117f7565b60405293845285810183019383810192508785111561189c57600080fd5b83870191505b848210156118bb578135835291830191908301906118a2565b979650505050505050565b6000602082840312156118d857600080fd5b813567ffffffffffffffff8111156118ef57600080fd5b6118fb8482850161180d565b949350505050565b60006020828403121561191557600080fd5b5035919050565b6001600160a01b038116811461193157600080fd5b50565b6000806040838503121561194757600080fd5b82356119528161191c565b946020939093013593505050565b60006020828403121561197257600080fd5b813561197d8161191c565b9392505050565b60008060006060848603121561199957600080fd5b83356119a48161191c565b925060208401356119b48161191c565b915060408401356119c48161191c565b809150509250925092565b600080604083850312156119e257600080fd5b82356119ed8161191c565b9150602083013567ffffffffffffffff811115611a0957600080fd5b611a158582860161180d565b9150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611a5757835183529284019291840191600101611a3b565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b6020810160038310611a9b57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff8281168282160390808211156116b2576116b2611ab7565b8181038181111561101d5761101d611ab7565b808202811582820484141761101d5761101d611ab7565b600082611b3557634e487b7160e01b600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b6b57611b6b611ab7565b5060010190565b600060208284031215611b8457600080fd5b815161197d8161191c565b8082018082111561101d5761101d611ab756fea2646970667358221220b805d556c6cc504eadcc4cce905adb8f5fa3dfd94aa485f320dfba1640d5631464736f6c63430008130033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/core/Vest.sol:Vest",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/core/Vest.sol:Vest",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 24511,
        "contract": "contracts/core/Vest.sol:Vest",
        "label": "ZebraCore",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IZebraCore)37932"
      },
      {
        "astId": 22338,
        "contract": "contracts/core/Vest.sol:Vest",
        "label": "esZebra",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IEsZebra)36329"
      },
      {
        "astId": 22341,
        "contract": "contracts/core/Vest.sol:Vest",
        "label": "Zebra",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IZebra)37799"
      },
      {
        "astId": 22343,
        "contract": "contracts/core/Vest.sol:Vest",
        "label": "cliffTime",
        "offset": 20,
        "slot": "2",
        "type": "t_uint64"
      },
      {
        "astId": 22345,
        "contract": "contracts/core/Vest.sol:Vest",
        "label": "releaseTime",
        "offset": 0,
        "slot": "3",
        "type": "t_uint64"
      },
      {
        "astId": 22347,
        "contract": "contracts/core/Vest.sol:Vest",
        "label": "minDeposits",
        "offset": 8,
        "slot": "3",
        "type": "t_uint64"
      },
      {
        "astId": 22351,
        "contract": "contracts/core/Vest.sol:Vest",
        "label": "currentIds",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 22358,
        "contract": "contracts/core/Vest.sol:Vest",
        "label": "orderInfos",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(OrderInfo)22335_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IEsZebra)36329": {
        "encoding": "inplace",
        "label": "contract IEsZebra",
        "numberOfBytes": "20"
      },
      "t_contract(IZebra)37799": {
        "encoding": "inplace",
        "label": "contract IZebra",
        "numberOfBytes": "20"
      },
      "t_contract(IZebraCore)37932": {
        "encoding": "inplace",
        "label": "contract IZebraCore",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(OrderInfo)22335_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Vest.OrderInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(OrderInfo)22335_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(OrderInfo)22335_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vest.OrderInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(OrderInfo)22335_storage"
      },
      "t_struct(OrderInfo)22335_storage": {
        "encoding": "inplace",
        "label": "struct Vest.OrderInfo",
        "members": [
          {
            "astId": 22326,
            "contract": "contracts/core/Vest.sol:Vest",
            "label": "start",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 22328,
            "contract": "contracts/core/Vest.sol:Vest",
            "label": "cliffEnd",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 22330,
            "contract": "contracts/core/Vest.sol:Vest",
            "label": "releaseEnd",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 22332,
            "contract": "contracts/core/Vest.sol:Vest",
            "label": "released",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 22334,
            "contract": "contracts/core/Vest.sol:Vest",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}