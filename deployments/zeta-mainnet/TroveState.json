{
  "address": "0x491C06adeE915D39Ee26E6b01542FeE624580aAa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBorrowerOperations",
          "name": "_bo",
          "type": "address"
        },
        {
          "internalType": "contract IStabilityPool",
          "name": "_sp",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "bo",
      "outputs": [
        {
          "internalType": "contract IBorrowerOperations",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITroveManager",
          "name": "tm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "coll",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "MCR",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ICR",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "CCR",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "TCR",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minNetDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasCompensation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "entireSystemDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "entireSystemColl",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redemptionBootstrap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redemptionRateWithDecay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowingRateWithDecay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "troveStatus",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "surplusBalances",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "spCollGains",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "spEsZebraGains",
              "type": "uint256"
            }
          ],
          "internalType": "struct TroveState.State",
          "name": "state",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sp",
      "outputs": [
        {
          "internalType": "contract IStabilityPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x51c8a502f5d12934bc8c9f838cd40942616386ec11b93dbf6ac738d201599977",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0x491C06adeE915D39Ee26E6b01542FeE624580aAa",
    "transactionIndex": 23,
    "gasUsed": "921475",
    "logsBloom": "0x
    "blockHash": "0x2874e6d68fd687a270070fd8645504f974d91282f80d406a85ee92555f33b0d6",
    "transactionHash": "0x51c8a502f5d12934bc8c9f838cd40942616386ec11b93dbf6ac738d201599977",
    "logs": [],
    "blockNumber": 2082438,
    "cumulativeGasUsed": "4444184",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9EBA4Edc547b80CE364BD60925e287AD46034aB4",
    "0x710874eA89a5b25675C321843Ed7208a957D6B87"
  ],
  "numDeployments": 1,
  "solcInputHash": "67de95fb1d06552b83945aeba3fde888",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBorrowerOperations\",\"name\":\"_bo\",\"type\":\"address\"},{\"internalType\":\"contract IStabilityPool\",\"name\":\"_sp\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bo\",\"outputs\":[{\"internalType\":\"contract IBorrowerOperations\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"tm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MCR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ICR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"CCR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TCR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minNetDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasCompensation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionBootstrap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionRateWithDecay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowingRateWithDecay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"troveStatus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"surplusBalances\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"spCollGains\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"spEsZebraGains\",\"type\":\"uint256\"}],\"internalType\":\"struct TroveState.State\",\"name\":\"state\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sp\",\"outputs\":[{\"internalType\":\"contract IStabilityPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/TroveState.sol\":\"TroveState\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/helpers/TroveState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../interfaces/IBorrowerOperations.sol\\\";\\nimport \\\"../interfaces/ITroveManager.sol\\\";\\nimport \\\"../interfaces/ISortedTroves.sol\\\";\\nimport \\\"../interfaces/IStabilityPool.sol\\\";\\nimport \\\"../interfaces/IZebraBase.sol\\\";\\n\\ncontract TroveState {\\n\\tIBorrowerOperations public bo;\\n\\tIStabilityPool public sp;\\n\\n\\tstruct State {\\n\\t\\tuint256 coll;\\n\\t\\tuint256 debt;\\n\\t\\tuint256 interest;\\n\\t\\tuint256 MCR;\\n\\t\\tuint256 ICR;\\n\\t\\tuint256 CCR;\\n\\t\\tuint256 TCR;\\n\\t\\tuint256 minNetDebt;\\n\\t\\tuint256 gasCompensation;\\n\\t\\tuint256 price;\\n\\t\\tuint256 maxCap;\\n\\t\\tuint256 entireSystemDebt;\\n\\t\\tuint256 entireSystemColl;\\n\\t\\tuint256 redemptionBootstrap;\\n\\t\\tuint256 redemptionRateWithDecay;\\n\\t\\tuint256 borrowingRateWithDecay;\\n\\t\\tuint256 troveStatus;\\n\\t\\tuint256 surplusBalances;\\n\\t\\tuint256 spStaked;\\n\\t\\tuint256[] spCollGains;\\n\\t\\tuint256 spEsZebraGains;\\n\\t}\\n\\n\\tconstructor(IBorrowerOperations _bo, IStabilityPool _sp) {\\n\\t\\tbo = _bo;\\n\\t\\tsp = _sp;\\n\\t}\\n\\n\\tfunction getState(ITroveManager tm, address _borrower) public returns (State memory state) {\\n\\t\\t(state.coll, state.debt) = tm.getTroveCollAndDebt(_borrower);\\n\\t\\tstate.interest = tm.getTroveInterest(_borrower, state.debt);\\n\\t\\tstate.maxCap = tm.maxSystemDebt();\\n\\t\\tstate.MCR = tm.MCR();\\n\\t\\tstate.CCR = tm.CCR();\\n\\t\\tstate.TCR = bo.getTCR();\\n\\t\\tstate.minNetDebt = bo.minNetDebt();\\n\\t\\tstate.gasCompensation = IZebraBase(address(bo)).DEBT_GAS_COMPENSATION();\\n\\t\\tstate.price = tm.fetchPrice();\\n\\t\\tstate.ICR = tm.getCurrentICR(_borrower,state.price);\\n\\t\\tstate.entireSystemDebt = tm.getEntireSystemDebt();\\n\\t\\tstate.entireSystemColl = tm.getEntireSystemColl();\\n\\t\\tstate.redemptionBootstrap = tm.systemDeploymentTime() + tm.BOOTSTRAP_PERIOD();\\n\\t\\tstate.redemptionRateWithDecay = tm.getRedemptionRateWithDecay();\\n\\t\\tstate.borrowingRateWithDecay = tm.getBorrowingRateWithDecay();\\n\\t\\tstate.troveStatus = tm.getTroveStatus(_borrower);\\n\\t\\tstate.surplusBalances = tm.surplusBalances(_borrower);\\n\\t\\tstate.spStaked = sp.getTotalZebraUSDDeposits();\\n\\t\\tstate.spCollGains = sp.getDepositorCollateralGain(_borrower);\\n\\t\\tstate.spEsZebraGains = sp.claimableReward(_borrower);\\n\\t}\\n}\\n\",\"keccak256\":\"0x31cf9490ef3342a45de8d42f7e390a5f691f4ba9d728d86d36267a5ed94124cb\",\"license\":\"MIT\"},\"contracts/interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ITroveManager.sol\\\";\\n\\ninterface IBorrowerOperations {\\n\\tstruct SystemBalances {\\n\\t\\tuint256[] collaterals;\\n\\t\\tuint256[] debts;\\n\\t\\tuint256[] prices;\\n\\t}\\n\\n\\tenum BorrowerOperation {\\n\\t\\topenTrove,\\n\\t\\tcloseTrove,\\n\\t\\tadjustTrove\\n\\t}\\n\\n\\tevent BorrowingFeePaid(address indexed borrower, uint256 amount);\\n\\tevent CollateralConfigured(ITroveManager troveManager, IERC20 collateralToken);\\n\\tevent TroveCreated(address indexed _borrower, uint256 arrayIndex);\\n\\tevent TroveManagerRemoved(ITroveManager troveManager);\\n\\tevent TroveUpdated(address indexed _borrower, uint256 _debt, uint256 _coll, uint256 stake, BorrowerOperation operation);\\n\\n\\tfunction addColl(ITroveManager troveManager, address account, uint256 _collateralAmount, address _upperHint, address _lowerHint) external;\\n\\n\\tfunction adjustTrove(ITroveManager troveManager, address account, uint256 _maxFeePercentage, uint256 _collDeposit, uint256 _collWithdrawal, uint256 _debtChange, bool _isDebtIncrease, address _upperHint, address _lowerHint) external;\\n\\n\\tfunction closeTrove(ITroveManager troveManager, address account) external;\\n\\n\\tfunction configureCollateral(ITroveManager troveManager, IERC20 collateralToken) external;\\n\\n\\tfunction fetchBalances() external returns (SystemBalances memory balances);\\n\\n\\tfunction getGlobalSystemBalances() external returns (uint256 totalPricedCollateral, uint256 totalDebt);\\n\\n\\tfunction getTCR() external returns (uint256 globalTotalCollateralRatio);\\n\\n\\tfunction openTrove(ITroveManager troveManager, address account, uint256 _maxFeePercentage, uint256 _collateralAmount, uint256 _debtAmount, address _upperHint, address _lowerHint) external;\\n\\n\\tfunction removeTroveManager(ITroveManager troveManager) external;\\n\\n\\tfunction repayDebt(ITroveManager troveManager, address account, uint256 _debtAmount, address _upperHint, address _lowerHint) external;\\n\\n\\tfunction setMinNetDebt(uint256 _minNetDebt) external;\\n\\n\\tfunction withdrawColl(ITroveManager troveManager, address account, uint256 _collWithdrawal, address _upperHint, address _lowerHint) external;\\n\\n\\tfunction withdrawDebt(ITroveManager troveManager, address account, uint256 _maxFeePercentage, uint256 _debtAmount, address _upperHint, address _lowerHint) external;\\n\\n\\tfunction factory() external view returns (address);\\n\\n\\tfunction getCompositeDebt(uint256 _debt) external view returns (uint256);\\n\\n\\tfunction minNetDebt() external view returns (uint256);\\n\\n\\tfunction checkRecoveryMode(uint256 TCR) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x5cab9594ba308880bc3b0624422faef2673bf306c7f08d898e82544afa6c15aa\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../interfaces/IPyth.sol\\\";\\n\\ninterface IPriceFeed {\\n\\tstruct OracleRecord {\\n\\t\\tIPyth pyth;\\n\\t\\tuint32 decimals;\\n\\t\\tuint32 heartbeat;\\n\\t\\tbool isFeedWorking;\\n\\t}\\n\\n\\tstruct PriceRecord {\\n\\t\\tuint96 scaledPrice;\\n\\t\\tuint32 timestamp;\\n\\t\\tuint32 lastUpdated;\\n\\t}\\n\\n\\tstruct FeedResponse {\\n\\t\\tint64 price;\\n\\t\\t// Confidence interval around the price\\n\\t\\tuint64 conf;\\n\\t\\t// Price exponent\\n\\t\\tint32 expo;\\n\\t\\t// Unix timestamp describing when the price was published\\n\\t\\tuint publishTime;\\n\\t\\tbool success;\\n\\t}\\n\\n\\t// Custom Errors --------------------------------------------------------------------------------------------------\\n\\n\\terror PriceFeed__InvalidFeedResponseError();\\n\\terror PriceFeed__FeedFrozenError();\\n\\terror PriceFeed__UnknownFeedError();\\n\\terror PriceFeed__HeartbeatOutOfBoundsError();\\n\\n\\t// Events ---------------------------------------------------------------------------------------------------------\\n\\n\\tevent NewOracleRegistered(address pyth);\\n\\tevent PriceFeedStatusUpdated(address oracle, bool isWorking);\\n\\tevent PriceRecordUpdated(uint256 _price);\\n\\n\\tfunction fetchPrice(address _token) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x8ef2b41df0f27e3c3a61cbcbd999aac5928199c7cd5dc7da2d93d7a58891a908\",\"license\":\"MIT\"},\"contracts/interfaces/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IPyth {\\n\\tstruct Price {\\n\\t\\t// Price\\n\\t\\tint64 price;\\n\\t\\t// Confidence interval around the price\\n\\t\\tuint64 conf;\\n\\t\\t// Price exponent\\n\\t\\tint32 expo;\\n\\t\\t// Unix timestamp describing when the price was published\\n\\t\\tuint publishTime;\\n\\t}\\n\\n\\tfunction getPrice(bytes32 id) external view returns (Price memory);\\n\\n\\tfunction getPriceUnsafe(bytes32 id) external view returns (Price memory price);\\n}\\n\",\"keccak256\":\"0xfd589468ff2885c85543d89042b18e7801be77d8586bddf27481830fb233bd01\",\"license\":\"MIT\"},\"contracts/interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ISortedTroves {\\n\\tevent NodeAdded(address _id, uint256 _NICR);\\n\\tevent NodeRemoved(address _id);\\n\\n\\tfunction insert(address _id, uint256 _NICR, address _prevId, address _nextId) external;\\n\\n\\tfunction reInsert(address _id, uint256 _newNICR, address _prevId, address _nextId) external;\\n\\n\\tfunction remove(address _id) external;\\n\\n\\tfunction setAddresses(address _troveManagerAddress) external;\\n\\n\\tfunction contains(address _id) external view returns (bool);\\n\\n\\tfunction data() external view returns (address head, address tail, uint256 size);\\n\\n\\tfunction findInsertPosition(uint256 _NICR, address _prevId, address _nextId) external view returns (address, address);\\n\\n\\tfunction getFirst() external view returns (address);\\n\\n\\tfunction getLast() external view returns (address);\\n\\n\\tfunction getNext(address _id) external view returns (address);\\n\\n\\tfunction getPrev(address _id) external view returns (address);\\n\\n\\tfunction getSize() external view returns (uint256);\\n\\n\\tfunction isEmpty() external view returns (bool);\\n\\n\\tfunction troveManager() external view returns (address);\\n\\n\\tfunction validInsertPosition(uint256 _NICR, address _prevId, address _nextId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x568f6029aad06d63866b67a30cddcb6ca716b5163aac714d847189d09a2aaf31\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStabilityPool {\\n\\tevent CollateralGainWithdrawn(address indexed _depositor, uint256[] _collateral);\\n\\tevent CollateralOverwritten(address oldCollateral, address newCollateral);\\n\\tevent DepositSnapshotUpdated(address indexed _depositor, uint256 _P, uint256 _G);\\n\\tevent EpochUpdated(uint128 _currentEpoch);\\n\\tevent G_Updated(uint256 _G, uint128 _epoch, uint128 _scale);\\n\\tevent P_Updated(uint256 _P);\\n\\tevent RewardClaimed(address indexed account, address indexed recipient, uint256 claimed);\\n\\tevent S_Updated(uint256 idx, uint256 _S, uint128 _epoch, uint128 _scale);\\n\\tevent ScaleUpdated(uint128 _currentScale);\\n\\tevent StabilityPoolZebraUSDBalanceUpdated(uint256 _newBalance);\\n\\tevent UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\n\\n\\t// function claimCollateralGains(address recipient, uint256[] calldata collateralIndexes) external;\\n\\n\\t// function claimReward(address recipient) external returns (uint256 amount);\\n\\n\\tfunction enableCollateral(IERC20 _collateral) external;\\n\\n\\tfunction offset(IERC20 collateral, uint256 _debtToOffset, uint256 _collToAdd) external;\\n\\n\\tfunction provideToSP(uint256 _amount) external;\\n\\n\\tfunction startCollateralSunset(IERC20 collateral) external;\\n\\n\\tfunction withdrawFromSP(uint256 _amount) external;\\n\\n\\tfunction DECIMAL_PRECISION() external view returns (uint256);\\n\\n\\tfunction P() external view returns (uint256);\\n\\n\\tfunction SCALE_FACTOR() external view returns (uint256);\\n\\n\\tfunction SUNSET_DURATION() external view returns (uint128);\\n\\n\\tfunction claimableReward(address _depositor) external view returns (uint256);\\n\\n\\tfunction currentEpoch() external view returns (uint128);\\n\\n\\tfunction currentScale() external view returns (uint128);\\n\\n\\tfunction depositSnapshots(address) external view returns (uint256 P, uint256 G, uint128 scale, uint128 epoch);\\n\\n\\tfunction depositSums(address, uint256) external view returns (uint256);\\n\\n\\tfunction epochToScaleToG(uint128, uint128) external view returns (uint256);\\n\\n\\tfunction epochToScaleToSums(uint128, uint128, uint256) external view returns (uint256);\\n\\n\\tfunction factory() external view returns (address);\\n\\n\\tfunction getCompoundedDeposit(address _depositor) external view returns (uint256);\\n\\n\\tfunction getDepositorCollateralGain(address _depositor) external view returns (uint256[] memory collateralGains);\\n\\n\\tfunction getTotalZebraUSDDeposits() external view returns (uint256);\\n\\n\\tfunction lastDebtLossError_Offset() external view returns (uint256);\\n\\n\\tfunction lastEsZebraError() external view returns (uint256);\\n\\n\\tfunction liquidationManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0x17fda917649a6ed78f225348291ef65f35cba6631544e30a75e9e8a7aaf72861\",\"license\":\"MIT\"},\"contracts/interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IZebraBase.sol\\\";\\nimport \\\"./ISortedTroves.sol\\\";\\nimport \\\"./IPriceFeed.sol\\\";\\n\\ninterface ITroveManager is IZebraBase {\\n\\t// Store the necessary data for a trove\\n\\tstruct Trove {\\n\\t\\tuint256 debt;\\n\\t\\tuint256 coll;\\n\\t\\tuint256 stake;\\n\\t\\tStatus status;\\n\\t\\tuint128 arrayIndex;\\n\\t}\\n\\n\\tstruct RedemptionTotals {\\n\\t\\tuint256 remainingDebt;\\n\\t\\tuint256 totalDebtToRedeem;\\n\\t\\tuint256 totalCollateralDrawn;\\n\\t\\tuint256 totalInterest;\\n\\t\\tuint256 collateralFee;\\n\\t\\tuint256 collateralToSendToRedeemer;\\n\\t\\tuint256 decayedBaseRate;\\n\\t\\tuint256 price;\\n\\t\\tuint256 totalDebtSupplyAtStart;\\n\\t}\\n\\n\\tstruct SingleRedemptionValues {\\n\\t\\tuint256 debtLot;\\n\\t\\tuint256 collateralLot;\\n\\t\\tuint256 interestLot;\\n\\t\\tbool cancelledPartial;\\n\\t}\\n\\n\\t// Object containing the collateral and debt snapshots for a given active trove\\n\\tstruct RewardSnapshot {\\n\\t\\tuint256 collateral;\\n\\t\\tuint256 debt;\\n\\t\\tuint256 interest;\\n\\t}\\n\\n\\tenum TroveManagerOperation {\\n\\t\\tapplyPendingRewards,\\n\\t\\tliquidateInNormalMode,\\n\\t\\tliquidateInRecoveryMode,\\n\\t\\tredeemCollateral\\n\\t}\\n\\n\\tenum Status {\\n\\t\\tnonExistent,\\n\\t\\tactive,\\n\\t\\tclosedByOwner,\\n\\t\\tclosedByLiquidation,\\n\\t\\tclosedByRedemption\\n\\t}\\n\\n\\tevent InsterstPaid(address _account, address _borrower, uint256 _interest);\\n\\tevent TroveUpdated(address indexed _borrower, uint256 _debt, uint256 _coll, uint256 _stake, TroveManagerOperation _operation);\\n\\tevent Redemption(uint256 _attemptedDebtAmount, uint256 _actualDebtAmount, uint256 _collateralSent, uint256 _InterestDebt, uint256 _collateralFee);\\n\\tevent BaseRateUpdated(uint256 _baseRate);\\n\\tevent LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\\n\\tevent TotalStakesUpdated(uint256 _newTotalStakes);\\n\\tevent SystemSnapshotsUpdated(uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot);\\n\\tevent LTermsUpdated(uint256 _L_collateral, uint256 _L_debt);\\n\\tevent TroveSnapshotsUpdated(uint256 _L_collateral, uint256 _L_debt, uint256 _L_Interest_Debt);\\n\\tevent TroveIndexUpdated(address _borrower, uint256 _newIndex);\\n\\tevent CollateralSent(address _to, uint256 _amount);\\n\\tevent RewardClaimed(address indexed account, address indexed recipient, uint256 claimed);\\n\\n\\tfunction addCollateralSurplus(address borrower, uint256 collSurplus) external;\\n\\n\\tfunction applyPendingRewards(address _borrower) external returns (uint256 coll, uint256 debt);\\n\\n\\tfunction claimCollateral(address _receiver) external;\\n\\n\\tfunction closeTrove(address _borrower, address _receiver, uint256 collAmount, uint256 debtAmount) external;\\n\\n\\tfunction closeTroveByLiquidation(address _borrower) external;\\n\\n\\tfunction decayBaseRateAndGetBorrowingFee(uint256 _debt) external returns (uint256);\\n\\n\\tfunction decreaseDebtAndSendCollateral(address account, uint256 debt, uint256 coll) external;\\n\\n\\tfunction finalizeLiquidation(address _liquidator, uint256 _debt, uint256 _coll, uint256 _collSurplus, uint256 _debtGasComp, uint256 _collGasComp, uint256 _interest) external;\\n\\n\\tfunction getEntireSystemBalances() external returns (uint256, uint256, uint256);\\n\\n\\tfunction movePendingTroveRewardsToActiveBalances(uint256 _debt, uint256 _collateral) external;\\n\\n\\tfunction openTrove(address _borrower, uint256 _collateralAmount, uint256 _compositeDebt, uint256 NICR, address _upperHint, address _lowerHint) external returns (uint256 stake, uint256 arrayIndex);\\n\\n\\tfunction redeemCollateral(uint256 _debtAmount, address _firstRedemptionHint, address _upperPartialRedemptionHint, address _lowerPartialRedemptionHint, uint256 _partialRedemptionHintNICR, uint256 _maxIterations, uint256 _maxFeePercentage) external;\\n\\n\\tfunction setAddresses(address _priceFeedAddress, address _sortedTrovesAddress, IERC20 _collateralToken) external;\\n\\n\\tfunction setParameters(uint256 _minuteDecayFactor, uint256 _redemptionFeeFloor, uint256 _maxRedemptionFee, uint256 _borrowingFeeFloor, uint256 _maxBorrowingFee, uint256 _maxSystemDebt, uint256 _MCR, uint32 _interestRate) external;\\n\\n\\tfunction setPaused(bool _paused) external;\\n\\n\\tfunction setPriceFeed(address _priceFeedAddress) external;\\n\\n\\tfunction updateTroveFromAdjustment(bool _isDebtIncrease, uint256 _debtChange, uint256 _netDebtChange, bool _isCollIncrease, uint256 _collChange, address _upperHint, address _lowerHint, address _borrower, address _receiver) external returns (uint256, uint256, uint256);\\n\\n\\tfunction fetchPrice() external returns (uint256);\\n\\n\\tfunction distributeInterestDebt() external returns (uint256);\\n\\n\\tfunction repayInterest(address _account, address _borrower, uint256 _debt) external;\\n\\n\\tfunction BOOTSTRAP_PERIOD() external view returns (uint256);\\n\\n\\tfunction L_collateral() external view returns (uint256);\\n\\n\\tfunction L_debt() external view returns (uint256);\\n\\n\\tfunction MCR() external view returns (uint256);\\n\\n\\tfunction getTrove(address _borrower) external view returns (Trove memory);\\n\\n\\tfunction baseRate() external view returns (uint256);\\n\\n\\tfunction borrowerOperationsAddress() external view returns (address);\\n\\n\\tfunction borrowingFeeFloor() external view returns (uint256);\\n\\n\\tfunction collateralToken() external view returns (IERC20);\\n\\n\\tfunction defaultedCollateral() external view returns (uint256);\\n\\n\\tfunction defaultedDebt() external view returns (uint256);\\n\\n\\tfunction getBorrowingFee(uint256 _debt) external view returns (uint256);\\n\\n\\tfunction getBorrowingFeeWithDecay(uint256 _debt) external view returns (uint256);\\n\\n\\tfunction getBorrowingRate() external view returns (uint256);\\n\\n\\tfunction getBorrowingRateWithDecay() external view returns (uint256);\\n\\n\\tfunction getCurrentICR(address _borrower, uint256 _price) external view returns (uint256);\\n\\n\\tfunction getEntireDebtAndColl(address _borrower) external view returns (uint256 debt, uint256 coll, uint256 pendingDebtReward, uint256 pendingCollateralReward);\\n\\n\\tfunction getEntireSystemColl() external view returns (uint256);\\n\\n\\tfunction getEntireSystemDebt() external view returns (uint256);\\n\\n\\tfunction getGlobalSystemDebt() external view returns (uint256);\\n\\n\\tfunction getTroveInterest(address _borrower, uint256 _debt) external view returns (uint256);\\n\\n\\tfunction getRedemptionICR(address _borrower, uint256 _price) external view returns (uint256);\\n\\n\\tfunction getNominalICR(address _borrower) external view returns (uint256);\\n\\n\\tfunction getPendingCollAndDebtRewards(address _borrower) external view returns (uint256, uint256);\\n\\n\\tfunction getRedemptionFeeWithDecay(uint256 _collateralDrawn) external view returns (uint256);\\n\\n\\tfunction getRedemptionRate() external view returns (uint256);\\n\\n\\tfunction getRedemptionRateWithDecay() external view returns (uint256);\\n\\n\\tfunction getTotalActiveCollateral() external view returns (uint256);\\n\\n\\tfunction getTotalActiveDebt() external view returns (uint256);\\n\\n\\tfunction getTroveCollAndDebt(address _borrower) external view returns (uint256 coll, uint256 debt);\\n\\n\\tfunction getTroveFromTroveOwnersArray(uint256 _index) external view returns (address);\\n\\n\\tfunction getTroveOwnersCount() external view returns (uint256);\\n\\n\\tfunction getTroveStake(address _borrower) external view returns (uint256);\\n\\n\\tfunction getTroveStatus(address _borrower) external view returns (uint256);\\n\\n\\tfunction hasPendingRewards(address _borrower) external view returns (bool);\\n\\n\\tfunction lastCollateralError_Redistribution() external view returns (uint256);\\n\\n\\tfunction lastDebtError_Redistribution() external view returns (uint256);\\n\\n\\tfunction lastFeeOperationTime() external view returns (uint256);\\n\\n\\tfunction liquidationManager() external view returns (address);\\n\\n\\tfunction maxBorrowingFee() external view returns (uint256);\\n\\n\\tfunction maxRedemptionFee() external view returns (uint256);\\n\\n\\tfunction maxSystemDebt() external view returns (uint256);\\n\\n\\tfunction minuteDecayFactor() external view returns (uint256);\\n\\n\\tfunction paused() external view returns (bool);\\n\\n\\tfunction redemptionFeeFloor() external view returns (uint256);\\n\\n\\tfunction getRewardSnapshots(address) external view returns (RewardSnapshot memory);\\n\\n\\tfunction priceFeed() external view returns (IPriceFeed);\\n\\n\\tfunction sortedTroves() external view returns (ISortedTroves);\\n\\n\\tfunction sunsetting() external view returns (bool);\\n\\n\\tfunction surplusBalances(address) external view returns (uint256);\\n\\n\\tfunction systemDeploymentTime() external view returns (uint256);\\n\\n\\tfunction totalCollateralSnapshot() external view returns (uint256);\\n\\n\\tfunction totalStakes() external view returns (uint256);\\n\\n\\tfunction totalStakesSnapshot() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4e1f71cf4e8a516e92243085cf0f2f462cf71e2709b2266b36ab0e786bcd8ce3\",\"license\":\"MIT\"},\"contracts/interfaces/IZebraBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IZebraBase {\\n\\tfunction DECIMAL_PRECISION() external view returns (uint256);\\n\\n\\t// Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n\\tfunction CCR() external view returns (uint256); // 200%\\n\\n\\t// Amount of debt to be locked in gas pool on opening troves\\n\\tfunction DEBT_GAS_COMPENSATION() external view returns (uint256);\\n\\n\\tfunction PERCENT_DIVISOR() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4564d4a42c8586369e464c6d71de991a1521fdaf0e9411195f2b73847cbc55ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610fad380380610fad83398101604081905261002f91610078565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100b2565b6001600160a01b038116811461007557600080fd5b50565b6000806040838503121561008b57600080fd5b825161009681610060565b60208401519092506100a781610060565b809150509250929050565b610eec806100c16000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063500d684714610046578063790fc8b414610076578063e1dadf3b14610096575b600080fd5b600054610059906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610089610084366004610bb7565b6100a9565b60405161006d9190610c2b565b600154610059906001600160a01b031681565b61014c604051806102a001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160608152602001600081525090565b6040517f2b2b2bac0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152841690632b2b2bac906024016040805180830381865afa1580156101aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ce9190610d4c565b602083018190529082526040517f55ca38cf0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301526024820192909252908416906355ca38cf90604401602060405180830381865afa158015610240573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102649190610d70565b816040018181525050826001600160a01b0316632f5c83a86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cf9190610d70565b81610140018181525050826001600160a01b031663794e57246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033b9190610d70565b816060018181525050826001600160a01b0316635733d58f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a69190610d70565b60a082015260008054604080517fb620115d00000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169263b620115d9260048084019360209390839003909101908290875af1158015610411573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104359190610d70565b60c0820152600054604080517f969c245200000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169163969c2452916004808201926020929091908290030181865afa15801561049d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c19190610d70565b60e0820152600054604080517f4ba4a28b00000000000000000000000000000000000000000000000000000000815290516001600160a01b0390921691634ba4a28b916004808201926020929091908290030181865afa158015610529573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054d9190610d70565b81610100018181525050826001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb9190610d70565b61012082018190526040517fd293c7100000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260248201929092529084169063d293c71090604401602060405180830381865afa15801561062b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064f9190610d70565b816080018181525050826001600160a01b031663795d26c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ba9190610d70565b81610160018181525050826001600160a01b031663887105d36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107269190610d70565b81610180018181525050826001600160a01b031663c35bc5506040518163ffffffff1660e01b8152600401602060405180830381865afa15801561076e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107929190610d70565b836001600160a01b031663720fbe2c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f49190610d70565b6107fe9190610d89565b816101a0018181525050826001600160a01b031663c52861f26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610846573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086a9190610d70565b816101c0018181525050826001600160a01b03166366ca4a216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d69190610d70565b6101e08201526040517f21e378010000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301528416906321e3780190602401602060405180830381865afa15801561093b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095f9190610d70565b6102008201526040517fec38a05d0000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015284169063ec38a05d90602401602060405180830381865afa1580156109c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e89190610d70565b610220820152600154604080517ff177b83500000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169163f177b835916004808201926020929091908290030181865afa158015610a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a759190610d70565b6102408201526001546040517f307d36120000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529091169063307d361290602401600060405180830381865afa158015610ade573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b069190810190610df8565b6102608201526001546040517fe95034250000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529091169063e950342590602401602060405180830381865afa158015610b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b939190610d70565b61028082015292915050565b6001600160a01b0381168114610bb457600080fd5b50565b60008060408385031215610bca57600080fd5b8235610bd581610b9f565b91506020830135610be581610b9f565b809150509250929050565b600081518084526020808501945080840160005b83811015610c2057815187529582019590820190600101610c04565b509495945050505050565b602080825282518282015282015160408083019190915282015160608083019190915282015160808083019190915282015160a08083019190915282015160c08083019190915282015160e08083019190915282015161010080830191909152820151610120808301919091528201516101408083019190915282015161016080830191909152820151610180808301919091528201516101a0808301919091528201516101c0808301919091528201516101e080830191909152820151610200808301919091528201516102208083019190915282015161024080830191909152820151610260808301919091528201516102a06102808084018290526000929190610d3c6102c0860184610bf0565b9501519301929092525090919050565b60008060408385031215610d5f57600080fd5b505080516020909101519092909150565b600060208284031215610d8257600080fd5b5051919050565b80820180821115610dc3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020808385031215610e0b57600080fd5b825167ffffffffffffffff80821115610e2357600080fd5b818501915085601f830112610e3757600080fd5b815181811115610e4957610e49610dc9565b8060051b604051601f19603f83011681018181108582111715610e6e57610e6e610dc9565b604052918252848201925083810185019188831115610e8c57600080fd5b938501935b82851015610eaa57845184529385019392850192610e91565b9897505050505050505056fea26469706673582212200d50921adfb9597ab3aadec682369fd2671a8e1187b077ca09d913b582d5188664736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063500d684714610046578063790fc8b414610076578063e1dadf3b14610096575b600080fd5b600054610059906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610089610084366004610bb7565b6100a9565b60405161006d9190610c2b565b600154610059906001600160a01b031681565b61014c604051806102a001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160608152602001600081525090565b6040517f2b2b2bac0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152841690632b2b2bac906024016040805180830381865afa1580156101aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ce9190610d4c565b602083018190529082526040517f55ca38cf0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301526024820192909252908416906355ca38cf90604401602060405180830381865afa158015610240573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102649190610d70565b816040018181525050826001600160a01b0316632f5c83a86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cf9190610d70565b81610140018181525050826001600160a01b031663794e57246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033b9190610d70565b816060018181525050826001600160a01b0316635733d58f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a69190610d70565b60a082015260008054604080517fb620115d00000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169263b620115d9260048084019360209390839003909101908290875af1158015610411573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104359190610d70565b60c0820152600054604080517f969c245200000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169163969c2452916004808201926020929091908290030181865afa15801561049d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c19190610d70565b60e0820152600054604080517f4ba4a28b00000000000000000000000000000000000000000000000000000000815290516001600160a01b0390921691634ba4a28b916004808201926020929091908290030181865afa158015610529573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054d9190610d70565b81610100018181525050826001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb9190610d70565b61012082018190526040517fd293c7100000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260248201929092529084169063d293c71090604401602060405180830381865afa15801561062b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064f9190610d70565b816080018181525050826001600160a01b031663795d26c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ba9190610d70565b81610160018181525050826001600160a01b031663887105d36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107269190610d70565b81610180018181525050826001600160a01b031663c35bc5506040518163ffffffff1660e01b8152600401602060405180830381865afa15801561076e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107929190610d70565b836001600160a01b031663720fbe2c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f49190610d70565b6107fe9190610d89565b816101a0018181525050826001600160a01b031663c52861f26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610846573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086a9190610d70565b816101c0018181525050826001600160a01b03166366ca4a216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d69190610d70565b6101e08201526040517f21e378010000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301528416906321e3780190602401602060405180830381865afa15801561093b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095f9190610d70565b6102008201526040517fec38a05d0000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015284169063ec38a05d90602401602060405180830381865afa1580156109c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e89190610d70565b610220820152600154604080517ff177b83500000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169163f177b835916004808201926020929091908290030181865afa158015610a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a759190610d70565b6102408201526001546040517f307d36120000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529091169063307d361290602401600060405180830381865afa158015610ade573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b069190810190610df8565b6102608201526001546040517fe95034250000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529091169063e950342590602401602060405180830381865afa158015610b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b939190610d70565b61028082015292915050565b6001600160a01b0381168114610bb457600080fd5b50565b60008060408385031215610bca57600080fd5b8235610bd581610b9f565b91506020830135610be581610b9f565b809150509250929050565b600081518084526020808501945080840160005b83811015610c2057815187529582019590820190600101610c04565b509495945050505050565b602080825282518282015282015160408083019190915282015160608083019190915282015160808083019190915282015160a08083019190915282015160c08083019190915282015160e08083019190915282015161010080830191909152820151610120808301919091528201516101408083019190915282015161016080830191909152820151610180808301919091528201516101a0808301919091528201516101c0808301919091528201516101e080830191909152820151610200808301919091528201516102208083019190915282015161024080830191909152820151610260808301919091528201516102a06102808084018290526000929190610d3c6102c0860184610bf0565b9501519301929092525090919050565b60008060408385031215610d5f57600080fd5b505080516020909101519092909150565b600060208284031215610d8257600080fd5b5051919050565b80820180821115610dc3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020808385031215610e0b57600080fd5b825167ffffffffffffffff80821115610e2357600080fd5b818501915085601f830112610e3757600080fd5b815181811115610e4957610e49610dc9565b8060051b604051601f19603f83011681018181108582111715610e6e57610e6e610dc9565b604052918252848201925083810185019188831115610e8c57600080fd5b938501935b82851015610eaa57845184529385019392850192610e91565b9897505050505050505056fea26469706673582212200d50921adfb9597ab3aadec682369fd2671a8e1187b077ca09d913b582d5188664736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 87,
        "contract": "contracts/helpers/TroveState.sol:TroveState",
        "label": "bo",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IBorrowerOperations)573"
      },
      {
        "astId": 90,
        "contract": "contracts/helpers/TroveState.sol:TroveState",
        "label": "sp",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IStabilityPool)1010"
      }
    ],
    "types": {
      "t_contract(IBorrowerOperations)573": {
        "encoding": "inplace",
        "label": "contract IBorrowerOperations",
        "numberOfBytes": "20"
      },
      "t_contract(IStabilityPool)1010": {
        "encoding": "inplace",
        "label": "contract IStabilityPool",
        "numberOfBytes": "20"
      }
    }
  }
}