{
  "address": "0xa99Da54fCa0Fe561a0233D05D0Af022D9703DB6A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_multiTroveGetter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gasCompensation",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEBT_GAS_COMPENSATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "contract IBorrowerOperations",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "computeCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        }
      ],
      "name": "computeNominalCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract ITroveManager",
              "name": "troveManager",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "redeemAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct MultiCollateraRedemptionHint.Estimation",
          "name": "estimation",
          "type": "tuple"
        }
      ],
      "name": "estimateRedemption",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "firstRedemptionHint",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "remains",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collWithdrawn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxIntegration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "partialNICR",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "upperHint",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lowerHint",
              "type": "address"
            }
          ],
          "internalType": "struct MultiCollateraRedemptionHint.Redemption",
          "name": "redemption",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract ITroveManager",
              "name": "troveManager",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "redeemAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct MultiCollateraRedemptionHint.Estimation",
          "name": "estimation",
          "type": "tuple"
        }
      ],
      "name": "estimateRedemptionWithInterstLot",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "firstRedemptionHint",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "remains",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collWithdrawn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxIntegration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "partialNICR",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "upperHint",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lowerHint",
              "type": "address"
            }
          ],
          "internalType": "struct MultiCollateraRedemptionHint.Redemption",
          "name": "redemption",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITroveManager",
          "name": "troveManager",
          "type": "address"
        }
      ],
      "name": "getFirstRedemptionHint",
      "outputs": [
        {
          "internalType": "address",
          "name": "firstRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "less",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "more",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiTroveGetter",
      "outputs": [
        {
          "internalType": "contract MultiTroveGetter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x429870992b60433d2e9c33b95155e2d48eb3fe1a1b8fe23c90b8fa66e6af585d",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0xa99Da54fCa0Fe561a0233D05D0Af022D9703DB6A",
    "transactionIndex": 61,
    "gasUsed": "1199646",
    "logsBloom": "0x
    "blockHash": "0x0e134fca24d7bbe9d50e93fca5be83e20c4bca661edc1ac6a390bcdba293942d",
    "transactionHash": "0x429870992b60433d2e9c33b95155e2d48eb3fe1a1b8fe23c90b8fa66e6af585d",
    "logs": [],
    "blockNumber": 2646989,
    "cumulativeGasUsed": "12326393",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDe04cCD74fF37A62430110543bBb3721527AF843",
    "0x1ea7CC607ceD7C6f0755F676eb9d0FA99ce8590F",
    "2000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "678264f7d5fbb55a67df3aa692a1d233",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multiTroveGetter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasCompensation\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEBT_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"contract IBorrowerOperations\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"computeCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"}],\"name\":\"computeNominalCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"troveManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct MultiCollateraRedemptionHint.Estimation\",\"name\":\"estimation\",\"type\":\"tuple\"}],\"name\":\"estimateRedemption\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"firstRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"remains\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxIntegration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partialNICR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lowerHint\",\"type\":\"address\"}],\"internalType\":\"struct MultiCollateraRedemptionHint.Redemption\",\"name\":\"redemption\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"troveManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct MultiCollateraRedemptionHint.Estimation\",\"name\":\"estimation\",\"type\":\"tuple\"}],\"name\":\"estimateRedemptionWithInterstLot\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"firstRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"remains\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxIntegration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partialNICR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lowerHint\",\"type\":\"address\"}],\"internalType\":\"struct MultiCollateraRedemptionHint.Redemption\",\"name\":\"redemption\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"troveManager\",\"type\":\"address\"}],\"name\":\"getFirstRedemptionHint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"firstRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"less\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"more\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiTroveGetter\",\"outputs\":[{\"internalType\":\"contract MultiTroveGetter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/MultiCollateraRedemptionHint.sol\":\"MultiCollateraRedemptionHint\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/dependencies/ZebraBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\nimport \\\"../interfaces/IZebraBase.sol\\\";\\n\\n/*\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\ncontract ZebraBase is IZebraBase {\\n\\tuint256 public constant override DECIMAL_PRECISION = 1e18;\\n\\n\\t// Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n\\tuint256 public constant override CCR = 1700000000000000000; // 170%\\n\\n\\t// Amount of debt to be locked in gas pool on opening troves\\n\\tuint256 public immutable override DEBT_GAS_COMPENSATION;\\n\\n\\tuint256 public constant override PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n\\n\\tconstructor(uint256 _gasCompensation) {\\n\\t\\tDEBT_GAS_COMPENSATION = _gasCompensation;\\n\\t}\\n\\n\\t// --- Gas compensation functions ---\\n\\n\\t// Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\n\\tfunction _getCompositeDebt(uint256 _debt) internal view returns (uint256) {\\n\\t\\treturn _debt + DEBT_GAS_COMPENSATION;\\n\\t}\\n\\n\\tfunction _getNetDebt(uint256 _debt) internal view returns (uint256) {\\n\\t\\treturn _debt - DEBT_GAS_COMPENSATION;\\n\\t}\\n\\n\\t// Return the amount of collateral to be drawn from a trove's collateral and sent as gas compensation.\\n\\tfunction _getCollGasCompensation(uint256 _entireColl) internal pure returns (uint256) {\\n\\t\\treturn _entireColl / PERCENT_DIVISOR;\\n\\t}\\n\\n\\tfunction _requireUserAcceptsFee(uint256 _fee, uint256 _amount, uint256 _maxFeePercentage) internal pure {\\n\\t\\tuint256 feePercentage = (_fee * DECIMAL_PRECISION) / _amount;\\n\\t\\trequire(feePercentage <= _maxFeePercentage, \\\"Fee exceeded provided maximum\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0xb3c775879d15810b58a0cbb7281f639e191295f05e2a820d02efd2d513b17aa9\",\"license\":\"MIT\"},\"contracts/dependencies/ZebraMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nlibrary ZebraMath {\\n\\tuint256 internal constant DECIMAL_PRECISION = 1e18;\\n\\n\\t/* Precision for Nominal ICR (independent of price). Rationale for the value:\\n\\t *\\n\\t * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n\\t * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n\\t *\\n\\t * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39,\\n\\t * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n\\t *\\n\\t */\\n\\tuint256 internal constant NICR_PRECISION = 1e20;\\n\\n\\tfunction _min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\t\\treturn (_a < _b) ? _a : _b;\\n\\t}\\n\\n\\tfunction _max(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\t\\treturn (_a >= _b) ? _a : _b;\\n\\t}\\n\\n\\t/*\\n\\t * Multiply two decimal numbers and use normal rounding rules:\\n\\t * -round product up if 19'th mantissa digit >= 5\\n\\t * -round product down if 19'th mantissa digit < 5\\n\\t *\\n\\t * Used only inside the exponentiation, _decPow().\\n\\t */\\n\\tfunction decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\n\\t\\tuint256 prod_xy = x * y;\\n\\n\\t\\tdecProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\n\\t}\\n\\n\\t/*\\n\\t * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n\\t *\\n\\t * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n\\t *\\n\\t * TroveManager._calcDecayedBaseRate\\n\\t *\\n\\t * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n\\t * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n\\t *\\n\\t * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n\\t * negligibly different from just passing the cap, since:\\n\\t *\\n\\t * the decayed base rate will be 0 for 1000 years or > 1000 years\\n\\t */\\n\\tfunction _decPow(uint256 _base, uint256 _minutes) internal pure returns (uint256) {\\n\\t\\tif (_minutes > 525600000) {\\n\\t\\t\\t_minutes = 525600000;\\n\\t\\t} // cap to avoid overflow\\n\\n\\t\\tif (_minutes == 0) {\\n\\t\\t\\treturn DECIMAL_PRECISION;\\n\\t\\t}\\n\\n\\t\\tuint256 y = DECIMAL_PRECISION;\\n\\t\\tuint256 x = _base;\\n\\t\\tuint256 n = _minutes;\\n\\n\\t\\t// Exponentiation-by-squaring\\n\\t\\twhile (n > 1) {\\n\\t\\t\\tif (n % 2 == 0) {\\n\\t\\t\\t\\tx = decMul(x, x);\\n\\t\\t\\t\\tn = n / 2;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// if (n % 2 != 0)\\n\\t\\t\\t\\ty = decMul(x, y);\\n\\t\\t\\t\\tx = decMul(x, x);\\n\\t\\t\\t\\tn = (n - 1) / 2;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn decMul(x, y);\\n\\t}\\n\\n\\tfunction _getAbsoluteDifference(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\t\\treturn (_a >= _b) ? _a - _b : _b - _a;\\n\\t}\\n\\n\\tfunction _computeNominalCR(uint256 _coll, uint256 _debt) internal pure returns (uint256) {\\n\\t\\tif (_debt > 0) {\\n\\t\\t\\treturn (_coll * NICR_PRECISION) / _debt;\\n\\t\\t}\\n\\t\\t// Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n\\t\\telse {\\n\\t\\t\\t// if (_debt == 0)\\n\\t\\t\\treturn 2 ** 256 - 1;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _computeCR(uint256 _coll, uint256 _debt, uint256 _price) internal pure returns (uint256) {\\n\\t\\tif (_debt > 0) {\\n\\t\\t\\tuint256 newCollRatio = (_coll * _price) / _debt;\\n\\n\\t\\t\\treturn newCollRatio;\\n\\t\\t}\\n\\t\\t// Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n\\t\\telse {\\n\\t\\t\\t// if (_debt == 0)\\n\\t\\t\\treturn type(uint256).max;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _computeCR(uint256 _coll, uint256 _debt) internal pure returns (uint256) {\\n\\t\\tif (_debt > 0) {\\n\\t\\t\\tuint256 newCollRatio = (_coll) / _debt;\\n\\n\\t\\t\\treturn newCollRatio;\\n\\t\\t}\\n\\t\\t// Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n\\t\\telse {\\n\\t\\t\\t// if (_debt == 0)\\n\\t\\t\\treturn type(uint256).max;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x9dfa30dc7364587ce53712047f506c038183f082e85c2ac9eaacea8254e8d293\",\"license\":\"MIT\"},\"contracts/helpers/MultiCollateraRedemptionHint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../interfaces/IBorrowerOperations.sol\\\";\\nimport \\\"../interfaces/ITroveManager.sol\\\";\\nimport \\\"../dependencies/ZebraBase.sol\\\";\\nimport \\\"../dependencies/ZebraMath.sol\\\";\\nimport \\\"./MultiTroveGetter.sol\\\";\\n\\ncontract MultiCollateraRedemptionHint is ZebraBase {\\n\\tIBorrowerOperations public immutable borrowerOperations;\\n\\tMultiTroveGetter public immutable multiTroveGetter;\\n\\n\\tstruct Estimation {\\n\\t\\tITroveManager troveManager;\\n\\t\\tuint256 redeemAmount;\\n\\t}\\n\\n\\tstruct Redemption {\\n\\t\\taddress firstRedemptionHint;\\n\\t\\tuint256 remains;\\n\\t\\tuint256 collWithdrawn;\\n\\t\\tuint256 maxIntegration;\\n\\t\\tuint256 maxFee;\\n\\t\\tuint256 partialNICR;\\n\\t\\taddress upperHint;\\n\\t\\taddress lowerHint;\\n\\t}\\n\\n\\tstruct Cache {\\n\\t\\tuint256 MCR;\\n\\t\\tuint256 price;\\n\\t\\tuint256 gasCompensation;\\n\\t\\tuint256 minNetDebt;\\n\\t\\taddress partialRedemptionHint;\\n\\t\\tuint256 maxRedemption;\\n\\t\\tuint256 newDebt;\\n\\t\\tuint256 newColl;\\n\\t\\tuint256 redemColl;\\n\\t}\\n\\n\\tconstructor(address _borrowerOperationsAddress, address _multiTroveGetter, uint256 _gasCompensation) ZebraBase(_gasCompensation) {\\n\\t\\tborrowerOperations = IBorrowerOperations(_borrowerOperationsAddress);\\n\\t\\tmultiTroveGetter = MultiTroveGetter(_multiTroveGetter);\\n\\t}\\n\\n\\tfunction getFirstRedemptionHint(ITroveManager troveManager) external returns (address firstRedemptionHint, uint256 interest, uint256 less, uint256 more) {\\n\\t\\tMultiTroveGetter.CombinedTroveData[] memory allTroves = multiTroveGetter.getMultipleSortedTroves(troveManager, -1, type(uint256).max);\\n\\t\\tuint256 MCR = troveManager.MCR();\\n\\t\\tuint256 price = troveManager.fetchPrice();\\n\\t\\tfor (uint256 i = 0; i < allTroves.length; i++) {\\n\\t\\t\\tMultiTroveGetter.CombinedTroveData memory trove = allTroves[i];\\n\\t\\t\\tuint256 ICR = ((trove.coll + trove.pendingCollateral) * price) / (trove.debt + trove.pendingDebt);\\n\\t\\t\\tif (ICR > MCR) {\\n\\t\\t\\t\\tfirstRedemptionHint = trove.owner;\\n\\t\\t\\t\\tinterest = trove.interest;\\n\\t\\t\\t\\tless = trove.debt + trove.pendingDebt + trove.interest - troveManager.DEBT_GAS_COMPENSATION() - borrowerOperations.minNetDebt();\\n\\t\\t\\t\\tmore = trove.debt + trove.pendingDebt + trove.interest - troveManager.DEBT_GAS_COMPENSATION();\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction estimateRedemption(Estimation memory estimation) external returns (Redemption memory redemption) {\\n\\t\\treturn _estimate(estimation, redemption, MultiCollateraRedemptionHint._decrease);\\n\\t}\\n\\n\\tfunction estimateRedemptionWithInterstLot(Estimation memory estimation) external returns (Redemption memory redemption) {\\n\\t\\treturn _estimate(estimation, redemption, MultiCollateraRedemptionHint._decreasei);\\n\\t}\\n\\n\\tfunction _estimate(Estimation memory estimation, Redemption memory redemption, function(uint256, uint256, uint256) pure returns (uint256) decrese) internal returns (Redemption memory) {\\n\\t\\tMultiTroveGetter.CombinedTroveData[] memory allTroves = multiTroveGetter.getMultipleSortedTroves(estimation.troveManager, -1, type(uint256).max);\\n\\t\\tCache memory cache;\\n\\t\\tcache.MCR = estimation.troveManager.MCR();\\n\\t\\tcache.price = estimation.troveManager.fetchPrice();\\n\\t\\tcache.gasCompensation = estimation.troveManager.DEBT_GAS_COMPENSATION();\\n\\t\\tcache.minNetDebt = borrowerOperations.minNetDebt();\\n\\t\\tredemption.remains = estimation.redeemAmount;\\n\\t\\tMultiTroveGetter.CombinedTroveData[] memory cacheAllTroves = new MultiTroveGetter.CombinedTroveData[](allTroves.length);\\n\\t\\tfor (uint256 i = 0; i < allTroves.length; i++) {\\n\\t\\t\\tcacheAllTroves[i] = allTroves[i];\\n\\t\\t}\\n\\t\\tfor (uint256 i = 0; i < cacheAllTroves.length; i++) {\\n\\t\\t\\tMultiTroveGetter.CombinedTroveData memory trove = cacheAllTroves[i];\\n\\t\\t\\tuint256 ICR = computeCR(trove.coll + trove.pendingCollateral, trove.debt + trove.pendingDebt, cache.price);\\n\\t\\t\\tif (ICR > cache.MCR) {\\n\\t\\t\\t\\tif (redemption.firstRedemptionHint == address(0)) {\\n\\t\\t\\t\\t\\tredemption.firstRedemptionHint = trove.owner;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (redemption.firstRedemptionHint != address(0)) {\\n\\t\\t\\t\\t\\tredemption.maxIntegration += 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (redemption.remains < trove.interest) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tcache.maxRedemption = ZebraMath._min(redemption.remains - trove.interest, trove.debt + trove.pendingDebt - cache.gasCompensation);\\n\\t\\t\\t\\tcache.newDebt = trove.debt + trove.pendingDebt - cache.maxRedemption;\\n\\t\\t\\t\\tcache.redemColl = ((cache.maxRedemption + trove.interest) * 1e18) / cache.price;\\n\\t\\t\\t\\tcache.newColl = trove.coll + trove.pendingCollateral - cache.redemColl;\\n\\t\\t\\t\\tif (cache.newDebt == cache.gasCompensation) {\\n\\t\\t\\t\\t\\tredemption.remains = decrese(redemption.remains, cache.maxRedemption, trove.interest);\\n\\t\\t\\t\\t\\tredemption.collWithdrawn = redemption.collWithdrawn + cache.redemColl;\\n\\t\\t\\t\\t\\tdelete allTroves[i];\\n\\t\\t\\t\\t\\tif (redemption.remains == 0) {\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tif (cache.newDebt - cache.gasCompensation < cache.minNetDebt) {\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tredemption.remains = decrese(redemption.remains, cache.maxRedemption, trove.interest);\\n\\t\\t\\t\\t\\t\\tredemption.collWithdrawn = redemption.collWithdrawn + cache.redemColl;\\n\\t\\t\\t\\t\\t\\tredemption.partialNICR = computeNominalCR(cache.newColl, cache.newDebt);\\n\\t\\t\\t\\t\\t\\tcache.partialRedemptionHint = trove.owner;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tfor (uint256 i = 0; i < allTroves.length; i++) {\\n\\t\\t\\tMultiTroveGetter.CombinedTroveData memory trove = allTroves[i];\\n\\t\\t\\tif (cache.partialRedemptionHint == trove.owner && redemption.partialNICR != 0) {\\n\\t\\t\\t\\tif (i != 0) {\\n\\t\\t\\t\\t\\tredemption.upperHint = allTroves[i - 1].owner;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (i != allTroves.length - 1) {\\n\\t\\t\\t\\t\\tredemption.lowerHint = allTroves[i + 1].owner;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tuint256 feeDecay = estimation.troveManager.getRedemptionRateWithDecay();\\n\\t\\tuint256 totalDebt = estimation.troveManager.getGlobalSystemDebt();\\n\\t\\tredemption.maxFee = feeDecay + ((redemption.collWithdrawn * cache.price) / totalDebt / 2);\\n\\t\\treturn redemption;\\n\\t}\\n\\n\\tfunction _decrease(uint256 remains, uint256 maxRedemption, uint256 interest) internal pure returns (uint256) {\\n\\t\\treturn remains - maxRedemption;\\n\\t}\\n\\n\\tfunction _decreasei(uint256 remains, uint256 maxRedemption, uint256 interest) internal pure returns (uint256) {\\n\\t\\treturn remains - maxRedemption - interest;\\n\\t}\\n\\n\\tfunction computeNominalCR(uint256 _coll, uint256 _debt) public pure returns (uint256) {\\n\\t\\treturn ZebraMath._computeNominalCR(_coll, _debt);\\n\\t}\\n\\n\\tfunction computeCR(uint256 _coll, uint256 _debt, uint256 _price) public pure returns (uint256) {\\n\\t\\treturn ZebraMath._computeCR(_coll, _debt, _price);\\n\\t}\\n}\\n\",\"keccak256\":\"0x50eef862b72f60fdd0f855af11b774ec97b702ad331644828f10e52e9c01d166\",\"license\":\"MIT\"},\"contracts/helpers/MultiTroveGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../interfaces/ITroveManager.sol\\\";\\nimport \\\"../interfaces/ISortedTroves.sol\\\";\\nimport \\\"../interfaces/IFactory.sol\\\";\\n\\n/*  Helper contract for grabbing Trove data for the front end. Not part of the ZebraCore Zebra system. */\\ncontract MultiTroveGetter {\\n\\tstruct CombinedTroveData {\\n\\t\\taddress owner;\\n\\t\\tuint256 debt;\\n\\t\\tuint256 interest;\\n\\t\\tuint256 coll;\\n\\t\\tuint256 stake;\\n\\t\\tuint256 pendingCollateral;\\n\\t\\tuint256 pendingDebt;\\n\\t}\\n\\n\\tfunction getMultipleSortedTroves(ITroveManager troveManager, int _startIdx, uint256 _count) external view returns (CombinedTroveData[] memory _troves) {\\n\\t\\tISortedTroves sortedTroves = ISortedTroves(troveManager.sortedTroves());\\n\\t\\tuint256 startIdx;\\n\\t\\tbool descend;\\n\\n\\t\\tif (_startIdx >= 0) {\\n\\t\\t\\tstartIdx = uint256(_startIdx);\\n\\t\\t\\tdescend = true;\\n\\t\\t} else {\\n\\t\\t\\tstartIdx = uint256(-(_startIdx + 1));\\n\\t\\t\\tdescend = false;\\n\\t\\t}\\n\\n\\t\\tuint256 sortedTrovesSize = sortedTroves.getSize();\\n\\t\\tif (startIdx >= sortedTrovesSize) {\\n\\t\\t\\t_troves = new CombinedTroveData[](0);\\n\\t\\t} else {\\n\\t\\t\\tuint256 maxCount = sortedTrovesSize - startIdx;\\n\\t\\t\\tif (_count > maxCount) {\\n\\t\\t\\t\\t_count = maxCount;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (descend) {\\n\\t\\t\\t\\t_troves = _getMultipleSortedTrovesFromHead(troveManager, sortedTroves, startIdx, _count);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t_troves = _getMultipleSortedTrovesFromTail(troveManager, sortedTroves, startIdx, _count);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _getMultipleSortedTrovesFromHead(ITroveManager troveManager, ISortedTroves sortedTroves, uint256 _startIdx, uint256 _count) internal view returns (CombinedTroveData[] memory _troves) {\\n\\t\\taddress currentTroveowner = sortedTroves.getFirst();\\n\\n\\t\\tfor (uint256 idx = 0; idx < _startIdx; ++idx) {\\n\\t\\t\\tcurrentTroveowner = sortedTroves.getNext(currentTroveowner);\\n\\t\\t}\\n\\n\\t\\t_troves = new CombinedTroveData[](_count);\\n\\n\\t\\tfor (uint256 idx = 0; idx < _count; ++idx) {\\n\\t\\t\\t_troves[idx].owner = currentTroveowner;\\n\\n\\t\\t\\tITroveManager.Trove memory trove = troveManager.getTrove(currentTroveowner);\\n\\t\\t\\t_troves[idx].debt = trove.debt;\\n\\t\\t\\t_troves[idx].coll = trove.coll;\\n\\t\\t\\t_troves[idx].stake = trove.stake;\\n\\t\\t\\t(_troves[idx].pendingCollateral, _troves[idx].pendingDebt) = troveManager.getPendingCollAndDebtRewards(currentTroveowner);\\n\\t\\t\\t_troves[idx].interest = troveManager.getTroveInterest(currentTroveowner, _troves[idx].debt + _troves[idx].pendingDebt);\\n\\t\\t\\tcurrentTroveowner = sortedTroves.getNext(currentTroveowner);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _getMultipleSortedTrovesFromTail(ITroveManager troveManager, ISortedTroves sortedTroves, uint256 _startIdx, uint256 _count) internal view returns (CombinedTroveData[] memory _troves) {\\n\\t\\taddress currentTroveowner = sortedTroves.getLast();\\n\\n\\t\\tfor (uint256 idx = 0; idx < _startIdx; ++idx) {\\n\\t\\t\\tcurrentTroveowner = sortedTroves.getPrev(currentTroveowner);\\n\\t\\t}\\n\\n\\t\\t_troves = new CombinedTroveData[](_count);\\n\\n\\t\\tfor (uint256 idx = 0; idx < _count; ++idx) {\\n\\t\\t\\t_troves[idx].owner = currentTroveowner;\\n\\t\\t\\tITroveManager.Trove memory trove = troveManager.getTrove(currentTroveowner);\\n\\t\\t\\t_troves[idx].debt = trove.debt;\\n\\t\\t\\t_troves[idx].coll = trove.coll;\\n\\t\\t\\t_troves[idx].stake = trove.stake;\\n\\n\\t\\t\\t(_troves[idx].pendingCollateral, _troves[idx].pendingDebt) = troveManager.getPendingCollAndDebtRewards(currentTroveowner);\\n\\n\\t\\t\\t_troves[idx].interest = troveManager.getTroveInterest(currentTroveowner, _troves[idx].debt + _troves[idx].pendingDebt);\\n\\n\\t\\t\\tcurrentTroveowner = sortedTroves.getPrev(currentTroveowner);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x7529509b7bd17062e7646b48e9ea0f77899485ad48bb22f30908f511ae6d6050\",\"license\":\"MIT\"},\"contracts/interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ITroveManager.sol\\\";\\n\\ninterface IBorrowerOperations {\\n\\tstruct SystemBalances {\\n\\t\\tuint256[] collaterals;\\n\\t\\tuint256[] debts;\\n\\t\\tuint256[] prices;\\n\\t}\\n\\n\\tenum BorrowerOperation {\\n\\t\\topenTrove,\\n\\t\\tcloseTrove,\\n\\t\\tadjustTrove\\n\\t}\\n\\n\\tevent BorrowingFeePaid(address indexed borrower, uint256 amount);\\n\\tevent CollateralConfigured(ITroveManager troveManager, IERC20 collateralToken);\\n\\tevent TroveCreated(address indexed _borrower, uint256 arrayIndex);\\n\\tevent TroveManagerRemoved(ITroveManager troveManager);\\n\\tevent TroveUpdated(address indexed _borrower, uint256 _debt, uint256 _coll, uint256 stake, BorrowerOperation operation);\\n\\n\\tfunction addColl(ITroveManager troveManager, address account, uint256 _collateralAmount, address _upperHint, address _lowerHint) external;\\n\\n\\tfunction adjustTrove(ITroveManager troveManager, address account, uint256 _maxFeePercentage, uint256 _collDeposit, uint256 _collWithdrawal, uint256 _debtChange, bool _isDebtIncrease, address _upperHint, address _lowerHint) external;\\n\\n\\tfunction closeTrove(ITroveManager troveManager, address account) external;\\n\\n\\tfunction configureCollateral(ITroveManager troveManager, IERC20 collateralToken) external;\\n\\n\\tfunction fetchBalances() external returns (SystemBalances memory balances);\\n\\n\\tfunction getGlobalSystemBalances() external returns (uint256 totalPricedCollateral, uint256 totalDebt);\\n\\n\\tfunction getTCR() external returns (uint256 globalTotalCollateralRatio);\\n\\n\\tfunction openTrove(ITroveManager troveManager, address account, uint256 _maxFeePercentage, uint256 _collateralAmount, uint256 _debtAmount, address _upperHint, address _lowerHint) external;\\n\\n\\tfunction removeTroveManager(ITroveManager troveManager) external;\\n\\n\\tfunction repayDebt(ITroveManager troveManager, address account, uint256 _debtAmount, address _upperHint, address _lowerHint) external;\\n\\n\\tfunction setMinNetDebt(uint256 _minNetDebt) external;\\n\\n\\tfunction withdrawColl(ITroveManager troveManager, address account, uint256 _collWithdrawal, address _upperHint, address _lowerHint) external;\\n\\n\\tfunction withdrawDebt(ITroveManager troveManager, address account, uint256 _maxFeePercentage, uint256 _debtAmount, address _upperHint, address _lowerHint) external;\\n\\n\\tfunction factory() external view returns (address);\\n\\n\\tfunction getCompositeDebt(uint256 _debt) external view returns (uint256);\\n\\n\\tfunction minNetDebt() external view returns (uint256);\\n\\n\\tfunction checkRecoveryMode(uint256 TCR) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x5cab9594ba308880bc3b0624422faef2673bf306c7f08d898e82544afa6c15aa\",\"license\":\"MIT\"},\"contracts/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IFactory {\\n\\t// commented values are suggested default parameters\\n\\tstruct DeploymentParams {\\n\\t\\tuint256 minuteDecayFactor; // 999037758833783000  (half life of 12 hours)\\n\\t\\tuint256 redemptionFeeFloor; // 1e18 / 1000 * 5  (0.5%)\\n\\t\\tuint256 maxRedemptionFee; // 1e18  (100%)\\n\\t\\tuint256 borrowingFeeFloor; // 1e18 / 1000 * 5  (0.5%)\\n\\t\\tuint256 maxBorrowingFee; // 1e18 / 100 * 5  (5%)\\n\\t\\tuint256 interestRateInBps; // 100 (1%)\\n\\t\\tuint256 maxDebt;\\n\\t\\tuint256 MCR; // 12 * 1e17  (120%)\\n\\t}\\n\\n\\tevent NewDeployment(address collateral, address priceFeed, address troveManager, address sortedTroves);\\n\\n\\tfunction deployNewInstance(address collateral, address priceFeed, address customTroveManagerImpl, address customSortedTrovesImpl, DeploymentParams calldata params) external;\\n\\n\\tfunction setImplementations(address _troveManagerImpl, address _sortedTrovesImpl) external;\\n\\n\\tfunction Zebra_CORE() external view returns (address);\\n\\n\\tfunction borrowerOperations() external view returns (address);\\n\\n\\tfunction debtToken() external view returns (address);\\n\\n\\tfunction guardian() external view returns (address);\\n\\n\\tfunction liquidationManager() external view returns (address);\\n\\n\\tfunction owner() external view returns (address);\\n\\n\\tfunction sortedTrovesImpl() external view returns (address);\\n\\n\\tfunction stabilityPool() external view returns (address);\\n\\n\\tfunction troveManagerCount() external view returns (uint256);\\n\\n\\tfunction troveManagerImpl() external view returns (address);\\n\\n\\tfunction troveManagers(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0xd95574a7620836b84d82eddd9a1c739139fd109ba2130a664823229fd7e6f26b\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../interfaces/IPyth.sol\\\";\\n\\ninterface IPriceFeed {\\n\\tstruct OracleRecord {\\n\\t\\tIPyth pyth;\\n\\t\\tuint32 decimals;\\n\\t\\tuint32 heartbeat;\\n\\t\\tbool isFeedWorking;\\n\\t}\\n\\n\\tstruct PriceRecord {\\n\\t\\tuint96 scaledPrice;\\n\\t\\tuint32 timestamp;\\n\\t\\tuint32 lastUpdated;\\n\\t}\\n\\n\\tstruct FeedResponse {\\n\\t\\tint64 price;\\n\\t\\t// Confidence interval around the price\\n\\t\\tuint64 conf;\\n\\t\\t// Price exponent\\n\\t\\tint32 expo;\\n\\t\\t// Unix timestamp describing when the price was published\\n\\t\\tuint publishTime;\\n\\t\\tbool success;\\n\\t}\\n\\n\\t// Custom Errors --------------------------------------------------------------------------------------------------\\n\\n\\terror PriceFeed__InvalidFeedResponseError();\\n\\terror PriceFeed__FeedFrozenError();\\n\\terror PriceFeed__UnknownFeedError();\\n\\terror PriceFeed__HeartbeatOutOfBoundsError();\\n\\n\\t// Events ---------------------------------------------------------------------------------------------------------\\n\\n\\tevent NewOracleRegistered(address pyth);\\n\\tevent PriceFeedStatusUpdated(address oracle, bool isWorking);\\n\\tevent PriceRecordUpdated(uint256 _price);\\n\\n\\tfunction fetchPrice(address _token) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x8ef2b41df0f27e3c3a61cbcbd999aac5928199c7cd5dc7da2d93d7a58891a908\",\"license\":\"MIT\"},\"contracts/interfaces/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IPyth {\\n\\tstruct Price {\\n\\t\\t// Price\\n\\t\\tint64 price;\\n\\t\\t// Confidence interval around the price\\n\\t\\tuint64 conf;\\n\\t\\t// Price exponent\\n\\t\\tint32 expo;\\n\\t\\t// Unix timestamp describing when the price was published\\n\\t\\tuint publishTime;\\n\\t}\\n\\n\\tfunction getPrice(bytes32 id) external view returns (Price memory);\\n\\n\\tfunction getPriceUnsafe(bytes32 id) external view returns (Price memory price);\\n}\\n\",\"keccak256\":\"0xfd589468ff2885c85543d89042b18e7801be77d8586bddf27481830fb233bd01\",\"license\":\"MIT\"},\"contracts/interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ISortedTroves {\\n\\tevent NodeAdded(address _id, uint256 _NICR);\\n\\tevent NodeRemoved(address _id);\\n\\n\\tfunction insert(address _id, uint256 _NICR, address _prevId, address _nextId) external;\\n\\n\\tfunction reInsert(address _id, uint256 _newNICR, address _prevId, address _nextId) external;\\n\\n\\tfunction remove(address _id) external;\\n\\n\\tfunction setAddresses(address _troveManagerAddress) external;\\n\\n\\tfunction contains(address _id) external view returns (bool);\\n\\n\\tfunction data() external view returns (address head, address tail, uint256 size);\\n\\n\\tfunction findInsertPosition(uint256 _NICR, address _prevId, address _nextId) external view returns (address, address);\\n\\n\\tfunction getFirst() external view returns (address);\\n\\n\\tfunction getLast() external view returns (address);\\n\\n\\tfunction getNext(address _id) external view returns (address);\\n\\n\\tfunction getPrev(address _id) external view returns (address);\\n\\n\\tfunction getSize() external view returns (uint256);\\n\\n\\tfunction isEmpty() external view returns (bool);\\n\\n\\tfunction troveManager() external view returns (address);\\n\\n\\tfunction validInsertPosition(uint256 _NICR, address _prevId, address _nextId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x568f6029aad06d63866b67a30cddcb6ca716b5163aac714d847189d09a2aaf31\",\"license\":\"MIT\"},\"contracts/interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IZebraBase.sol\\\";\\nimport \\\"./ISortedTroves.sol\\\";\\nimport \\\"./IPriceFeed.sol\\\";\\n\\ninterface ITroveManager is IZebraBase {\\n\\t// Store the necessary data for a trove\\n\\tstruct Trove {\\n\\t\\tuint256 debt;\\n\\t\\tuint256 coll;\\n\\t\\tuint256 stake;\\n\\t\\tStatus status;\\n\\t\\tuint128 arrayIndex;\\n\\t}\\n\\n\\tstruct RedemptionTotals {\\n\\t\\tuint256 remainingDebt;\\n\\t\\tuint256 totalDebtToRedeem;\\n\\t\\tuint256 totalCollateralDrawn;\\n\\t\\tuint256 totalInterest;\\n\\t\\tuint256 collateralFee;\\n\\t\\tuint256 collateralToSendToRedeemer;\\n\\t\\tuint256 decayedBaseRate;\\n\\t\\tuint256 price;\\n\\t\\tuint256 totalDebtSupplyAtStart;\\n\\t}\\n\\n\\tstruct SingleRedemptionValues {\\n\\t\\tuint256 debtLot;\\n\\t\\tuint256 collateralLot;\\n\\t\\tuint256 interestLot;\\n\\t\\tbool cancelledPartial;\\n\\t}\\n\\n\\t// Object containing the collateral and debt snapshots for a given active trove\\n\\tstruct RewardSnapshot {\\n\\t\\tuint256 collateral;\\n\\t\\tuint256 debt;\\n\\t\\tuint256 interest;\\n\\t}\\n\\n\\tenum TroveManagerOperation {\\n\\t\\tapplyPendingRewards,\\n\\t\\tliquidateInNormalMode,\\n\\t\\tliquidateInRecoveryMode,\\n\\t\\tredeemCollateral\\n\\t}\\n\\n\\tenum Status {\\n\\t\\tnonExistent,\\n\\t\\tactive,\\n\\t\\tclosedByOwner,\\n\\t\\tclosedByLiquidation,\\n\\t\\tclosedByRedemption\\n\\t}\\n\\n\\tevent InsterstPaid(address _account, address _borrower, uint256 _interest);\\n\\tevent TroveUpdated(address indexed _borrower, uint256 _debt, uint256 _coll, uint256 _stake, TroveManagerOperation _operation);\\n\\tevent Redemption(uint256 _attemptedDebtAmount, uint256 _actualDebtAmount, uint256 _collateralSent, uint256 _InterestDebt, uint256 _collateralFee);\\n\\tevent BaseRateUpdated(uint256 _baseRate);\\n\\tevent LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\\n\\tevent TotalStakesUpdated(uint256 _newTotalStakes);\\n\\tevent SystemSnapshotsUpdated(uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot);\\n\\tevent LTermsUpdated(uint256 _L_collateral, uint256 _L_debt);\\n\\tevent TroveSnapshotsUpdated(uint256 _L_collateral, uint256 _L_debt, uint256 _L_Interest_Debt);\\n\\tevent TroveIndexUpdated(address _borrower, uint256 _newIndex);\\n\\tevent CollateralSent(address _to, uint256 _amount);\\n\\tevent RewardClaimed(address indexed account, address indexed recipient, uint256 claimed);\\n\\n\\tfunction addCollateralSurplus(address borrower, uint256 collSurplus) external;\\n\\n\\tfunction applyPendingRewards(address _borrower) external returns (uint256 coll, uint256 debt);\\n\\n\\tfunction claimCollateral(address _receiver) external;\\n\\n\\tfunction closeTrove(address _borrower, address _receiver, uint256 collAmount, uint256 debtAmount) external;\\n\\n\\tfunction closeTroveByLiquidation(address _borrower) external;\\n\\n\\tfunction decayBaseRateAndGetBorrowingFee(uint256 _debt) external returns (uint256);\\n\\n\\tfunction decreaseDebtAndSendCollateral(address account, uint256 debt, uint256 coll) external;\\n\\n\\tfunction finalizeLiquidation(address _liquidator, uint256 _debt, uint256 _coll, uint256 _collSurplus, uint256 _debtGasComp, uint256 _collGasComp, uint256 _interest) external;\\n\\n\\tfunction getEntireSystemBalances() external returns (uint256, uint256, uint256);\\n\\n\\tfunction movePendingTroveRewardsToActiveBalances(uint256 _debt, uint256 _collateral) external;\\n\\n\\tfunction openTrove(address _borrower, uint256 _collateralAmount, uint256 _compositeDebt, uint256 NICR, address _upperHint, address _lowerHint) external returns (uint256 stake, uint256 arrayIndex);\\n\\n\\tfunction redeemCollateral(uint256 _debtAmount, address _firstRedemptionHint, address _upperPartialRedemptionHint, address _lowerPartialRedemptionHint, uint256 _partialRedemptionHintNICR, uint256 _maxIterations, uint256 _maxFeePercentage) external;\\n\\n\\tfunction setAddresses(address _priceFeedAddress, address _sortedTrovesAddress, IERC20 _collateralToken) external;\\n\\n\\tfunction setParameters(uint256 _minuteDecayFactor, uint256 _redemptionFeeFloor, uint256 _maxRedemptionFee, uint256 _borrowingFeeFloor, uint256 _maxBorrowingFee, uint256 _maxSystemDebt, uint256 _MCR, uint32 _interestRate) external;\\n\\n\\tfunction setPaused(bool _paused) external;\\n\\n\\tfunction setPriceFeed(address _priceFeedAddress) external;\\n\\n\\tfunction updateTroveFromAdjustment(bool _isDebtIncrease, uint256 _debtChange, uint256 _netDebtChange, bool _isCollIncrease, uint256 _collChange, address _upperHint, address _lowerHint, address _borrower, address _receiver) external returns (uint256, uint256, uint256);\\n\\n\\tfunction fetchPrice() external returns (uint256);\\n\\n\\tfunction distributeInterestDebt() external returns (uint256);\\n\\n\\tfunction repayInterest(address _account, address _borrower, uint256 _debt) external;\\n\\n\\tfunction BOOTSTRAP_PERIOD() external view returns (uint256);\\n\\n\\tfunction L_collateral() external view returns (uint256);\\n\\n\\tfunction L_debt() external view returns (uint256);\\n\\n\\tfunction MCR() external view returns (uint256);\\n\\n\\tfunction getTrove(address _borrower) external view returns (Trove memory);\\n\\n\\tfunction baseRate() external view returns (uint256);\\n\\n\\tfunction borrowerOperationsAddress() external view returns (address);\\n\\n\\tfunction borrowingFeeFloor() external view returns (uint256);\\n\\n\\tfunction collateralToken() external view returns (IERC20);\\n\\n\\tfunction defaultedCollateral() external view returns (uint256);\\n\\n\\tfunction defaultedDebt() external view returns (uint256);\\n\\n\\tfunction getBorrowingFee(uint256 _debt) external view returns (uint256);\\n\\n\\tfunction getBorrowingFeeWithDecay(uint256 _debt) external view returns (uint256);\\n\\n\\tfunction getBorrowingRate() external view returns (uint256);\\n\\n\\tfunction getBorrowingRateWithDecay() external view returns (uint256);\\n\\n\\tfunction getCurrentICR(address _borrower, uint256 _price) external view returns (uint256);\\n\\n\\tfunction getEntireDebtAndColl(address _borrower) external view returns (uint256 debt, uint256 coll, uint256 pendingDebtReward, uint256 pendingCollateralReward);\\n\\n\\tfunction getEntireSystemColl() external view returns (uint256);\\n\\n\\tfunction getEntireSystemDebt() external view returns (uint256);\\n\\n\\tfunction getGlobalSystemDebt() external view returns (uint256);\\n\\n\\tfunction getTroveInterest(address _borrower, uint256 _debt) external view returns (uint256);\\n\\n\\tfunction getRedemptionICR(address _borrower, uint256 _price) external view returns (uint256);\\n\\n\\tfunction getNominalICR(address _borrower) external view returns (uint256);\\n\\n\\tfunction getPendingCollAndDebtRewards(address _borrower) external view returns (uint256, uint256);\\n\\n\\tfunction getRedemptionFeeWithDecay(uint256 _collateralDrawn) external view returns (uint256);\\n\\n\\tfunction getRedemptionRate() external view returns (uint256);\\n\\n\\tfunction getRedemptionRateWithDecay() external view returns (uint256);\\n\\n\\tfunction getTotalActiveCollateral() external view returns (uint256);\\n\\n\\tfunction getTotalActiveDebt() external view returns (uint256);\\n\\n\\tfunction getTroveCollAndDebt(address _borrower) external view returns (uint256 coll, uint256 debt);\\n\\n\\tfunction getTroveFromTroveOwnersArray(uint256 _index) external view returns (address);\\n\\n\\tfunction getTroveOwnersCount() external view returns (uint256);\\n\\n\\tfunction getTroveStake(address _borrower) external view returns (uint256);\\n\\n\\tfunction getTroveStatus(address _borrower) external view returns (uint256);\\n\\n\\tfunction hasPendingRewards(address _borrower) external view returns (bool);\\n\\n\\tfunction lastCollateralError_Redistribution() external view returns (uint256);\\n\\n\\tfunction lastDebtError_Redistribution() external view returns (uint256);\\n\\n\\tfunction lastFeeOperationTime() external view returns (uint256);\\n\\n\\tfunction liquidationManager() external view returns (address);\\n\\n\\tfunction maxBorrowingFee() external view returns (uint256);\\n\\n\\tfunction maxRedemptionFee() external view returns (uint256);\\n\\n\\tfunction maxSystemDebt() external view returns (uint256);\\n\\n\\tfunction minuteDecayFactor() external view returns (uint256);\\n\\n\\tfunction paused() external view returns (bool);\\n\\n\\tfunction redemptionFeeFloor() external view returns (uint256);\\n\\n\\tfunction getRewardSnapshots(address) external view returns (RewardSnapshot memory);\\n\\n\\tfunction priceFeed() external view returns (IPriceFeed);\\n\\n\\tfunction sortedTroves() external view returns (ISortedTroves);\\n\\n\\tfunction sunsetting() external view returns (bool);\\n\\n\\tfunction surplusBalances(address) external view returns (uint256);\\n\\n\\tfunction systemDeploymentTime() external view returns (uint256);\\n\\n\\tfunction totalCollateralSnapshot() external view returns (uint256);\\n\\n\\tfunction totalStakes() external view returns (uint256);\\n\\n\\tfunction totalStakesSnapshot() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4e1f71cf4e8a516e92243085cf0f2f462cf71e2709b2266b36ab0e786bcd8ce3\",\"license\":\"MIT\"},\"contracts/interfaces/IZebraBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IZebraBase {\\n\\tfunction DECIMAL_PRECISION() external view returns (uint256);\\n\\n\\t// Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n\\tfunction CCR() external view returns (uint256); // 200%\\n\\n\\t// Amount of debt to be locked in gas pool on opening troves\\n\\tfunction DEBT_GAS_COMPENSATION() external view returns (uint256);\\n\\n\\tfunction PERCENT_DIVISOR() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4564d4a42c8586369e464c6d71de991a1521fdaf0e9411195f2b73847cbc55ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b506040516115a53803806115a583398101604081905261002f91610065565b6080526001600160a01b0391821660a0521660c0526100a1565b80516001600160a01b038116811461006057600080fd5b919050565b60008060006060848603121561007a57600080fd5b61008384610049565b925061009160208501610049565b9150604084015190509250925092565b60805160a05160c0516114ba6100eb6000396000818160d30152818161036c0152610876015260008181610176015281816105300152610a900152600061012d01526114ba6000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c806377553ad411610081578063b84ab2ef1161005b578063b84ab2ef1461022a578063c394a7fa14610267578063d4986a9f1461027a57600080fd5b806377553ad4146101715780639825c78f14610198578063a20baee61461021b57600080fd5b80634ba4a28b116100b25780634ba4a28b14610128578063525acdbb1461014f5780635733d58f1461016257600080fd5b80631ff75dc6146100ce5780634870dd9a14610112575b600080fd5b6100f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61011a60c881565b604051908152602001610109565b61011a7f000000000000000000000000000000000000000000000000000000000000000081565b61011a61015d366004611176565b61028d565b61011a6717979cfe362a000081565b6100f57f000000000000000000000000000000000000000000000000000000000000000081565b6101ab6101a636600461122a565b6102a4565b60405161010991906000610100820190506001600160a01b038084511683526020840151602084015260408401516040840152606084015160608401526080840151608084015260a084015160a08401528060c08501511660c08401528060e08501511660e08401525092915050565b61011a670de0b6b3a764000081565b61023d610238366004611282565b61031a565b604080516001600160a01b0390951685526020850193909352918301526060820152608001610109565b61011a61027536600461129f565b610703565b6101ab61028836600461122a565b61070f565b600061029a84848461077f565b90505b9392505050565b61030760405180610100016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b61031482826107b06107c7565b92915050565b6040517f05e533ce0000000000000000000000000000000000000000000000000000000081526001600160a01b03828116600483015260001960248301819052604483015260009182918291829182917f0000000000000000000000000000000000000000000000000000000000000000909116906305e533ce90606401600060405180830381865afa1580156103b5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103dd91908101906112c1565b90506000866001600160a01b031663794e57246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561041f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044391906113c6565b90506000876001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ab91906113c6565b905060005b83518110156106f85760008482815181106104cd576104cd6113df565b6020026020010151905060008160c0015182602001516104ed919061140b565b848360a001518460600151610502919061140b565b61050c919061141e565b6105169190611435565b9050848111156106e35781600001519950816040015198507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663969c24526040518163ffffffff1660e01b8152600401602060405180830381865afa15801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b091906113c6565b8b6001600160a01b0316634ba4a28b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061291906113c6565b83604001518460c00151856020015161062b919061140b565b610635919061140b565b61063f9190611457565b6106499190611457565b97508a6001600160a01b0316634ba4a28b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ad91906113c6565b82604001518360c0015184602001516106c6919061140b565b6106d0919061140b565b6106da9190611457565b965050506106f8565b505080806106f09061146a565b9150506104b0565b505050509193509193565b600061029d838361111e565b61077260405180610100016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b61031482826111546107c7565b600082156107a757600083610794848761141e565b61079e9190611435565b915061029d9050565b5060001961029d565b6000816107bd8486611457565b61029a9190611457565b61082a60405180610100016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b83516040517f05e533ce0000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201526000196024820181905260448201526000917f000000000000000000000000000000000000000000000000000000000000000016906305e533ce90606401600060405180830381865afa1580156108bd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e591908101906112c1565b905061093f6040518061012001604052806000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b85600001516001600160a01b031663794e57246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a591906113c6565b81600001818152505085600001516001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156109f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1691906113c6565b81602001818152505085600001516001600160a01b0316634ba4a28b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8591906113c6565b8160400181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663969c24526040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1091906113c6565b606082015260208087015190860152815160009067ffffffffffffffff811115610b3c57610b3c6111a2565b604051908082528060200260200182016040528015610bb657816020015b610ba36040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b815260200190600190039081610b5a5790505b50905060005b8351811015610c0f57838181518110610bd757610bd76113df565b6020026020010151828281518110610bf157610bf16113df565b60200260200101819052508080610c079061146a565b915050610bbc565b5060005b8151811015610f0b576000828281518110610c3057610c306113df565b602002602001015190506000610c718260a001518360600151610c53919061140b565b8360c001518460200151610c67919061140b565b876020015161028d565b8551909150811115610ef65788516001600160a01b0316610c9a5781516001600160a01b031689525b88516001600160a01b031615610cc157600189606001818151610cbd919061140b565b9052505b816040015189602001511015610cd8575050610f0b565b610d1782604001518a60200151610cef9190611457565b86604001518460c001518560200151610d08919061140b565b610d129190611457565b611160565b60a0860181905260c08301516020840151610d32919061140b565b610d3c9190611457565b60c08601526020850151604083015160a0870151610d5a919061140b565b610d6c90670de0b6b3a764000061141e565b610d769190611435565b610100860181905260a08301516060840151610d92919061140b565b610d9c9190611457565b60e0860152604085015160c086015103610e6857610dcb89602001518660a0015184604001518b63ffffffff16565b60208a015261010085015160408a0151610de5919061140b565b60408a01528551869084908110610dfe57610dfe6113df565b60200260200101610e4e6040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b90526020890151600003610e63575050610f0b565b610ef6565b846060015185604001518660c00151610e819190611457565b1015610e8e575050610f0b565b610ea989602001518660a0015184604001518b63ffffffff16565b60208a015261010085015160408a0151610ec3919061140b565b60408a015260e085015160c0860151610edc9190610703565b60a08a015250516001600160a01b03166080840152610f0b565b50508080610f039061146a565b915050610c13565b5060005b8351811015611002576000848281518110610f2c57610f2c6113df565b6020026020010151905080600001516001600160a01b031684608001516001600160a01b0316148015610f62575060a088015115155b15610fef578115610fa45784610f79600184611457565b81518110610f8957610f896113df565b6020908102919091010151516001600160a01b031660c08901525b60018551610fb29190611457565b8214610fef5784610fc483600161140b565b81518110610fd457610fd46113df565b6020908102919091010151516001600160a01b031660e08901525b5080610ffa8161146a565b915050610f0f565b50600087600001516001600160a01b031663c52861f26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106b91906113c6565b9050600088600001516001600160a01b0316635429c9426040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d591906113c6565b905060028185602001518a604001516110ee919061141e565b6110f89190611435565b6111029190611435565b61110c908361140b565b60808901525095979650505050505050565b6000811561114b578161113a68056bc75e2d631000008561141e565b6111449190611435565b9050610314565b50600019610314565b600061029a8385611457565b600081831061116f578161029d565b5090919050565b60008060006060848603121561118b57600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156111db576111db6111a2565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561120a5761120a6111a2565b604052919050565b6001600160a01b038116811461122757600080fd5b50565b60006040828403121561123c57600080fd5b6040516040810181811067ffffffffffffffff8211171561125f5761125f6111a2565b604052823561126d81611212565b81526020928301359281019290925250919050565b60006020828403121561129457600080fd5b813561029d81611212565b600080604083850312156112b257600080fd5b50508035926020909101359150565b600060208083850312156112d457600080fd5b825167ffffffffffffffff808211156112ec57600080fd5b818501915085601f83011261130057600080fd5b815181811115611312576113126111a2565b611320848260051b016111e1565b818152848101925060e091820284018501918883111561133f57600080fd5b938501935b828510156113ba5780858a03121561135c5760008081fd5b6113646111b8565b855161136f81611212565b8152858701518782015260408087015190820152606080870151908201526080808701519082015260a0808701519082015260c0808701519082015284529384019392850192611344565b50979650505050505050565b6000602082840312156113d857600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610314576103146113f5565b8082028115828204841417610314576103146113f5565b60008261145257634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610314576103146113f5565b6000600019820361147d5761147d6113f5565b506001019056fea2646970667358221220fa4f3f9aebb968a01742fd01ed8e584043a6a6ee265177c620234774d3ad652d64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c806377553ad411610081578063b84ab2ef1161005b578063b84ab2ef1461022a578063c394a7fa14610267578063d4986a9f1461027a57600080fd5b806377553ad4146101715780639825c78f14610198578063a20baee61461021b57600080fd5b80634ba4a28b116100b25780634ba4a28b14610128578063525acdbb1461014f5780635733d58f1461016257600080fd5b80631ff75dc6146100ce5780634870dd9a14610112575b600080fd5b6100f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61011a60c881565b604051908152602001610109565b61011a7f000000000000000000000000000000000000000000000000000000000000000081565b61011a61015d366004611176565b61028d565b61011a6717979cfe362a000081565b6100f57f000000000000000000000000000000000000000000000000000000000000000081565b6101ab6101a636600461122a565b6102a4565b60405161010991906000610100820190506001600160a01b038084511683526020840151602084015260408401516040840152606084015160608401526080840151608084015260a084015160a08401528060c08501511660c08401528060e08501511660e08401525092915050565b61011a670de0b6b3a764000081565b61023d610238366004611282565b61031a565b604080516001600160a01b0390951685526020850193909352918301526060820152608001610109565b61011a61027536600461129f565b610703565b6101ab61028836600461122a565b61070f565b600061029a84848461077f565b90505b9392505050565b61030760405180610100016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b61031482826107b06107c7565b92915050565b6040517f05e533ce0000000000000000000000000000000000000000000000000000000081526001600160a01b03828116600483015260001960248301819052604483015260009182918291829182917f0000000000000000000000000000000000000000000000000000000000000000909116906305e533ce90606401600060405180830381865afa1580156103b5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103dd91908101906112c1565b90506000866001600160a01b031663794e57246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561041f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044391906113c6565b90506000876001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ab91906113c6565b905060005b83518110156106f85760008482815181106104cd576104cd6113df565b6020026020010151905060008160c0015182602001516104ed919061140b565b848360a001518460600151610502919061140b565b61050c919061141e565b6105169190611435565b9050848111156106e35781600001519950816040015198507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663969c24526040518163ffffffff1660e01b8152600401602060405180830381865afa15801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b091906113c6565b8b6001600160a01b0316634ba4a28b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061291906113c6565b83604001518460c00151856020015161062b919061140b565b610635919061140b565b61063f9190611457565b6106499190611457565b97508a6001600160a01b0316634ba4a28b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ad91906113c6565b82604001518360c0015184602001516106c6919061140b565b6106d0919061140b565b6106da9190611457565b965050506106f8565b505080806106f09061146a565b9150506104b0565b505050509193509193565b600061029d838361111e565b61077260405180610100016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b61031482826111546107c7565b600082156107a757600083610794848761141e565b61079e9190611435565b915061029d9050565b5060001961029d565b6000816107bd8486611457565b61029a9190611457565b61082a60405180610100016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b83516040517f05e533ce0000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201526000196024820181905260448201526000917f000000000000000000000000000000000000000000000000000000000000000016906305e533ce90606401600060405180830381865afa1580156108bd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e591908101906112c1565b905061093f6040518061012001604052806000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b85600001516001600160a01b031663794e57246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a591906113c6565b81600001818152505085600001516001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156109f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1691906113c6565b81602001818152505085600001516001600160a01b0316634ba4a28b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8591906113c6565b8160400181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663969c24526040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1091906113c6565b606082015260208087015190860152815160009067ffffffffffffffff811115610b3c57610b3c6111a2565b604051908082528060200260200182016040528015610bb657816020015b610ba36040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b815260200190600190039081610b5a5790505b50905060005b8351811015610c0f57838181518110610bd757610bd76113df565b6020026020010151828281518110610bf157610bf16113df565b60200260200101819052508080610c079061146a565b915050610bbc565b5060005b8151811015610f0b576000828281518110610c3057610c306113df565b602002602001015190506000610c718260a001518360600151610c53919061140b565b8360c001518460200151610c67919061140b565b876020015161028d565b8551909150811115610ef65788516001600160a01b0316610c9a5781516001600160a01b031689525b88516001600160a01b031615610cc157600189606001818151610cbd919061140b565b9052505b816040015189602001511015610cd8575050610f0b565b610d1782604001518a60200151610cef9190611457565b86604001518460c001518560200151610d08919061140b565b610d129190611457565b611160565b60a0860181905260c08301516020840151610d32919061140b565b610d3c9190611457565b60c08601526020850151604083015160a0870151610d5a919061140b565b610d6c90670de0b6b3a764000061141e565b610d769190611435565b610100860181905260a08301516060840151610d92919061140b565b610d9c9190611457565b60e0860152604085015160c086015103610e6857610dcb89602001518660a0015184604001518b63ffffffff16565b60208a015261010085015160408a0151610de5919061140b565b60408a01528551869084908110610dfe57610dfe6113df565b60200260200101610e4e6040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b90526020890151600003610e63575050610f0b565b610ef6565b846060015185604001518660c00151610e819190611457565b1015610e8e575050610f0b565b610ea989602001518660a0015184604001518b63ffffffff16565b60208a015261010085015160408a0151610ec3919061140b565b60408a015260e085015160c0860151610edc9190610703565b60a08a015250516001600160a01b03166080840152610f0b565b50508080610f039061146a565b915050610c13565b5060005b8351811015611002576000848281518110610f2c57610f2c6113df565b6020026020010151905080600001516001600160a01b031684608001516001600160a01b0316148015610f62575060a088015115155b15610fef578115610fa45784610f79600184611457565b81518110610f8957610f896113df565b6020908102919091010151516001600160a01b031660c08901525b60018551610fb29190611457565b8214610fef5784610fc483600161140b565b81518110610fd457610fd46113df565b6020908102919091010151516001600160a01b031660e08901525b5080610ffa8161146a565b915050610f0f565b50600087600001516001600160a01b031663c52861f26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106b91906113c6565b9050600088600001516001600160a01b0316635429c9426040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d591906113c6565b905060028185602001518a604001516110ee919061141e565b6110f89190611435565b6111029190611435565b61110c908361140b565b60808901525095979650505050505050565b6000811561114b578161113a68056bc75e2d631000008561141e565b6111449190611435565b9050610314565b50600019610314565b600061029a8385611457565b600081831061116f578161029d565b5090919050565b60008060006060848603121561118b57600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156111db576111db6111a2565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561120a5761120a6111a2565b604052919050565b6001600160a01b038116811461122757600080fd5b50565b60006040828403121561123c57600080fd5b6040516040810181811067ffffffffffffffff8211171561125f5761125f6111a2565b604052823561126d81611212565b81526020928301359281019290925250919050565b60006020828403121561129457600080fd5b813561029d81611212565b600080604083850312156112b257600080fd5b50508035926020909101359150565b600060208083850312156112d457600080fd5b825167ffffffffffffffff808211156112ec57600080fd5b818501915085601f83011261130057600080fd5b815181811115611312576113126111a2565b611320848260051b016111e1565b818152848101925060e091820284018501918883111561133f57600080fd5b938501935b828510156113ba5780858a03121561135c5760008081fd5b6113646111b8565b855161136f81611212565b8152858701518782015260408087015190820152606080870151908201526080808701519082015260a0808701519082015260c0808701519082015284529384019392850192611344565b50979650505050505050565b6000602082840312156113d857600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610314576103146113f5565b8082028115828204841417610314576103146113f5565b60008261145257634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610314576103146113f5565b6000600019820361147d5761147d6113f5565b506001019056fea2646970667358221220fa4f3f9aebb968a01742fd01ed8e584043a6a6ee265177c620234774d3ad652d64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}