{
  "address": "0x710874eA89a5b25675C321843Ed7208a957D6B87",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IZebraCore",
          "name": "_zebraCore",
          "type": "address"
        },
        {
          "internalType": "contract IZebraUSD",
          "name": "_zebraUSDAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidationManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_communityIssuance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_collateral",
          "type": "uint256[]"
        }
      ],
      "name": "CollateralGainWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldCollateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newCollateral",
          "type": "address"
        }
      ],
      "name": "CollateralOverwritten",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_P",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_G",
          "type": "uint256"
        }
      ],
      "name": "DepositSnapshotUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_currentEpoch",
          "type": "uint128"
        }
      ],
      "name": "EpochUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_G",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_epoch",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_scale",
          "type": "uint128"
        }
      ],
      "name": "G_Updated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_P",
          "type": "uint256"
        }
      ],
      "name": "P_Updated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimed",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_S",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_epoch",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_scale",
          "type": "uint128"
        }
      ],
      "name": "S_Updated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_currentScale",
          "type": "uint128"
        }
      ],
      "name": "ScaleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBalance",
          "type": "uint256"
        }
      ],
      "name": "StabilityPoolZebraUSDBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newDeposit",
          "type": "uint256"
        }
      ],
      "name": "UserDepositChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SCALE_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUNSET_DURATION",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZebraCore",
      "outputs": [
        {
          "internalType": "contract IZebraCore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "_sunsetIndexes",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "idx",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "expiry",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "collateralIndexes",
          "type": "uint256[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "claimableReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collateralGainsByDepositor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collateralTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityIssuance",
      "outputs": [
        {
          "internalType": "contract ICommunityIssuance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpoch",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentScale",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositSnapshots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "P",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "G",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "scale",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "epoch",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositSums",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "enableCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "name": "epochToScaleToG",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "epochToScaleToSums",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "getCompoundedDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "getDepositorCollateralGain",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "collateralGains",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalZebraUSDDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "indexByCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastCollateralError_Offset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDebtLossError_Offset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastEsZebraError",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtToOffset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collToAdd",
          "type": "uint256"
        }
      ],
      "name": "offset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "provideToSP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "queue",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "firstSunsetIndexKey",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "nextSunsetIndexKey",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "startCollateralSunset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromSP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zebraUSD",
      "outputs": [
        {
          "internalType": "contract IZebraUSD",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x60e74efbaadf312f05d34573959cea4d74ed94d62b2f47ef1a3e4168b6efb199",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0x710874eA89a5b25675C321843Ed7208a957D6B87",
    "transactionIndex": 20,
    "gasUsed": "2962767",
    "logsBloom": "0x
    "blockHash": "0xfaa159c671e5053ee4e00d2d1695ba10182fa4985eb97329bc8b1200bc730580",
    "transactionHash": "0x60e74efbaadf312f05d34573959cea4d74ed94d62b2f47ef1a3e4168b6efb199",
    "logs": [],
    "blockNumber": 2082404,
    "cumulativeGasUsed": "7119176",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xadc1E93730e31B19Bd205D38BC399296e8A40728",
    "0xC9e250A4560ad30543AEce22E247866Fb57a45e5",
    "0xdf533a8b30cd0817d53f41bf484140483dabd2a5",
    "0x1f1f4609de6fdba03e975fd010930ded4091cf42",
    "0x5c53E243077fE960Dad06Ab5Ea3e0B9771dc5CdB"
  ],
  "numDeployments": 1,
  "solcInputHash": "1df14a9ede2145d864db7b0244547377",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IZebraCore\",\"name\":\"_zebraCore\",\"type\":\"address\"},{\"internalType\":\"contract IZebraUSD\",\"name\":\"_zebraUSDAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_communityIssuance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_collateral\",\"type\":\"uint256[]\"}],\"name\":\"CollateralGainWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCollateral\",\"type\":\"address\"}],\"name\":\"CollateralOverwritten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_P\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_G\",\"type\":\"uint256\"}],\"name\":\"DepositSnapshotUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_currentEpoch\",\"type\":\"uint128\"}],\"name\":\"EpochUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_G\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_epoch\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_scale\",\"type\":\"uint128\"}],\"name\":\"G_Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_P\",\"type\":\"uint256\"}],\"name\":\"P_Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_S\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_epoch\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_scale\",\"type\":\"uint128\"}],\"name\":\"S_Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_currentScale\",\"type\":\"uint128\"}],\"name\":\"ScaleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"StabilityPoolZebraUSDBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newDeposit\",\"type\":\"uint256\"}],\"name\":\"UserDepositChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUNSET_DURATION\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZebraCore\",\"outputs\":[{\"internalType\":\"contract IZebraCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"_sunsetIndexes\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"idx\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"expiry\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"collateralIndexes\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"claimableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralGainsByDepositor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityIssuance\",\"outputs\":[{\"internalType\":\"contract ICommunityIssuance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentScale\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"P\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"G\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"scale\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"epoch\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositSums\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"enableCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"epochToScaleToG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochToScaleToSums\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"getCompoundedDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"getDepositorCollateralGain\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"collateralGains\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalZebraUSDDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"indexByCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastCollateralError_Offset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDebtLossError_Offset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEsZebraError\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtToOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collToAdd\",\"type\":\"uint256\"}],\"name\":\"offset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"provideToSP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queue\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"firstSunsetIndexKey\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"nextSunsetIndexKey\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"startCollateralSunset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromSP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zebraUSD\",\"outputs\":[{\"internalType\":\"contract IZebraUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"startCollateralSunset(address)\":{\"details\":\"IMPORTANT: When sunsetting a collateral, `TroveManager.startSunset` should be called on all TM linked to that collateral\",\"params\":{\"collateral\":\"Collateral to sunset\"}}},\"title\":\"Zebra Stability Pool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"startCollateralSunset(address)\":{\"notice\":\"Starts sunsetting a collateral         During sunsetting liquidated collateral handoff to the SP will revert\"}},\"notice\":\"Based on Liquity's `StabilityPool` https://github.com/liquity/dev/blob/main/packages/contracts/contracts/StabilityPool.sol Zebra's implementation is modified to support multiple collaterals. Deposits into the stability pool may be used to liquidate any supported collateral type.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/StabilityPool.sol\":\"StabilityPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/core/StabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../dependencies/ZebraOwnable.sol\\\";\\nimport \\\"../dependencies/SystemStart.sol\\\";\\nimport \\\"../dependencies/ZebraMath.sol\\\";\\nimport \\\"../interfaces/IZebraUSD.sol\\\";\\nimport \\\"../interfaces/ICommunityIssuance.sol\\\";\\nimport \\\"../interfaces/IStabilityPool.sol\\\";\\n\\n/**\\n    @title Zebra Stability Pool\\n    @notice Based on Liquity's `StabilityPool`\\n            https://github.com/liquity/dev/blob/main/packages/contracts/contracts/StabilityPool.sol\\n\\n            Zebra's implementation is modified to support multiple collaterals. Deposits into\\n            the stability pool may be used to liquidate any supported collateral type.\\n */\\ncontract StabilityPool is IStabilityPool, ZebraOwnable {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tuint256 public constant DECIMAL_PRECISION = 1e18;\\n\\tuint128 public constant SUNSET_DURATION = 180 days;\\n\\n\\tIZebraUSD public immutable zebraUSD;\\n\\taddress public immutable factory;\\n\\taddress public immutable liquidationManager;\\n\\tICommunityIssuance public immutable communityIssuance;\\n\\n\\tmapping(IERC20 => uint256) public indexByCollateral;\\n\\tIERC20[] public collateralTokens;\\n\\n\\t// Tracker for Debt held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n\\tuint256 internal totalZebraUSDDeposits;\\n\\tmapping(address => uint256) public lockTime;\\n\\tmapping(address => uint256) public accountDeposits; // depositor address -> initial deposit\\n\\tmapping(address => Snapshots) public depositSnapshots; // depositor address -> snapshots struct\\n\\n\\t// index values are mapped against the values within `collateralTokens`\\n\\tmapping(address => uint256[256]) public depositSums; // depositor address -> sums\\n\\n\\tmapping(address => uint256[256]) public collateralGainsByDepositor;\\n\\n\\tmapping(address => uint256) private storedPendingReward;\\n\\n\\t/*  Product 'P': Running product by which to multiply an initial deposit, in order to find the current compounded deposit,\\n\\t * after a series of liquidations have occurred, each of which cancel some debt with the deposit.\\n\\t *\\n\\t * During its lifetime, a deposit's value evolves from d_t to d_t * P / P_t , where P_t\\n\\t * is the snapshot of P taken at the instant the deposit was made. 18-digit decimal.\\n\\t */\\n\\tuint256 public P = DECIMAL_PRECISION;\\n\\n\\tuint256 public constant SCALE_FACTOR = 1e9;\\n\\n\\t// Each time the scale of P shifts by SCALE_FACTOR, the scale is incremented by 1\\n\\tuint128 public currentScale;\\n\\n\\t// With each offset that fully empties the Pool, the epoch is incremented by 1\\n\\tuint128 public currentEpoch;\\n\\n\\t/* collateral Gain sum 'S': During its lifetime, each deposit d_t earns a collateral gain of ( d_t * [S - S_t] )/P_t, where S_t\\n\\t * is the depositor's snapshot of S taken at the time t when the deposit was made.\\n\\t *\\n\\t * The 'S' sums are stored in a nested mapping (epoch => scale => sum):\\n\\t *\\n\\t * - The inner mapping records the sum S at different scales\\n\\t * - The outer mapping records the (scale => sum) mappings, for different epochs.\\n\\t */\\n\\n\\t// index values are mapped against the values within `collateralTokens`\\n\\tmapping(uint128 => mapping(uint128 => uint256[256])) public epochToScaleToSums;\\n\\n\\t/*\\n\\t * Similarly, the sum 'G' is used to calculate esZebra gains. During it's lifetime, each deposit d_t earns a esZebra gain of\\n\\t *  ( d_t * [G - G_t] )/P_t, where G_t is the depositor's snapshot of G taken at time t when  the deposit was made.\\n\\t *\\n\\t *  esZebra reward events occur are triggered by depositor operations (new deposit, topup, withdrawal), and liquidations.\\n\\t *  In each case, the esZebra reward is issued (i.e. G is updated), before other state changes are made.\\n\\t */\\n\\tmapping(uint128 => mapping(uint128 => uint256)) public epochToScaleToG;\\n\\n\\t// Error tracker for the error correction in the esZebra issuance calculation\\n\\tuint256 public lastEsZebraError;\\n\\t// Error trackers for the error correction in the offset calculation\\n\\tuint256[256] public lastCollateralError_Offset;\\n\\tuint256 public lastDebtLossError_Offset;\\n\\n\\tmapping(uint16 => SunsetIndex) public _sunsetIndexes;\\n\\n\\tQueue public queue;\\n\\n\\tstruct Snapshots {\\n\\t\\tuint256 P;\\n\\t\\tuint256 G;\\n\\t\\tuint128 scale;\\n\\t\\tuint128 epoch;\\n\\t}\\n\\n\\tstruct SunsetIndex {\\n\\t\\tuint128 idx;\\n\\t\\tuint128 expiry;\\n\\t}\\n\\tstruct Queue {\\n\\t\\tuint16 firstSunsetIndexKey;\\n\\t\\tuint16 nextSunsetIndexKey;\\n\\t}\\n\\n\\tconstructor(IZebraCore _zebraCore, IZebraUSD _zebraUSDAddress, address _factory, address _liquidationManager, address _communityIssuance) ZebraOwnable(_zebraCore) {\\n\\t\\tzebraUSD = _zebraUSDAddress;\\n\\t\\tfactory = _factory;\\n\\t\\tliquidationManager = _liquidationManager;\\n\\t\\tcommunityIssuance = ICommunityIssuance(_communityIssuance);\\n\\t}\\n\\n\\tfunction enableCollateral(IERC20 _collateral) external {\\n\\t\\trequire(msg.sender == factory, \\\"Not factory\\\");\\n\\t\\tuint256 length = collateralTokens.length;\\n\\t\\tbool collateralEnabled;\\n\\t\\tfor (uint256 i = 0; i < length; i++) {\\n\\t\\t\\tif (collateralTokens[i] == IERC20(_collateral)) {\\n\\t\\t\\t\\tcollateralEnabled = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (!collateralEnabled) {\\n\\t\\t\\tQueue memory queueCached = queue;\\n\\t\\t\\tif (queueCached.nextSunsetIndexKey > queueCached.firstSunsetIndexKey) {\\n\\t\\t\\t\\tSunsetIndex memory sIdx = _sunsetIndexes[queueCached.firstSunsetIndexKey];\\n\\t\\t\\t\\tif (sIdx.expiry < block.timestamp) {\\n\\t\\t\\t\\t\\tdelete _sunsetIndexes[queue.firstSunsetIndexKey++];\\n\\t\\t\\t\\t\\t_overwriteCollateral(_collateral, sIdx.idx);\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tcollateralTokens.push(_collateral);\\n\\t\\t\\tindexByCollateral[_collateral] = collateralTokens.length;\\n\\t\\t} else {\\n\\t\\t\\t// revert if the factory is trying to deploy a new TM with a sunset collateral\\n\\t\\t\\trequire(indexByCollateral[_collateral] > 0, \\\"Collateral is sunsetting\\\");\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _overwriteCollateral(IERC20 _newCollateral, uint256 idx) internal {\\n\\t\\trequire(indexByCollateral[_newCollateral] == 0, \\\"Collateral must be sunset\\\");\\n\\t\\tuint256 length = collateralTokens.length;\\n\\t\\trequire(idx < length, \\\"Index too large\\\");\\n\\t\\tuint256 externalLoopEnd = currentEpoch;\\n\\t\\tuint256 internalLoopEnd = currentScale;\\n\\t\\tfor (uint128 i; i <= externalLoopEnd; ) {\\n\\t\\t\\tfor (uint128 j; j <= internalLoopEnd; ) {\\n\\t\\t\\t\\tepochToScaleToSums[i][j][idx] = 0;\\n\\t\\t\\t\\tunchecked {\\n\\t\\t\\t\\t\\t++j;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\t++i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tindexByCollateral[_newCollateral] = idx + 1;\\n\\t\\temit CollateralOverwritten(address(collateralTokens[idx]), address(_newCollateral));\\n\\t\\tcollateralTokens[idx] = _newCollateral;\\n\\t}\\n\\n\\t/**\\n     * @notice Starts sunsetting a collateral\\n     *         During sunsetting liquidated collateral handoff to the SP will revert\\n        @dev IMPORTANT: When sunsetting a collateral, `TroveManager.startSunset`\\n                        should be called on all TM linked to that collateral\\n        @param collateral Collateral to sunset\\n\\n     */\\n\\tfunction startCollateralSunset(IERC20 collateral) external onlyOwner {\\n\\t\\trequire(indexByCollateral[collateral] > 0, \\\"Collateral already sunsetting\\\");\\n\\t\\t_sunsetIndexes[queue.nextSunsetIndexKey++] = SunsetIndex(uint128(indexByCollateral[collateral] - 1), uint128(block.timestamp + SUNSET_DURATION));\\n\\t\\tdelete indexByCollateral[collateral]; //This will prevent calls to the SP in case of liquidations\\n\\t}\\n\\n\\tfunction getTotalZebraUSDDeposits() external view returns (uint256) {\\n\\t\\treturn totalZebraUSDDeposits;\\n\\t}\\n\\n\\t// --- External Depositor Functions ---\\n\\n\\t/*  provideToSP():\\n\\t *\\n\\t * - Triggers a esZebra issuance, based on time passed since the last issuance. The esZebra issuance is shared between *all* depositors and front ends\\n\\t * - Tags the deposit with the provided front end tag param, if it's a new deposit\\n\\t * - Sends depositor's accumulated gains (esZebra, collateral) to depositor\\n\\t * - Sends the tagged front end's accumulated esZebra gains to the tagged front end\\n\\t * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n\\t */\\n\\tfunction provideToSP(uint256 _amount) external {\\n\\t\\trequire(!ZebraCore.paused(), \\\"Deposits are paused\\\");\\n\\t\\trequire(_amount > 0, \\\"StabilityPool: Amount must be non-zero\\\");\\n\\t\\tlockTime[msg.sender] = block.timestamp;\\n\\t\\t_triggerRewardIssuance();\\n\\n\\t\\t_accrueDepositorCollateralGain(msg.sender);\\n\\n\\t\\tuint256 compoundedDeposit = getCompoundedDeposit(msg.sender);\\n\\n\\t\\t_accrueRewards(msg.sender);\\n\\n\\t\\tzebraUSD.sendToSP(msg.sender, _amount);\\n\\t\\tuint256 newTotalZebraUSDDeposits = totalZebraUSDDeposits + _amount;\\n\\t\\ttotalZebraUSDDeposits = newTotalZebraUSDDeposits;\\n\\t\\temit StabilityPoolZebraUSDBalanceUpdated(newTotalZebraUSDDeposits);\\n\\n\\t\\tuint256 newDeposit = compoundedDeposit + _amount;\\n\\t\\taccountDeposits[msg.sender] = newDeposit;\\n\\n\\t\\t_updateSnapshots(msg.sender, newDeposit);\\n\\t\\temit UserDepositChanged(msg.sender, newDeposit);\\n\\t}\\n\\n\\t/*  withdrawFromSP():\\n\\t *\\n\\t * - Triggers a esZebra issuance, based on time passed since the last issuance. The esZebra issuance is shared between *all* depositors and front ends\\n\\t * - Removes the deposit's front end tag if it is a full withdrawal\\n\\t * - Sends all depositor's accumulated gains (esZebra, collateral) to depositor\\n\\t * - Sends the tagged front end's accumulated esZebra gains to the tagged front end\\n\\t * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n\\t *\\n\\t * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n\\t */\\n\\tfunction withdrawFromSP(uint256 _amount) external {\\n\\t\\tuint256 initialDeposit = accountDeposits[msg.sender];\\n\\t\\trequire(initialDeposit > 0, \\\"StabilityPool: User must have a non-zero deposit\\\");\\n\\t\\trequire(lockTime[msg.sender] != block.timestamp, \\\"StabilityPool: Withdrawal is locked\\\");\\n\\t\\t_triggerRewardIssuance();\\n\\n\\t\\t_accrueDepositorCollateralGain(msg.sender);\\n\\n\\t\\tuint256 compoundedDeposit = getCompoundedDeposit(msg.sender);\\n\\t\\tuint256 debtToWithdraw = ZebraMath._min(_amount, compoundedDeposit);\\n\\n\\t\\t_accrueRewards(msg.sender);\\n\\n\\t\\tif (debtToWithdraw > 0) {\\n\\t\\t\\tzebraUSD.returnFromPool(address(this), msg.sender, debtToWithdraw);\\n\\t\\t\\t_decreaseDebt(debtToWithdraw);\\n\\t\\t}\\n\\n\\t\\t// Update deposit\\n\\t\\tuint256 newDeposit = compoundedDeposit - debtToWithdraw;\\n\\t\\taccountDeposits[msg.sender] = newDeposit;\\n\\n\\t\\t_updateSnapshots(msg.sender, newDeposit);\\n\\t\\temit UserDepositChanged(msg.sender, newDeposit);\\n\\t}\\n\\n\\tfunction claim(address recipient, uint256[] memory collateralIndexes) external {\\n\\t\\tuint256 initialDeposit = accountDeposits[msg.sender];\\n\\t\\trequire(initialDeposit > 0, \\\"StabilityPool: User must have a non-zero deposit\\\");\\n\\n\\t\\t_triggerRewardIssuance();\\n\\n\\t\\t_accrueDepositorCollateralGain(msg.sender);\\n\\n\\t\\tuint256 compoundedDeposit = getCompoundedDeposit(msg.sender);\\n\\t\\t_accrueRewards(msg.sender);\\n\\n\\t\\t// Update deposit\\n\\t\\tuint256 newDeposit = compoundedDeposit;\\n\\t\\taccountDeposits[msg.sender] = newDeposit;\\n\\n\\t\\t_updateSnapshots(msg.sender, newDeposit);\\n\\t\\temit UserDepositChanged(msg.sender, newDeposit);\\n\\t\\tuint256 amount = _claimReward(msg.sender);\\n\\t\\tif (amount > 0) {\\n\\t\\t\\tcommunityIssuance.sendEsZebra(recipient, amount);\\n\\t\\t}\\n\\t\\temit RewardClaimed(msg.sender, recipient, amount);\\n\\t\\t_claimCollateralGains(recipient, collateralIndexes);\\n\\t}\\n\\n\\t// --- esZebra issuance functions ---\\n\\n\\tfunction _triggerRewardIssuance() internal {\\n\\t\\t_updateG(communityIssuance.issueEsZebra());\\n\\t}\\n\\n\\tfunction _updateG(uint256 _esZebraIssuance) internal {\\n\\t\\tuint256 totalDebt = totalZebraUSDDeposits; // cached to save an SLOAD\\n\\t\\t/*\\n\\t\\t * When total deposits is 0, G is not updated. In this case, the Zebra issued can not be obtained by later\\n\\t\\t * depositors - it is missed out on, and remains in the balanceof the Treasury contract.\\n\\t\\t *\\n\\t\\t */\\n\\t\\tif (totalDebt == 0 || _esZebraIssuance == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tuint256 esZebraPerUnitStaked = _computeEsZebraPerUnitStaked(_esZebraIssuance, totalDebt);\\n\\t\\tuint128 currentEpochCached = currentEpoch;\\n\\t\\tuint128 currentScaleCached = currentScale;\\n\\t\\tuint256 marginalZebraGain = esZebraPerUnitStaked * P;\\n\\t\\tuint256 newG = epochToScaleToG[currentEpochCached][currentScaleCached] + marginalZebraGain;\\n\\t\\tepochToScaleToG[currentEpochCached][currentScaleCached] = newG;\\n\\n\\t\\temit G_Updated(newG, currentEpochCached, currentScaleCached);\\n\\t}\\n\\n\\tfunction _computeEsZebraPerUnitStaked(uint256 _esZebraIssuance, uint256 _totalZebraUSDDeposits) internal returns (uint256) {\\n\\t\\t/*\\n\\t\\t * Calculate the esZebra-per-unit staked.  Division uses a \\\"feedback\\\" error correction, to keep the\\n\\t\\t * cumulative error low in the running total G:\\n\\t\\t *\\n\\t\\t * 1) Form a numerator which compensates for the floor division error that occurred the last time this\\n\\t\\t * function was called.\\n\\t\\t * 2) Calculate \\\"per-unit-staked\\\" ratio.\\n\\t\\t * 3) Multiply the ratio back by its denominator, to reveal the current floor division error.\\n\\t\\t * 4) Store this error for use in the next correction when this function is called.\\n\\t\\t * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\n\\t\\t */\\n\\t\\tuint256 esZebraNumerator = (_esZebraIssuance * DECIMAL_PRECISION) + lastEsZebraError;\\n\\n\\t\\tuint256 esZebraPerUnitStaked = esZebraNumerator / _totalZebraUSDDeposits;\\n\\t\\tlastEsZebraError = esZebraNumerator - (esZebraPerUnitStaked * _totalZebraUSDDeposits);\\n\\n\\t\\treturn esZebraPerUnitStaked;\\n\\t}\\n\\n\\t// --- Liquidation functions ---\\n\\n\\t/*\\n\\t * Cancels out the specified debt against the Debt contained in the Stability Pool (as far as possible)\\n\\t */\\n\\tfunction offset(IERC20 collateral, uint256 _debtToOffset, uint256 _collToAdd) external virtual {\\n\\t\\t_offset(collateral, _debtToOffset, _collToAdd);\\n\\t}\\n\\n\\tfunction _offset(IERC20 collateral, uint256 _debtToOffset, uint256 _collToAdd) internal {\\n\\t\\trequire(msg.sender == liquidationManager, \\\"StabilityPool: Caller is not Liquidation Manager\\\");\\n\\t\\tuint256 idx = indexByCollateral[collateral];\\n\\t\\tidx -= 1;\\n\\n\\t\\tuint256 totalDebt = totalZebraUSDDeposits; // cached to save an SLOAD\\n\\t\\tif (totalDebt == 0 || _debtToOffset == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t_triggerRewardIssuance();\\n\\n\\t\\t(uint256 collateralGainPerUnitStaked, uint256 debtLossPerUnitStaked) = _computeRewardsPerUnitStaked(_collToAdd, _debtToOffset, totalDebt, idx);\\n\\n\\t\\t_updateRewardSumAndProduct(collateralGainPerUnitStaked, debtLossPerUnitStaked, idx); // updates S and P\\n\\n\\t\\t// Cancel the liquidated Debt debt with the Debt in the stability pool\\n\\t\\t_decreaseDebt(_debtToOffset);\\n\\t}\\n\\n\\t// --- Offset helper functions ---\\n\\n\\tfunction _computeRewardsPerUnitStaked(uint256 _collToAdd, uint256 _debtToOffset, uint256 _totalZebraUSDDeposits, uint256 idx) internal returns (uint256 collateralGainPerUnitStaked, uint256 debtLossPerUnitStaked) {\\n\\t\\t/*\\n\\t\\t * Compute the Debt and collateral rewards. Uses a \\\"feedback\\\" error correction, to keep\\n\\t\\t * the cumulative error in the P and S state variables low:\\n\\t\\t *\\n\\t\\t * 1) Form numerators which compensate for the floor division errors that occurred the last time this\\n\\t\\t * function was called.\\n\\t\\t * 2) Calculate \\\"per-unit-staked\\\" ratios.\\n\\t\\t * 3) Multiply each ratio back by its denominator, to reveal the current floor division error.\\n\\t\\t * 4) Store these errors for use in the next correction when this function is called.\\n\\t\\t * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\n\\t\\t */\\n\\t\\tuint256 collateralNumerator = (_collToAdd * DECIMAL_PRECISION) + lastCollateralError_Offset[idx];\\n\\n\\t\\tif (_debtToOffset == _totalZebraUSDDeposits) {\\n\\t\\t\\tdebtLossPerUnitStaked = DECIMAL_PRECISION; // When the Pool depletes to 0, so does each deposit\\n\\t\\t\\tlastDebtLossError_Offset = 0;\\n\\t\\t} else {\\n\\t\\t\\tuint256 debtLossNumerator = (_debtToOffset * DECIMAL_PRECISION) - lastDebtLossError_Offset;\\n\\t\\t\\t/*\\n\\t\\t\\t * Add 1 to make error in quotient positive. We want \\\"slightly too much\\\" Debt loss,\\n\\t\\t\\t * which ensures the error in any given CompoundedDeposit favors the Stability Pool.\\n\\t\\t\\t */\\n\\t\\t\\tdebtLossPerUnitStaked = (debtLossNumerator / _totalZebraUSDDeposits) + 1;\\n\\t\\t\\tlastDebtLossError_Offset = (debtLossPerUnitStaked * _totalZebraUSDDeposits) - debtLossNumerator;\\n\\t\\t}\\n\\n\\t\\tcollateralGainPerUnitStaked = collateralNumerator / _totalZebraUSDDeposits;\\n\\t\\tlastCollateralError_Offset[idx] = collateralNumerator - (collateralGainPerUnitStaked * _totalZebraUSDDeposits);\\n\\n\\t\\treturn (collateralGainPerUnitStaked, debtLossPerUnitStaked);\\n\\t}\\n\\n\\t// Update the Stability Pool reward sum S and product P\\n\\tfunction _updateRewardSumAndProduct(uint256 _collateralGainPerUnitStaked, uint256 _debtLossPerUnitStaked, uint256 idx) internal {\\n\\t\\tuint256 currentP = P;\\n\\t\\tuint256 newP;\\n\\n\\t\\t/*\\n\\t\\t * The newProductFactor is the factor by which to change all deposits, due to the depletion of Stability Pool Debt in the liquidation.\\n\\t\\t * We make the product factor 0 if there was a pool-emptying. Otherwise, it is (1 - DebtLossPerUnitStaked)\\n\\t\\t */\\n\\t\\tuint256 newProductFactor = uint256(DECIMAL_PRECISION) - _debtLossPerUnitStaked;\\n\\n\\t\\tuint128 currentScaleCached = currentScale;\\n\\t\\tuint128 currentEpochCached = currentEpoch;\\n\\t\\tuint256 currentS = epochToScaleToSums[currentEpochCached][currentScaleCached][idx];\\n\\n\\t\\t/*\\n\\t\\t * Calculate the new S first, before we update P.\\n\\t\\t * The collateral gain for any given depositor from a liquidation depends on the value of their deposit\\n\\t\\t * (and the value of totalDeposits) prior to the Stability being depleted by the debt in the liquidation.\\n\\t\\t *\\n\\t\\t * Since S corresponds to collateral gain, and P to deposit loss, we update S first.\\n\\t\\t */\\n\\t\\tuint256 marginalCollateralGain = _collateralGainPerUnitStaked * currentP;\\n\\t\\tuint256 newS = currentS + marginalCollateralGain;\\n\\t\\tepochToScaleToSums[currentEpochCached][currentScaleCached][idx] = newS;\\n\\t\\temit S_Updated(idx, newS, currentEpochCached, currentScaleCached);\\n\\n\\t\\t// If the Stability Pool was emptied, increment the epoch, and reset the scale and product P\\n\\t\\tif (newProductFactor == 0) {\\n\\t\\t\\tcurrentEpoch = currentEpochCached + 1;\\n\\t\\t\\temit EpochUpdated(currentEpoch);\\n\\t\\t\\tcurrentScale = 0;\\n\\t\\t\\temit ScaleUpdated(currentScale);\\n\\t\\t\\tnewP = DECIMAL_PRECISION;\\n\\n\\t\\t\\t// If multiplying P by a non-zero product factor would reduce P below the scale boundary, increment the scale\\n\\t\\t} else if ((currentP * newProductFactor) / DECIMAL_PRECISION < SCALE_FACTOR) {\\n\\t\\t\\tnewP = (currentP * newProductFactor * SCALE_FACTOR) / DECIMAL_PRECISION;\\n\\t\\t\\tcurrentScale = currentScaleCached + 1;\\n\\t\\t\\temit ScaleUpdated(currentScale);\\n\\t\\t} else {\\n\\t\\t\\tnewP = (currentP * newProductFactor) / DECIMAL_PRECISION;\\n\\t\\t}\\n\\n\\t\\trequire(newP > 0, \\\"NewP\\\");\\n\\t\\tP = newP;\\n\\t\\temit P_Updated(newP);\\n\\t}\\n\\n\\tfunction _decreaseDebt(uint256 _amount) internal {\\n\\t\\tuint256 newTotalZebraUSDDeposits = totalZebraUSDDeposits - _amount;\\n\\t\\ttotalZebraUSDDeposits = newTotalZebraUSDDeposits;\\n\\t\\temit StabilityPoolZebraUSDBalanceUpdated(newTotalZebraUSDDeposits);\\n\\t}\\n\\n\\t// --- Reward calculator functions for depositor and front end ---\\n\\n\\t/* Calculates the collateral gain earned by the deposit since its last snapshots were taken.\\n\\t * Given by the formula:  E = d0 * (S - S(0))/P(0)\\n\\t * where S(0) and P(0) are the depositor's snapshots of the sum S and product P, respectively.\\n\\t * d0 is the last recorded deposit value.\\n\\t */\\n\\tfunction getDepositorCollateralGain(address _depositor) external view returns (uint256[] memory collateralGains) {\\n\\t\\tcollateralGains = new uint256[](collateralTokens.length);\\n\\n\\t\\tuint256 P_Snapshot = depositSnapshots[_depositor].P;\\n\\t\\tif (P_Snapshot == 0) return collateralGains;\\n\\t\\tuint256[256] memory depositorGains = collateralGainsByDepositor[_depositor];\\n\\t\\tuint256 initialDeposit = accountDeposits[_depositor];\\n\\t\\tuint128 epochSnapshot = depositSnapshots[_depositor].epoch;\\n\\t\\tuint128 scaleSnapshot = depositSnapshots[_depositor].scale;\\n\\t\\tuint256[256] memory sums = epochToScaleToSums[epochSnapshot][scaleSnapshot];\\n\\t\\tuint256[256] memory nextSums = epochToScaleToSums[epochSnapshot][scaleSnapshot + 1];\\n\\t\\tuint256[256] memory depSums = depositSums[_depositor];\\n\\n\\t\\tfor (uint256 i = 0; i < collateralGains.length; i++) {\\n\\t\\t\\tcollateralGains[i] = depositorGains[i];\\n\\t\\t\\tif (sums[i] == 0) continue; // Collateral was overwritten or not gains\\n\\t\\t\\tuint256 firstPortion = sums[i] - depSums[i];\\n\\t\\t\\tuint256 secondPortion = nextSums[i] / SCALE_FACTOR;\\n\\t\\t\\tcollateralGains[i] += (initialDeposit * (firstPortion + secondPortion)) / P_Snapshot / DECIMAL_PRECISION;\\n\\t\\t}\\n\\t\\treturn collateralGains;\\n\\t}\\n\\n\\tfunction _accrueDepositorCollateralGain(address _depositor) private returns (bool hasGains) {\\n\\t\\tuint256[256] storage depositorGains = collateralGainsByDepositor[_depositor];\\n\\t\\tuint256 collaterals = collateralTokens.length;\\n\\t\\tuint256 initialDeposit = accountDeposits[_depositor];\\n\\t\\thasGains = false;\\n\\t\\tif (initialDeposit == 0) {\\n\\t\\t\\treturn hasGains;\\n\\t\\t}\\n\\n\\t\\tuint128 epochSnapshot = depositSnapshots[_depositor].epoch;\\n\\t\\tuint128 scaleSnapshot = depositSnapshots[_depositor].scale;\\n\\t\\tuint256 P_Snapshot = depositSnapshots[_depositor].P;\\n\\n\\t\\tuint256[256] storage sums = epochToScaleToSums[epochSnapshot][scaleSnapshot];\\n\\t\\tuint256[256] storage nextSums = epochToScaleToSums[epochSnapshot][scaleSnapshot + 1];\\n\\t\\tuint256[256] storage depSums = depositSums[_depositor];\\n\\n\\t\\tfor (uint256 i = 0; i < collaterals; i++) {\\n\\t\\t\\tif (sums[i] == 0) continue; // Collateral was overwritten or not gains\\n\\t\\t\\thasGains = true;\\n\\t\\t\\tuint256 firstPortion = sums[i] - depSums[i];\\n\\t\\t\\tuint256 secondPortion = nextSums[i] / SCALE_FACTOR;\\n\\t\\t\\tdepositorGains[i] += (initialDeposit * (firstPortion + secondPortion)) / P_Snapshot / DECIMAL_PRECISION;\\n\\t\\t}\\n\\t\\treturn (hasGains);\\n\\t}\\n\\n\\t/*\\n\\t * Calculate the esZebra gain earned by a deposit since its last snapshots were taken.\\n\\t * Given by the formula:  esZebra = d0 * (G - G(0))/P(0)\\n\\t * where G(0) and P(0) are the depositor's snapshots of the sum G and product P, respectively.\\n\\t * d0 is the last recorded deposit value.\\n\\t */\\n\\tfunction claimableReward(address _depositor) external view returns (uint256) {\\n\\t\\tuint256 totalDebt = totalZebraUSDDeposits;\\n\\t\\tuint256 initialDeposit = accountDeposits[_depositor];\\n\\n\\t\\tif (totalDebt == 0 || initialDeposit == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\tuint256 esZebraNumerator = (communityIssuance.pendingReward() * DECIMAL_PRECISION) + lastEsZebraError;\\n\\t\\tuint256 esZebraPerUnitStaked = esZebraNumerator / totalDebt;\\n\\t\\tuint256 marginalEsZebraGain = esZebraPerUnitStaked * P;\\n\\n\\t\\tSnapshots memory snapshots = depositSnapshots[_depositor];\\n\\t\\tuint128 epochSnapshot = snapshots.epoch;\\n\\t\\tuint128 scaleSnapshot = snapshots.scale;\\n\\t\\tuint256 firstPortion;\\n\\t\\tuint256 secondPortion;\\n\\t\\tif (scaleSnapshot == currentScale) {\\n\\t\\t\\tfirstPortion = epochToScaleToG[epochSnapshot][scaleSnapshot] - snapshots.G + marginalEsZebraGain;\\n\\t\\t\\tsecondPortion = epochToScaleToG[epochSnapshot][scaleSnapshot + 1] / SCALE_FACTOR;\\n\\t\\t} else {\\n\\t\\t\\tfirstPortion = epochToScaleToG[epochSnapshot][scaleSnapshot] - snapshots.G;\\n\\t\\t\\tsecondPortion = (epochToScaleToG[epochSnapshot][scaleSnapshot + 1] + marginalEsZebraGain) / SCALE_FACTOR;\\n\\t\\t}\\n\\n\\t\\treturn (initialDeposit * (firstPortion + secondPortion)) / snapshots.P / DECIMAL_PRECISION;\\n\\t}\\n\\n\\tfunction _claimableReward(address _depositor) private view returns (uint256) {\\n\\t\\tuint256 initialDeposit = accountDeposits[_depositor];\\n\\t\\tif (initialDeposit == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tSnapshots memory snapshots = depositSnapshots[_depositor];\\n\\n\\t\\treturn _getEsZebraGainFromSnapshots(initialDeposit, snapshots);\\n\\t}\\n\\n\\tfunction _getEsZebraGainFromSnapshots(uint256 initialStake, Snapshots memory snapshots) internal view returns (uint256) {\\n\\t\\t/*\\n\\t\\t * Grab the sum 'G' from the epoch at which the stake was made. The esZebra gain may span up to one scale change.\\n\\t\\t * If it does, the second portion of the esZebra gain is scaled by 1e9.\\n\\t\\t * If the gain spans no scale change, the second portion will be 0.\\n\\t\\t */\\n\\t\\tuint128 epochSnapshot = snapshots.epoch;\\n\\t\\tuint128 scaleSnapshot = snapshots.scale;\\n\\t\\tuint256 G_Snapshot = snapshots.G;\\n\\t\\tuint256 P_Snapshot = snapshots.P;\\n\\n\\t\\tuint256 firstPortion = epochToScaleToG[epochSnapshot][scaleSnapshot] - G_Snapshot;\\n\\t\\tuint256 secondPortion = epochToScaleToG[epochSnapshot][scaleSnapshot + 1] / SCALE_FACTOR;\\n\\n\\t\\tuint256 esZebraGain = (initialStake * (firstPortion + secondPortion)) / P_Snapshot / DECIMAL_PRECISION;\\n\\n\\t\\treturn esZebraGain;\\n\\t}\\n\\n\\t// --- Compounded deposit and compounded front end stake ---\\n\\n\\t/*\\n\\t * Return the user's compounded deposit. Given by the formula:  d = d0 * P/P(0)\\n\\t * where P(0) is the depositor's snapshot of the product P, taken when they last updated their deposit.\\n\\t */\\n\\tfunction getCompoundedDeposit(address _depositor) public view returns (uint256) {\\n\\t\\tuint256 initialDeposit = accountDeposits[_depositor];\\n\\t\\tif (initialDeposit == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tSnapshots memory snapshots = depositSnapshots[_depositor];\\n\\n\\t\\tuint256 compoundedDeposit = _getCompoundedStakeFromSnapshots(initialDeposit, snapshots);\\n\\t\\treturn compoundedDeposit;\\n\\t}\\n\\n\\t// Internal function, used to calculcate compounded deposits and compounded front end stakes.\\n\\tfunction _getCompoundedStakeFromSnapshots(uint256 initialStake, Snapshots memory snapshots) internal view returns (uint256) {\\n\\t\\tuint256 snapshot_P = snapshots.P;\\n\\t\\tuint128 scaleSnapshot = snapshots.scale;\\n\\t\\tuint128 epochSnapshot = snapshots.epoch;\\n\\n\\t\\t// If stake was made before a pool-emptying event, then it has been fully cancelled with debt -- so, return 0\\n\\t\\tif (epochSnapshot < currentEpoch) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 compoundedStake;\\n\\t\\tuint128 scaleDiff = currentScale - scaleSnapshot;\\n\\n\\t\\t/* Compute the compounded stake. If a scale change in P was made during the stake's lifetime,\\n\\t\\t * account for it. If more than one scale change was made, then the stake has decreased by a factor of\\n\\t\\t * at least 1e-9 -- so return 0.\\n\\t\\t */\\n\\t\\tif (scaleDiff == 0) {\\n\\t\\t\\tcompoundedStake = (initialStake * P) / snapshot_P;\\n\\t\\t} else if (scaleDiff == 1) {\\n\\t\\t\\tcompoundedStake = (initialStake * P) / snapshot_P / SCALE_FACTOR;\\n\\t\\t} else {\\n\\t\\t\\t// if scaleDiff >= 2\\n\\t\\t\\tcompoundedStake = 0;\\n\\t\\t}\\n\\n\\t\\t/*\\n\\t\\t * If compounded deposit is less than a billionth of the initial deposit, return 0.\\n\\t\\t *\\n\\t\\t * NOTE: originally, this line was in place to stop rounding errors making the deposit too large. However, the error\\n\\t\\t * corrections should ensure the error in P \\\"favors the Pool\\\", i.e. any given compounded deposit should slightly less\\n\\t\\t * than it's theoretical value.\\n\\t\\t *\\n\\t\\t * Thus it's unclear whether this line is still really needed.\\n\\t\\t */\\n\\t\\tif (compoundedStake < initialStake / 1e9) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\treturn compoundedStake;\\n\\t}\\n\\n\\tfunction _claimCollateralGains(address recipient, uint256[] memory collateralIndexes) internal {\\n\\t\\tuint256 loopEnd = collateralIndexes.length;\\n\\t\\tuint256[] memory collateralGains = new uint256[](collateralTokens.length);\\n\\n\\t\\tuint256[256] storage depositorGains = collateralGainsByDepositor[msg.sender];\\n\\t\\tfor (uint256 i; i < loopEnd; ) {\\n\\t\\t\\tuint256 collateralIndex = collateralIndexes[i];\\n\\t\\t\\tuint256 gains = depositorGains[collateralIndex];\\n\\t\\t\\tif (gains > 0) {\\n\\t\\t\\t\\tcollateralGains[collateralIndex] = gains;\\n\\t\\t\\t\\tdepositorGains[collateralIndex] = 0;\\n\\t\\t\\t\\tcollateralTokens[collateralIndex].safeTransfer(recipient, gains);\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\t++i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\temit CollateralGainWithdrawn(msg.sender, collateralGains);\\n\\t}\\n\\n\\t// --- Stability Pool Deposit Functionality ---\\n\\n\\tfunction _updateSnapshots(address _depositor, uint256 _newValue) internal {\\n\\t\\tuint256 length;\\n\\t\\tif (_newValue == 0) {\\n\\t\\t\\tdelete depositSnapshots[_depositor];\\n\\n\\t\\t\\tlength = collateralTokens.length;\\n\\t\\t\\tfor (uint256 i = 0; i < length; i++) {\\n\\t\\t\\t\\tdepositSums[_depositor][i] = 0;\\n\\t\\t\\t}\\n\\t\\t\\temit DepositSnapshotUpdated(_depositor, 0, 0);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tuint128 currentScaleCached = currentScale;\\n\\t\\tuint128 currentEpochCached = currentEpoch;\\n\\t\\tuint256 currentP = P;\\n\\n\\t\\t// Get S and G for the current epoch and current scale\\n\\t\\tuint256[256] storage currentS = epochToScaleToSums[currentEpochCached][currentScaleCached];\\n\\t\\tuint256 currentG = epochToScaleToG[currentEpochCached][currentScaleCached];\\n\\n\\t\\t// Record new snapshots of the latest running product P, sum S, and sum G, for the depositor\\n\\t\\tdepositSnapshots[_depositor].P = currentP;\\n\\t\\tdepositSnapshots[_depositor].G = currentG;\\n\\t\\tdepositSnapshots[_depositor].scale = currentScaleCached;\\n\\t\\tdepositSnapshots[_depositor].epoch = currentEpochCached;\\n\\n\\t\\tlength = collateralTokens.length;\\n\\t\\tfor (uint256 i = 0; i < length; i++) {\\n\\t\\t\\tdepositSums[_depositor][i] = currentS[i];\\n\\t\\t}\\n\\n\\t\\temit DepositSnapshotUpdated(_depositor, currentP, currentG);\\n\\t}\\n\\n\\t//This assumes the snapshot gets updated in the caller\\n\\tfunction _accrueRewards(address _depositor) internal {\\n\\t\\tuint256 amount = _claimableReward(_depositor);\\n\\t\\tstoredPendingReward[_depositor] = storedPendingReward[_depositor] + amount;\\n\\t}\\n\\n\\tfunction _claimReward(address account) internal returns (uint256 amount) {\\n\\t\\tuint256 initialDeposit = accountDeposits[account];\\n\\n\\t\\tif (initialDeposit > 0) {\\n\\t\\t\\t_triggerRewardIssuance();\\n\\t\\t\\tbool hasGains = _accrueDepositorCollateralGain(account);\\n\\n\\t\\t\\tuint256 compoundedDeposit = getCompoundedDeposit(account);\\n\\t\\t\\tuint256 debtLoss = initialDeposit - compoundedDeposit;\\n\\n\\t\\t\\tamount = _claimableReward(account);\\n\\t\\t\\t// we update only if the snapshot has changed\\n\\t\\t\\tif (debtLoss > 0 || hasGains || amount > 0) {\\n\\t\\t\\t\\t// Update deposit\\n\\t\\t\\t\\tuint256 newDeposit = compoundedDeposit;\\n\\t\\t\\t\\taccountDeposits[account] = newDeposit;\\n\\t\\t\\t\\t_updateSnapshots(account, newDeposit);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tuint256 pending = storedPendingReward[account];\\n\\t\\tif (pending > 0) {\\n\\t\\t\\tamount += pending;\\n\\t\\t\\tstoredPendingReward[account] = 0;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x9f40d3a9a07df138d8a5f24d8db285c3706491516403431fe117ce7c1772c729\",\"license\":\"MIT\"},\"contracts/dependencies/SystemStart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../interfaces/IZebraCore.sol\\\";\\n\\n/**\\n    @title Zebra System Start Time\\n    @dev Provides a unified `startTime` and `getWeek`, used for emissions.\\n */\\ncontract SystemStart {\\n\\tuint256 public immutable startTime;\\n\\n\\tconstructor(IZebraCore ZebraCore) {\\n\\t\\tstartTime = ZebraCore.startTime();\\n\\t}\\n}\\n\",\"keccak256\":\"0x99fb1caee18756b33d02d4804ef48285b9b352a4445860c421ec7ef81e5ae1c3\",\"license\":\"MIT\"},\"contracts/dependencies/ZebraMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nlibrary ZebraMath {\\n\\tuint256 internal constant DECIMAL_PRECISION = 1e18;\\n\\n\\t/* Precision for Nominal ICR (independent of price). Rationale for the value:\\n\\t *\\n\\t * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n\\t * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n\\t *\\n\\t * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39,\\n\\t * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n\\t *\\n\\t */\\n\\tuint256 internal constant NICR_PRECISION = 1e20;\\n\\n\\tfunction _min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\t\\treturn (_a < _b) ? _a : _b;\\n\\t}\\n\\n\\tfunction _max(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\t\\treturn (_a >= _b) ? _a : _b;\\n\\t}\\n\\n\\t/*\\n\\t * Multiply two decimal numbers and use normal rounding rules:\\n\\t * -round product up if 19'th mantissa digit >= 5\\n\\t * -round product down if 19'th mantissa digit < 5\\n\\t *\\n\\t * Used only inside the exponentiation, _decPow().\\n\\t */\\n\\tfunction decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\n\\t\\tuint256 prod_xy = x * y;\\n\\n\\t\\tdecProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\n\\t}\\n\\n\\t/*\\n\\t * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n\\t *\\n\\t * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n\\t *\\n\\t * TroveManager._calcDecayedBaseRate\\n\\t *\\n\\t * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n\\t * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n\\t *\\n\\t * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n\\t * negligibly different from just passing the cap, since:\\n\\t *\\n\\t * the decayed base rate will be 0 for 1000 years or > 1000 years\\n\\t */\\n\\tfunction _decPow(uint256 _base, uint256 _minutes) internal pure returns (uint256) {\\n\\t\\tif (_minutes > 525600000) {\\n\\t\\t\\t_minutes = 525600000;\\n\\t\\t} // cap to avoid overflow\\n\\n\\t\\tif (_minutes == 0) {\\n\\t\\t\\treturn DECIMAL_PRECISION;\\n\\t\\t}\\n\\n\\t\\tuint256 y = DECIMAL_PRECISION;\\n\\t\\tuint256 x = _base;\\n\\t\\tuint256 n = _minutes;\\n\\n\\t\\t// Exponentiation-by-squaring\\n\\t\\twhile (n > 1) {\\n\\t\\t\\tif (n % 2 == 0) {\\n\\t\\t\\t\\tx = decMul(x, x);\\n\\t\\t\\t\\tn = n / 2;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// if (n % 2 != 0)\\n\\t\\t\\t\\ty = decMul(x, y);\\n\\t\\t\\t\\tx = decMul(x, x);\\n\\t\\t\\t\\tn = (n - 1) / 2;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn decMul(x, y);\\n\\t}\\n\\n\\tfunction _getAbsoluteDifference(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\t\\treturn (_a >= _b) ? _a - _b : _b - _a;\\n\\t}\\n\\n\\tfunction _computeNominalCR(uint256 _coll, uint256 _debt) internal pure returns (uint256) {\\n\\t\\tif (_debt > 0) {\\n\\t\\t\\treturn (_coll * NICR_PRECISION) / _debt;\\n\\t\\t}\\n\\t\\t// Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n\\t\\telse {\\n\\t\\t\\t// if (_debt == 0)\\n\\t\\t\\treturn 2 ** 256 - 1;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _computeCR(uint256 _coll, uint256 _debt, uint256 _price) internal pure returns (uint256) {\\n\\t\\tif (_debt > 0) {\\n\\t\\t\\tuint256 newCollRatio = (_coll * _price) / _debt;\\n\\n\\t\\t\\treturn newCollRatio;\\n\\t\\t}\\n\\t\\t// Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n\\t\\telse {\\n\\t\\t\\t// if (_debt == 0)\\n\\t\\t\\treturn type(uint256).max;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _computeCR(uint256 _coll, uint256 _debt) internal pure returns (uint256) {\\n\\t\\tif (_debt > 0) {\\n\\t\\t\\tuint256 newCollRatio = (_coll) / _debt;\\n\\n\\t\\t\\treturn newCollRatio;\\n\\t\\t}\\n\\t\\t// Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n\\t\\telse {\\n\\t\\t\\t// if (_debt == 0)\\n\\t\\t\\treturn type(uint256).max;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x9dfa30dc7364587ce53712047f506c038183f082e85c2ac9eaacea8254e8d293\",\"license\":\"MIT\"},\"contracts/dependencies/ZebraOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../interfaces/IZebraCore.sol\\\";\\n\\n/**\\n    @title Zebra Ownable\\n    @notice Contracts inheriting `ZebraOwnable` have the same owner as `ZebraCore`.\\n            The ownership cannot be independently modified or renounced.\\n */\\ncontract ZebraOwnable {\\n\\tIZebraCore public immutable ZebraCore;\\n\\n\\tconstructor(IZebraCore _ZebraCore) {\\n\\t\\tZebraCore = _ZebraCore;\\n\\t}\\n\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(msg.sender == owner(), \\\"Only owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyGuardian() {\\n\\t\\trequire(msg.sender == guardian(), \\\"Only guardian\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction owner() public view returns (address) {\\n\\t\\treturn ZebraCore.owner();\\n\\t}\\n\\n\\tfunction guardian() public view returns (address) {\\n\\t\\treturn ZebraCore.guardian();\\n\\t}\\n}\\n\",\"keccak256\":\"0xf83586dd50672e8a5f87f318ce32051c8f236991115eaff9d9e18b8dd457d54b\",\"license\":\"MIT\"},\"contracts/interfaces/ICommunityIssuance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ICommunityIssuance {\\n\\tevent EsZebraIssued(uint256 amount);\\n\\tevent EsZebraSent(address to, uint256 amount);\\n\\tevent RewardPerSecUpdated(uint256 _rewardPerSec);\\n\\n\\tfunction issueEsZebra() external returns (uint256);\\n\\n\\tfunction sendEsZebra(address to, uint256 amount) external;\\n\\n\\tfunction pendingReward() external view returns (uint256 pending);\\n}\\n\",\"keccak256\":\"0x5167f117eee308f895834d84f5a973001f32a9724afd5abbb11af0a58375b472\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStabilityPool {\\n\\tevent CollateralGainWithdrawn(address indexed _depositor, uint256[] _collateral);\\n\\tevent CollateralOverwritten(address oldCollateral, address newCollateral);\\n\\tevent DepositSnapshotUpdated(address indexed _depositor, uint256 _P, uint256 _G);\\n\\tevent EpochUpdated(uint128 _currentEpoch);\\n\\tevent G_Updated(uint256 _G, uint128 _epoch, uint128 _scale);\\n\\tevent P_Updated(uint256 _P);\\n\\tevent RewardClaimed(address indexed account, address indexed recipient, uint256 claimed);\\n\\tevent S_Updated(uint256 idx, uint256 _S, uint128 _epoch, uint128 _scale);\\n\\tevent ScaleUpdated(uint128 _currentScale);\\n\\tevent StabilityPoolZebraUSDBalanceUpdated(uint256 _newBalance);\\n\\tevent UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\n\\n\\t// function claimCollateralGains(address recipient, uint256[] calldata collateralIndexes) external;\\n\\n\\t// function claimReward(address recipient) external returns (uint256 amount);\\n\\n\\tfunction enableCollateral(IERC20 _collateral) external;\\n\\n\\tfunction offset(IERC20 collateral, uint256 _debtToOffset, uint256 _collToAdd) external;\\n\\n\\tfunction provideToSP(uint256 _amount) external;\\n\\n\\tfunction startCollateralSunset(IERC20 collateral) external;\\n\\n\\tfunction withdrawFromSP(uint256 _amount) external;\\n\\n\\tfunction DECIMAL_PRECISION() external view returns (uint256);\\n\\n\\tfunction P() external view returns (uint256);\\n\\n\\tfunction SCALE_FACTOR() external view returns (uint256);\\n\\n\\tfunction SUNSET_DURATION() external view returns (uint128);\\n\\n\\tfunction claimableReward(address _depositor) external view returns (uint256);\\n\\n\\tfunction currentEpoch() external view returns (uint128);\\n\\n\\tfunction currentScale() external view returns (uint128);\\n\\n\\tfunction depositSnapshots(address) external view returns (uint256 P, uint256 G, uint128 scale, uint128 epoch);\\n\\n\\tfunction depositSums(address, uint256) external view returns (uint256);\\n\\n\\tfunction epochToScaleToG(uint128, uint128) external view returns (uint256);\\n\\n\\tfunction epochToScaleToSums(uint128, uint128, uint256) external view returns (uint256);\\n\\n\\tfunction factory() external view returns (address);\\n\\n\\tfunction getCompoundedDeposit(address _depositor) external view returns (uint256);\\n\\n\\tfunction getDepositorCollateralGain(address _depositor) external view returns (uint256[] memory collateralGains);\\n\\n\\tfunction getTotalZebraUSDDeposits() external view returns (uint256);\\n\\n\\tfunction lastDebtLossError_Offset() external view returns (uint256);\\n\\n\\tfunction lastEsZebraError() external view returns (uint256);\\n\\n\\tfunction liquidationManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0x17fda917649a6ed78f225348291ef65f35cba6631544e30a75e9e8a7aaf72861\",\"license\":\"MIT\"},\"contracts/interfaces/IZebraCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IZebraCore {\\n\\tevent FeeReceiverSet(address feeReceiver);\\n\\tevent GuardianSet(address guardian);\\n\\tevent NewOwnerAccepted(address oldOwner, address owner);\\n\\tevent NewOwnerCommitted(address owner, address pendingOwner, uint256 deadline);\\n\\tevent NewOwnerRevoked(address owner, address revokedOwner);\\n\\tevent Paused();\\n\\tevent PriceFeedSet(address priceFeed);\\n\\tevent Unpaused();\\n\\n\\tfunction acceptTransferOwnership() external;\\n\\n\\tfunction commitTransferOwnership(address newOwner) external;\\n\\n\\tfunction revokeTransferOwnership() external;\\n\\n\\tfunction setFeeReceiver(address _feeReceiver) external;\\n\\n\\tfunction setGuardian(address _guardian) external;\\n\\n\\tfunction setPaused(bool _paused) external;\\n\\n\\tfunction setPriceFeed(address _priceFeed) external;\\n\\n\\tfunction OWNERSHIP_TRANSFER_DELAY() external view returns (uint256);\\n\\n\\tfunction feeReceiver() external view returns (address);\\n\\n\\tfunction guardian() external view returns (address);\\n\\n\\tfunction owner() external view returns (address);\\n\\n\\tfunction ownershipTransferDeadline() external view returns (uint256);\\n\\n\\tfunction paused() external view returns (bool);\\n\\n\\tfunction pendingOwner() external view returns (address);\\n\\n\\tfunction startTime() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1fc4f5dd11e33a377d954cb7c45d16193f93bc3f47bb4dc1703e6794bc2053c9\",\"license\":\"MIT\"},\"contracts/interfaces/IZebraUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IZebraUSD {\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\tevent MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\tevent ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint256 _amount);\\n\\tevent RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\tevent SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint256 _amount);\\n\\tevent SetMinDstGas(uint16 _dstChainId, uint16 _type, uint256 _minDstGas);\\n\\tevent SetPrecrime(address precrime);\\n\\tevent SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n\\tevent SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n\\tevent SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\tfunction burn(address _account, uint256 _amount) external;\\n\\n\\tfunction burnWithGasCompensation(address _account, uint256 _amount) external returns (bool);\\n\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n\\tfunction enableTroveManager(address _troveManager) external;\\n\\n\\tfunction flashLoan(address receiver, address token, uint256 amount, bytes calldata data) external returns (bool);\\n\\n\\tfunction forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n\\tfunction lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n\\n\\tfunction mint(address _account, uint256 _amount) external;\\n\\n\\tfunction mintWithGasCompensation(address _account, uint256 _amount) external returns (bool);\\n\\n\\tfunction nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n\\n\\tfunction permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n\\tfunction renounceOwnership() external;\\n\\n\\tfunction returnFromPool(address _poolAddress, address _receiver, uint256 _amount) external;\\n\\n\\tfunction sendToSP(address _sender, uint256 _amount) external;\\n\\n\\tfunction setConfig(uint16 _version, uint16 _chainId, uint256 _configType, bytes calldata _config) external;\\n\\n\\tfunction setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint256 _minGas) external;\\n\\n\\tfunction setPayloadSizeLimit(uint16 _dstChainId, uint256 _size) external;\\n\\n\\tfunction setPrecrime(address _precrime) external;\\n\\n\\tfunction setReceiveVersion(uint16 _version) external;\\n\\n\\tfunction setSendVersion(uint16 _version) external;\\n\\n\\tfunction setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external;\\n\\n\\tfunction setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external;\\n\\n\\tfunction setUseCustomAdapterParams(bool _useCustomAdapterParams) external;\\n\\n\\tfunction transfer(address recipient, uint256 amount) external returns (bool);\\n\\n\\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n\\tfunction transferOwnership(address newOwner) external;\\n\\n\\tfunction retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external payable;\\n\\n\\tfunction sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint256 _amount, address _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n\\tfunction DEBT_GAS_COMPENSATION() external view returns (uint256);\\n\\n\\tfunction DEFAULT_PAYLOAD_SIZE_LIMIT() external view returns (uint256);\\n\\n\\tfunction FLASH_LOAN_FEE() external view returns (uint256);\\n\\n\\tfunction NO_EXTRA_GAS() external view returns (uint256);\\n\\n\\tfunction PT_SEND() external view returns (uint16);\\n\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\tfunction borrowerOperationsAddress() external view returns (address);\\n\\n\\tfunction circulatingSupply() external view returns (uint256);\\n\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction domainSeparator() external view returns (bytes32);\\n\\n\\tfunction estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint256 _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint256 nativeFee, uint256 zroFee);\\n\\n\\tfunction factory() external view returns (address);\\n\\n\\tfunction failedMessages(uint16, bytes calldata, uint64) external view returns (bytes32);\\n\\n\\tfunction flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n\\tfunction gasPool() external view returns (address);\\n\\n\\tfunction getConfig(uint16 _version, uint16 _chainId, address, uint256 _configType) external view returns (bytes memory);\\n\\n\\tfunction getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory);\\n\\n\\tfunction isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n\\tfunction lzEndpoint() external view returns (address);\\n\\n\\tfunction maxFlashLoan(address token) external view returns (uint256);\\n\\n\\tfunction minDstGasLookup(uint16, uint16) external view returns (uint256);\\n\\n\\tfunction name() external view returns (string memory);\\n\\n\\tfunction nonces(address owner) external view returns (uint256);\\n\\n\\tfunction owner() external view returns (address);\\n\\n\\tfunction payloadSizeLimitLookup(uint16) external view returns (uint256);\\n\\n\\tfunction permitTypeHash() external view returns (bytes32);\\n\\n\\tfunction precrime() external view returns (address);\\n\\n\\tfunction stabilityPoolAddress() external view returns (address);\\n\\n\\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\tfunction token() external view returns (address);\\n\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\tfunction troveManager(address) external view returns (bool);\\n\\n\\tfunction trustedRemoteLookup(uint16) external view returns (bytes memory);\\n\\n\\tfunction useCustomAdapterParams() external view returns (bool);\\n\\n\\tfunction version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd553f52c1440a82e1b9af07320513dd4f934129811aba5d68554ebcd400f5f78\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610120604052670de0b6b3a76400006009553480156200001e57600080fd5b50604051620035d7380380620035d7833981016040819052620000419162000084565b6001600160a01b0394851660805292841660a05290831660c052821660e052166101005262000104565b6001600160a01b03811681146200008157600080fd5b50565b600080600080600060a086880312156200009d57600080fd5b8551620000aa816200006b565b6020870151909550620000bd816200006b565b6040870151909450620000d0816200006b565b6060870151909350620000e3816200006b565b6080870151909250620000f6816200006b565b809150509295509295909350565b60805160a05160c05160e051610100516134486200018f600039600081816104e6015281816112c6015281816117b80152611c8d01526000818161030d01526124d401526000818161058901526106d701526000818161050d01528181610ce00152611529015260008181610347015281816110f101528181611377015261164201526134486000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c80638b8fbd9211610160578063c45a0155116100d8578063e10d29ee1161008c578063e950342511610071578063e950342514610678578063eeb58d0b1461068b578063f177b8351461069e57600080fd5b8063e10d29ee14610631578063e66667331461066557600080fd5b8063ce4b5bbe116100bd578063ce4b5bbe146105be578063db03fdaa146105c9578063dec8d975146105dc57600080fd5b8063c45a015514610584578063cd7502fe146105ab57600080fd5b8063a20baee61161012f578063a4e59ac811610114578063a4e59ac81461055e578063a6ef225414610571578063a7528a031461057a57600080fd5b8063a20baee61461052f578063a4beda631461053e57600080fd5b80638b8fbd92146104d05780638da5cb5b146104d957806395fb16bb146104e15780639b0e384e1461050857600080fd5b8063452a9320116101f357806378c77a24116101c257806382e0a574116101a757806382e0a57414610413578063835dada01461043e57806386da08241461045e57600080fd5b806378c77a24146103f657806381bafb311461040957600080fd5b8063452a93201461038957806345718278146103915780635383dfcb146103a457806376671808146103c457600080fd5b806319f27b3b1161024a5780632e54bf951161022f5780632e54bf951461032f5780632fbea01414610342578063307d36121461036957600080fd5b806319f27b3b146102f55780631ef3a04c1461030857600080fd5b806309e2acb01461027c57806311be0de5146102a25780631500d2c3146102b7578063172c48c7146102ca575b600080fd5b61028f61028a366004612fa2565b6106a6565b6040519081526020015b60405180910390f35b6102b56102b0366004612fce565b6106cc565b005b61028f6102c5366004612fa2565b61096b565b6102dd6102d8366004612ff2565b610988565b6040516001600160a01b039091168152602001610299565b6102b5610303366004612fce565b6109b2565b6102dd7f000000000000000000000000000000000000000000000000000000000000000081565b6102b561033d366004612ff2565b610b61565b6102dd7f000000000000000000000000000000000000000000000000000000000000000081565b61037c610377366004612fce565b610db5565b604051610299919061300b565b6102dd6110ed565b6102b561039f366004613065565b611176565b61028f6103b2366004612fce565b60006020819052908152604090205481565b600a546103de90600160801b90046001600160801b031681565b6040516001600160801b039091168152602001610299565b6102b5610404366004612ff2565b611375565b61028f61010e5481565b61028f610421366004613154565b600c60209081526000928352604080842090915290825290205481565b61028f61044c366004612fce565b60046020526000908152604090205481565b6104a161046c366004612fce565b6005602052600090815260409020805460018201546002909201549091906001600160801b0380821691600160801b90041684565b6040805194855260208501939093526001600160801b0391821692840192909252166060820152608001610299565b61028f60095481565b6102dd61163e565b6102dd7f000000000000000000000000000000000000000000000000000000000000000081565b6102dd7f000000000000000000000000000000000000000000000000000000000000000081565b61028f670de0b6b3a764000081565b61028f61054c366004612fce565b60036020526000908152604090205481565b600a546103de906001600160801b031681565b61028f600d5481565b6103de62ed4e0081565b6102dd7f000000000000000000000000000000000000000000000000000000000000000081565b61028f6105b9366004612fce565b61169e565b61028f633b9aca0081565b61028f6105d7366004613187565b611731565b6106116105ea3660046131c3565b61010f602052600090815260409020546001600160801b0380821691600160801b90041682565b604080516001600160801b03938416815292909116602083015201610299565b6101105461064a9061ffff808216916201000090041682565b6040805161ffff938416815292909116602083015201610299565b6102b56106733660046131e7565b611764565b61028f610686366004612fce565b61176f565b61028f610699366004612ff2565b611a5a565b60025461028f565b60066020528160005260406000208161010081106106c357600080fd5b01549150829050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107495760405162461bcd60e51b815260206004820152600b60248201527f4e6f7420666163746f727900000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6001546000805b828110156107aa57836001600160a01b0316600182815481106107755761077561321c565b6000918252602090912001546001600160a01b03160361079857600191506107aa565b806107a281613248565b915050610750565b508061090157604080518082019091526101105461ffff808216808452620100009092041660208301819052111561088a57805161ffff16600090815261010f60209081526040918290208251808401909352546001600160801b038082168452600160801b9091041690820181905242111561088857610110805461010f9160009161ffff16908261083c83613280565b82546101009290920a61ffff818102199093169183160217909155168152602081019190915260400160009081205580516108819086906001600160801b0316611a72565b5050505050565b505b506001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038616908117909155905460009182526020829052604090912055505050565b6001600160a01b0383166000908152602081905260409020546109665760405162461bcd60e51b815260206004820152601860248201527f436f6c6c61746572616c2069732073756e73657474696e6700000000000000006044820152606401610740565b505050565b60076020528160005260406000208161010081106106c357600080fd5b6001818154811061099857600080fd5b6000918252602090912001546001600160a01b0316905081565b6109ba61163e565b6001600160a01b0316336001600160a01b031614610a1a5760405162461bcd60e51b815260206004820152600a60248201527f4f6e6c79206f776e6572000000000000000000000000000000000000000000006044820152606401610740565b6001600160a01b038116600090815260208190526040902054610a7f5760405162461bcd60e51b815260206004820152601d60248201527f436f6c6c61746572616c20616c72656164792073756e73657474696e670000006044820152606401610740565b6040805180820182526001600160a01b0383166000908152602081905291909120548190610aaf906001906132a1565b6001600160801b03168152602001610aca62ed4e00426132b4565b6001600160801b03169052610110805461010f9160009162010000900461ffff16906002610af783613280565b825461ffff9182166101009390930a928302928202191691909117909155168152602080820192909252604090810160009081208451948401516001600160801b03908116600160801b029516949094179093556001600160a01b03909316825281905290812055565b3360009081526004602052604090205480610be45760405162461bcd60e51b815260206004820152603060248201527f53746162696c697479506f6f6c3a2055736572206d757374206861766520612060448201527f6e6f6e2d7a65726f206465706f736974000000000000000000000000000000006064820152608401610740565b33600090815260036020526040902054429003610c695760405162461bcd60e51b815260206004820152602360248201527f53746162696c697479506f6f6c3a205769746864726177616c206973206c6f6360448201527f6b656400000000000000000000000000000000000000000000000000000000006064820152608401610740565b610c71611c88565b610c7a33611d16565b506000610c863361169e565b90506000610c948483611eee565b9050610c9f33611f08565b8015610d4d576040517f20c582be000000000000000000000000000000000000000000000000000000008152306004820152336024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906320c582be90606401600060405180830381600087803b158015610d2c57600080fd5b505af1158015610d40573d6000803e3d6000fd5b50505050610d4d81611f5a565b6000610d5982846132a1565b336000818152600460205260409020829055909150610d789082611fa9565b60405181815233907fbce78369dccab09eec1986f4d409ab09ffbb47d65423e5148fcf98411c5111c9906020015b60405180910390a25050505050565b60015460609067ffffffffffffffff811115610dd357610dd361304f565b604051908082528060200260200182016040528015610dfc578160200160208202803683370190505b506001600160a01b038316600090815260056020526040812054919250819003610e265750919050565b6001600160a01b0383166000908152600760205260408082208151612000810192839052916101009082845b815481526020019060010190808311610e5257505050506001600160a01b03861660009081526004602090815260408083205460058352818420600201546001600160801b03600160801b82048116808752600b865284872091909216808752945282852083516120008101948590529798509196909550929392916101009082845b815481526020019060010190808311610ed557505050506001600160801b0385166000908152600b6020526040812092935091905081610f168560016132c7565b6001600160801b03168152602081019190915260409081016000208151612000810192839052916101009082845b815481526020019060010190808311610f4457505050506001600160a01b038b166000908152600660205260408082208151612000810192839052949550919392506101009082845b815481526020019060010190808311610f8d575050505050905060005b89518110156110df5787816101008110610fc657610fc661321c565b60200201518a8281518110610fdd57610fdd61321c565b60200260200101818152505083816101008110610ffc57610ffc61321c565b6020020151156110cd5760008282610100811061101b5761101b61321c565b6020020151858361010081106110335761103361321c565b602002015161104291906132a1565b90506000633b9aca008584610100811061105e5761105e61321c565b602002015161106d91906132ee565b9050670de0b6b3a76400008b61108383856132b4565b61108d908c613310565b61109791906132ee565b6110a191906132ee565b8c84815181106110b3576110b361321c565b602002602001018181516110c791906132b4565b90525050505b806110d781613248565b915050610faa565b505050505050505050919050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa15801561114d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111719190613327565b905090565b33600090815260046020526040902054806111f95760405162461bcd60e51b815260206004820152603060248201527f53746162696c697479506f6f6c3a2055736572206d757374206861766520612060448201527f6e6f6e2d7a65726f206465706f736974000000000000000000000000000000006064820152608401610740565b611201611c88565b61120a33611d16565b5060006112163361169e565b905061122133611f08565b336000818152600460205260409020829055819061123f9082611fa9565b60405181815233907fbce78369dccab09eec1986f4d409ab09ffbb47d65423e5148fcf98411c5111c99060200160405180910390a2600061127f3361219b565b90508015611323576040517fdf50b9390000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063df50b93990604401600060405180830381600087803b15801561130a57600080fd5b505af115801561131e573d6000803e3d6000fd5b505050505b6040518181526001600160a01b0387169033907f0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b79060200160405180910390a361136d8686612289565b505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f79190613344565b156114445760405162461bcd60e51b815260206004820152601360248201527f4465706f736974732061726520706175736564000000000000000000000000006044820152606401610740565b600081116114ba5760405162461bcd60e51b815260206004820152602660248201527f53746162696c697479506f6f6c3a20416d6f756e74206d757374206265206e6f60448201527f6e2d7a65726f00000000000000000000000000000000000000000000000000006064820152608401610740565b3360009081526003602052604090204290556114d4611c88565b6114dd33611d16565b5060006114e93361169e565b90506114f433611f08565b6040517fe75b3ae7000000000000000000000000000000000000000000000000000000008152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e75b3ae790604401600060405180830381600087803b15801561157557600080fd5b505af1158015611589573d6000803e3d6000fd5b5050505060008260025461159d91906132b4565b60028190556040518181529091507f1943de03971a1d888cba90f6bca3d87496fdaca487c0f5664155c6e7ff151e049060200160405180910390a160006115e484846132b4565b3360008181526004602052604090208290559091506116039082611fa9565b60405181815233907fbce78369dccab09eec1986f4d409ab09ffbb47d65423e5148fcf98411c5111c99060200160405180910390a250505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561114d573d6000803e3d6000fd5b6001600160a01b0381166000908152600460205260408120548082036116c75750600092915050565b6001600160a01b0383166000908152600560209081526040808320815160808101835281548152600182015493810193909352600201546001600160801b0380821692840192909252600160801b90041660608201529061172883836123dc565b95945050505050565b600b60205282600052604060002060205281600052604060002081610100811061175a57600080fd5b0154925083915050565b6109668383836124c9565b6002546001600160a01b038216600090815260046020526040812054909190811580611799575080155b156117a8575060009392505050565b6000600d54670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663137ee36e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118389190613366565b6118429190613310565b61184c91906132b4565b9050600061185a84836132ee565b905060006009548261186c9190613310565b6001600160a01b0388166000908152600560209081526040808320815160808101835281548152600182015493810193909352600201546001600160801b03808216928401839052600160801b909104811660608401819052600a54959650929492939192829116830361197a576020808601516001600160801b038087166000908152600c84526040808220928816825291909352909120548791611911916132a1565b61191b91906132b4565b6001600160801b0385166000908152600c60205260408120919350633b9aca0091906119488660016132c7565b6001600160801b03166001600160801b031681526020019081526020016000205461197391906132ee565b9050611a16565b6020808601516001600160801b038087166000908152600c84526040808220928816825291909352909120546119b091906132a1565b6001600160801b0385166000908152600c60205260408120919350633b9aca009188916119de8760016132c7565b6001600160801b03166001600160801b0316815260200190815260200160002054611a0991906132b4565b611a1391906132ee565b90505b8451670de0b6b3a764000090611a2c83856132b4565b611a36908c613310565b611a4091906132ee565b611a4a91906132ee565b9c9b505050505050505050505050565b600e816101008110611a6b57600080fd5b0154905081565b6001600160a01b03821660009081526020819052604090205415611ad85760405162461bcd60e51b815260206004820152601960248201527f436f6c6c61746572616c206d7573742062652073756e736574000000000000006044820152606401610740565b600154808210611b2a5760405162461bcd60e51b815260206004820152600f60248201527f496e64657820746f6f206c6172676500000000000000000000000000000000006044820152606401610740565b600a546001600160801b03600160801b82048116911660005b82816001600160801b031611611bb25760005b82816001600160801b031611611ba9576001600160801b038083166000908152600b602090815260408083209385168352929052908120876101008110611b9f57611b9f61321c565b0155600101611b56565b50600101611b43565b50611bbe8460016132b4565b6001600160a01b038616600090815260208190526040902055600180547f9e147d339c63698deb55c3d0d44ed3eba29bac2a068a88c4bc5bde17d6331e19919086908110611c0e57611c0e61321c565b60009182526020918290200154604080516001600160a01b039283168152918916928201929092520160405180910390a18460018581548110611c5357611c5361321c565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505050505050565b611d147f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dde105316040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0f9190613366565b6125e0565b565b6001600160a01b0381166000908152600760209081526040808320600154600490935290832054909190808403611d4f57505050919050565b6001600160a01b0385166000908152600560209081526040808320600281015490546001600160801b03600160801b83048116808752600b80875285882092909416808852828752948720818852939095529394929390929081611db48660016132c7565b6001600160801b03168152602080820192909252604090810160009081206001600160a01b038e16825260069093529081209192505b88811015611edf5783816101008110611e0557611e0561321c565b015415611ecd5760019a50600082826101008110611e2557611e2561321c565b015485836101008110611e3a57611e3a61321c565b0154611e4691906132a1565b90506000633b9aca0085846101008110611e6257611e6261321c565b0154611e6e91906132ee565b9050670de0b6b3a764000087611e8483856132b4565b611e8e908d613310565b611e9891906132ee565b611ea291906132ee565b8c846101008110611eb557611eb561321c565b016000828254611ec591906132b4565b909155505050505b80611ed781613248565b915050611dea565b50505050505050505050919050565b6000818310611efd5781611eff565b825b90505b92915050565b6000611f13826126dc565b6001600160a01b038316600090815260086020526040902054909150611f3a9082906132b4565b6001600160a01b0390921660009081526008602052604090209190915550565b600081600254611f6a91906132a1565b60028190556040518181529091507f1943de03971a1d888cba90f6bca3d87496fdaca487c0f5664155c6e7ff151e049060200160405180910390a15050565b60008160000361207257506001600160a01b03821660009081526005602052604081208181556001808201839055600290910182905554905b81811015612028576001600160a01b03841660009081526006602052604081208261010081106120145761201461321c565b01558061202081613248565b915050611fe2565b5060408051600080825260208201526001600160a01b038516917fc48943df4095f4f20d171fd2872eafdc0eed4d9014ac3672f3bde7fd425449d5910160405180910390a2505050565b50600a546009546001600160801b03600160801b80840482166000818152600b6020908152604080832095909716808352948152868220838352600c82528783208684528252878320546001600160a01b038b168452600590925296822086815560018082018390559484028617600290910155925495939491939192905b8681101561214c578281610100811061210c5761210c61321c565b01546001600160a01b038a1660009081526006602052604090208261010081106121385761213861321c565b01558061214481613248565b9150506120f1565b5060408051848152602081018390526001600160a01b038a16917fc48943df4095f4f20d171fd2872eafdc0eed4d9014ac3672f3bde7fd425449d5910160405180910390a25050505050505050565b6001600160a01b038116600090815260046020526040812054801561223d576121c2611c88565b60006121cd84611d16565b905060006121da8561169e565b905060006121e882856132a1565b90506121f3866126dc565b945060008111806122015750825b8061220c5750600085115b15612239576001600160a01b0386166000908152600460205260409020829055816122378782611fa9565b505b5050505b6001600160a01b03831660009081526008602052604090205480156122825761226681846132b4565b6001600160a01b03851660009081526008602052604081205592505b5050919050565b805160015460009067ffffffffffffffff8111156122a9576122a961304f565b6040519080825280602002602001820160405280156122d2578160200160208202803683370190505b503360009081526007602052604081209192505b838110156123a25760008582815181106123025761230261321c565b602002602001015190506000838261010081106123215761232161321c565b015490508015612398578085838151811061233e5761233e61321c565b60200260200101818152505060008483610100811061235f5761235f61321c565b018190555061239888826001858154811061237c5761237c61321c565b6000918252602090912001546001600160a01b03169190612770565b50506001016122e6565b50336001600160a01b03167faecf5c2e84838a7ed87234d73965fc51f96b87b4c957f03bf22cfeb618c9aae183604051610da6919061300b565b805160408201516060830151600a546000939291906001600160801b03600160801b909104811690821610156124185760009350505050611f02565b600a5460009081906124349085906001600160801b031661337f565b9050806001600160801b03166000036124675784600954896124569190613310565b61246091906132ee565b915061249b565b806001600160801b031660010361249657633b9aca00856009548a61248c9190613310565b61245691906132ee565b600091505b6124a9633b9aca00896132ee565b8210156124be57600095505050505050611f02565b509695505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146125675760405162461bcd60e51b815260206004820152603060248201527f53746162696c697479506f6f6c3a2043616c6c6572206973206e6f74204c697160448201527f7569646174696f6e204d616e61676572000000000000000000000000000000006064820152608401610740565b6001600160a01b03831660009081526020819052604090205461258b6001826132a1565b60025490915080158061259c575083155b156125a8575050505050565b6125b0611c88565b6000806125bf858785876127f0565b915091506125ce8282866128dd565b6125d786611f5a565b50505050505050565b6002548015806125ee575081155b156125f7575050565b60006126038383612c48565b600a546009549192506001600160801b03600160801b820481169291169060009061262e9085613310565b6001600160801b038085166000908152600c60209081526040808320938716835292905290812054919250906126659083906132b4565b6001600160801b038581166000818152600c60209081526040808320948916808452948252918290208590558151858152908101929092528101919091529091507f2d6127771b164a9cc8827d24b5955db2a77e7a81dac389107ebb8bce9fb649689060600160405180910390a150505050505050565b6001600160a01b0381166000908152600460205260408120548082036127055750600092915050565b6001600160a01b038316600090815260056020908152604091829020825160808101845281548152600182015492810192909252600201546001600160801b0380821693830193909352600160801b900490911660608201526127688282612c9b565b949350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610966908490612d7f565b6000806000600e8461010081106128095761280961321c565b015461281d670de0b6b3a764000089613310565b61282791906132b4565b905084860361284657600061010e55670de0b6b3a7640000915061289d565b61010e5460009061285f670de0b6b3a764000089613310565b61286991906132a1565b905061287586826132ee565b6128809060016132b4565b92508061288d8785613310565b61289791906132a1565b61010e55505b6128a785826132ee565b92506128b38584613310565b6128bd90826132a1565b600e8561010081106128d1576128d161321c565b01555094509492505050565b6009546000806128f585670de0b6b3a76400006132a1565b600a546001600160801b03600160801b820481166000818152600b602090815260408083209490951680835293905292832093945090929091908761010081106129415761294161321c565b015490506000612951878b613310565b9050600061295f82846132b4565b6001600160801b038086166000908152600b60209081526040808320938a1683529290522090915081908a610100811061299b5761299b61321c565b0155604080518a8152602081018390526001600160801b03868116828401528716606082015290517fe150473acddd94d1c6add794bd840c8d3e297dc3e50d863b56c0fba04d0d02479181900360800190a185600003612ac157612a008460016132c7565b600a80546001600160801b03908116600160801b93821684021791829055604051929091041681527fb50f0f59e7cb5b421dc77581c3a9919e3806e076e5fa78a874c3f120cb7d874d9060200160405180910390a1600a80547fffffffffffffffffffffffffffffffff00000000000000000000000000000000169055604051600081527f1f9dfc70cd666adb18a39d60a797518f7b4febf4b6e24ef37d44f6e1e7219fbe9060200160405180910390a1670de0b6b3a76400009650612bb1565b633b9aca00670de0b6b3a7640000612ad9888b613310565b612ae391906132ee565b1015612b9157670de0b6b3a7640000633b9aca00612b01888b613310565b612b0b9190613310565b612b1591906132ee565b9650612b228560016132c7565b600a80547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166001600160801b039290921691821790556040519081527f1f9dfc70cd666adb18a39d60a797518f7b4febf4b6e24ef37d44f6e1e7219fbe9060200160405180910390a1612bb1565b670de0b6b3a7640000612ba4878a613310565b612bae91906132ee565b96505b60008711612c035760405162461bcd60e51b81526004016107409060208082526004908201527f4e65775000000000000000000000000000000000000000000000000000000000604082015260600190565b60098790556040518781527fc1a9618cb59ebca77cbdbc2949f126823c407ff13edb285fd0262519a9c18e8c9060200160405180910390a15050505050505050505050565b600080600d54670de0b6b3a764000085612c629190613310565b612c6c91906132b4565b90506000612c7a84836132ee565b9050612c868482613310565b612c9090836132a1565b600d55949350505050565b606081015160408083015160208085015185516001600160801b038087166000908152600c8552868120918616815293529382205491949390918590612ce29084906132a1565b6001600160801b0386166000908152600c6020526040812091925090633b9aca009082612d108860016132c7565b6001600160801b03166001600160801b0316815260200190815260200160002054612d3b91906132ee565b90506000670de0b6b3a764000084612d5384866132b4565b612d5d908d613310565b612d6791906132ee565b612d7191906132ee565b9a9950505050505050505050565b6000612dd4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e679092919063ffffffff16565b9050805160001480612df5575080806020019051810190612df59190613344565b6109665760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610740565b6060612768848460008585600080866001600160a01b03168587604051612e8e91906133c3565b60006040518083038185875af1925050503d8060008114612ecb576040519150601f19603f3d011682016040523d82523d6000602084013e612ed0565b606091505b5091509150612ee187838387612eec565b979650505050505050565b60608315612f5b578251600003612f54576001600160a01b0385163b612f545760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610740565b5081612768565b6127688383815115612f705781518083602001fd5b8060405162461bcd60e51b815260040161074091906133df565b6001600160a01b0381168114612f9f57600080fd5b50565b60008060408385031215612fb557600080fd5b8235612fc081612f8a565b946020939093013593505050565b600060208284031215612fe057600080fd5b8135612feb81612f8a565b9392505050565b60006020828403121561300457600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561304357835183529284019291840191600101613027565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561307857600080fd5b823561308381612f8a565b915060208381013567ffffffffffffffff808211156130a157600080fd5b818601915086601f8301126130b557600080fd5b8135818111156130c7576130c761304f565b8060051b604051601f19603f830116810181811085821117156130ec576130ec61304f565b60405291825284820192508381018501918983111561310a57600080fd5b938501935b828510156131285784358452938501939285019261310f565b8096505050505050509250929050565b80356001600160801b038116811461314f57600080fd5b919050565b6000806040838503121561316757600080fd5b61317083613138565b915061317e60208401613138565b90509250929050565b60008060006060848603121561319c57600080fd5b6131a584613138565b92506131b360208501613138565b9150604084013590509250925092565b6000602082840312156131d557600080fd5b813561ffff81168114612feb57600080fd5b6000806000606084860312156131fc57600080fd5b833561320781612f8a565b95602085013595506040909401359392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361327957613279613232565b5060010190565b600061ffff80831681810361329757613297613232565b6001019392505050565b81810381811115611f0257611f02613232565b80820180821115611f0257611f02613232565b6001600160801b038181168382160190808211156132e7576132e7613232565b5092915050565b60008261330b57634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417611f0257611f02613232565b60006020828403121561333957600080fd5b8151612feb81612f8a565b60006020828403121561335657600080fd5b81518015158114612feb57600080fd5b60006020828403121561337857600080fd5b5051919050565b6001600160801b038281168282160390808211156132e7576132e7613232565b60005b838110156133ba5781810151838201526020016133a2565b50506000910152565b600082516133d581846020870161339f565b9190910192915050565b60208152600082518060208401526133fe81604085016020870161339f565b601f01601f1916919091016040019291505056fea264697066735822122035a4e6c5028dcda1a4f699840450660b5cf98c2cca0142afc6038edb74b1a76964736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102775760003560e01c80638b8fbd9211610160578063c45a0155116100d8578063e10d29ee1161008c578063e950342511610071578063e950342514610678578063eeb58d0b1461068b578063f177b8351461069e57600080fd5b8063e10d29ee14610631578063e66667331461066557600080fd5b8063ce4b5bbe116100bd578063ce4b5bbe146105be578063db03fdaa146105c9578063dec8d975146105dc57600080fd5b8063c45a015514610584578063cd7502fe146105ab57600080fd5b8063a20baee61161012f578063a4e59ac811610114578063a4e59ac81461055e578063a6ef225414610571578063a7528a031461057a57600080fd5b8063a20baee61461052f578063a4beda631461053e57600080fd5b80638b8fbd92146104d05780638da5cb5b146104d957806395fb16bb146104e15780639b0e384e1461050857600080fd5b8063452a9320116101f357806378c77a24116101c257806382e0a574116101a757806382e0a57414610413578063835dada01461043e57806386da08241461045e57600080fd5b806378c77a24146103f657806381bafb311461040957600080fd5b8063452a93201461038957806345718278146103915780635383dfcb146103a457806376671808146103c457600080fd5b806319f27b3b1161024a5780632e54bf951161022f5780632e54bf951461032f5780632fbea01414610342578063307d36121461036957600080fd5b806319f27b3b146102f55780631ef3a04c1461030857600080fd5b806309e2acb01461027c57806311be0de5146102a25780631500d2c3146102b7578063172c48c7146102ca575b600080fd5b61028f61028a366004612fa2565b6106a6565b6040519081526020015b60405180910390f35b6102b56102b0366004612fce565b6106cc565b005b61028f6102c5366004612fa2565b61096b565b6102dd6102d8366004612ff2565b610988565b6040516001600160a01b039091168152602001610299565b6102b5610303366004612fce565b6109b2565b6102dd7f000000000000000000000000000000000000000000000000000000000000000081565b6102b561033d366004612ff2565b610b61565b6102dd7f000000000000000000000000000000000000000000000000000000000000000081565b61037c610377366004612fce565b610db5565b604051610299919061300b565b6102dd6110ed565b6102b561039f366004613065565b611176565b61028f6103b2366004612fce565b60006020819052908152604090205481565b600a546103de90600160801b90046001600160801b031681565b6040516001600160801b039091168152602001610299565b6102b5610404366004612ff2565b611375565b61028f61010e5481565b61028f610421366004613154565b600c60209081526000928352604080842090915290825290205481565b61028f61044c366004612fce565b60046020526000908152604090205481565b6104a161046c366004612fce565b6005602052600090815260409020805460018201546002909201549091906001600160801b0380821691600160801b90041684565b6040805194855260208501939093526001600160801b0391821692840192909252166060820152608001610299565b61028f60095481565b6102dd61163e565b6102dd7f000000000000000000000000000000000000000000000000000000000000000081565b6102dd7f000000000000000000000000000000000000000000000000000000000000000081565b61028f670de0b6b3a764000081565b61028f61054c366004612fce565b60036020526000908152604090205481565b600a546103de906001600160801b031681565b61028f600d5481565b6103de62ed4e0081565b6102dd7f000000000000000000000000000000000000000000000000000000000000000081565b61028f6105b9366004612fce565b61169e565b61028f633b9aca0081565b61028f6105d7366004613187565b611731565b6106116105ea3660046131c3565b61010f602052600090815260409020546001600160801b0380821691600160801b90041682565b604080516001600160801b03938416815292909116602083015201610299565b6101105461064a9061ffff808216916201000090041682565b6040805161ffff938416815292909116602083015201610299565b6102b56106733660046131e7565b611764565b61028f610686366004612fce565b61176f565b61028f610699366004612ff2565b611a5a565b60025461028f565b60066020528160005260406000208161010081106106c357600080fd5b01549150829050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107495760405162461bcd60e51b815260206004820152600b60248201527f4e6f7420666163746f727900000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6001546000805b828110156107aa57836001600160a01b0316600182815481106107755761077561321c565b6000918252602090912001546001600160a01b03160361079857600191506107aa565b806107a281613248565b915050610750565b508061090157604080518082019091526101105461ffff808216808452620100009092041660208301819052111561088a57805161ffff16600090815261010f60209081526040918290208251808401909352546001600160801b038082168452600160801b9091041690820181905242111561088857610110805461010f9160009161ffff16908261083c83613280565b82546101009290920a61ffff818102199093169183160217909155168152602081019190915260400160009081205580516108819086906001600160801b0316611a72565b5050505050565b505b506001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038616908117909155905460009182526020829052604090912055505050565b6001600160a01b0383166000908152602081905260409020546109665760405162461bcd60e51b815260206004820152601860248201527f436f6c6c61746572616c2069732073756e73657474696e6700000000000000006044820152606401610740565b505050565b60076020528160005260406000208161010081106106c357600080fd5b6001818154811061099857600080fd5b6000918252602090912001546001600160a01b0316905081565b6109ba61163e565b6001600160a01b0316336001600160a01b031614610a1a5760405162461bcd60e51b815260206004820152600a60248201527f4f6e6c79206f776e6572000000000000000000000000000000000000000000006044820152606401610740565b6001600160a01b038116600090815260208190526040902054610a7f5760405162461bcd60e51b815260206004820152601d60248201527f436f6c6c61746572616c20616c72656164792073756e73657474696e670000006044820152606401610740565b6040805180820182526001600160a01b0383166000908152602081905291909120548190610aaf906001906132a1565b6001600160801b03168152602001610aca62ed4e00426132b4565b6001600160801b03169052610110805461010f9160009162010000900461ffff16906002610af783613280565b825461ffff9182166101009390930a928302928202191691909117909155168152602080820192909252604090810160009081208451948401516001600160801b03908116600160801b029516949094179093556001600160a01b03909316825281905290812055565b3360009081526004602052604090205480610be45760405162461bcd60e51b815260206004820152603060248201527f53746162696c697479506f6f6c3a2055736572206d757374206861766520612060448201527f6e6f6e2d7a65726f206465706f736974000000000000000000000000000000006064820152608401610740565b33600090815260036020526040902054429003610c695760405162461bcd60e51b815260206004820152602360248201527f53746162696c697479506f6f6c3a205769746864726177616c206973206c6f6360448201527f6b656400000000000000000000000000000000000000000000000000000000006064820152608401610740565b610c71611c88565b610c7a33611d16565b506000610c863361169e565b90506000610c948483611eee565b9050610c9f33611f08565b8015610d4d576040517f20c582be000000000000000000000000000000000000000000000000000000008152306004820152336024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906320c582be90606401600060405180830381600087803b158015610d2c57600080fd5b505af1158015610d40573d6000803e3d6000fd5b50505050610d4d81611f5a565b6000610d5982846132a1565b336000818152600460205260409020829055909150610d789082611fa9565b60405181815233907fbce78369dccab09eec1986f4d409ab09ffbb47d65423e5148fcf98411c5111c9906020015b60405180910390a25050505050565b60015460609067ffffffffffffffff811115610dd357610dd361304f565b604051908082528060200260200182016040528015610dfc578160200160208202803683370190505b506001600160a01b038316600090815260056020526040812054919250819003610e265750919050565b6001600160a01b0383166000908152600760205260408082208151612000810192839052916101009082845b815481526020019060010190808311610e5257505050506001600160a01b03861660009081526004602090815260408083205460058352818420600201546001600160801b03600160801b82048116808752600b865284872091909216808752945282852083516120008101948590529798509196909550929392916101009082845b815481526020019060010190808311610ed557505050506001600160801b0385166000908152600b6020526040812092935091905081610f168560016132c7565b6001600160801b03168152602081019190915260409081016000208151612000810192839052916101009082845b815481526020019060010190808311610f4457505050506001600160a01b038b166000908152600660205260408082208151612000810192839052949550919392506101009082845b815481526020019060010190808311610f8d575050505050905060005b89518110156110df5787816101008110610fc657610fc661321c565b60200201518a8281518110610fdd57610fdd61321c565b60200260200101818152505083816101008110610ffc57610ffc61321c565b6020020151156110cd5760008282610100811061101b5761101b61321c565b6020020151858361010081106110335761103361321c565b602002015161104291906132a1565b90506000633b9aca008584610100811061105e5761105e61321c565b602002015161106d91906132ee565b9050670de0b6b3a76400008b61108383856132b4565b61108d908c613310565b61109791906132ee565b6110a191906132ee565b8c84815181106110b3576110b361321c565b602002602001018181516110c791906132b4565b90525050505b806110d781613248565b915050610faa565b505050505050505050919050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa15801561114d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111719190613327565b905090565b33600090815260046020526040902054806111f95760405162461bcd60e51b815260206004820152603060248201527f53746162696c697479506f6f6c3a2055736572206d757374206861766520612060448201527f6e6f6e2d7a65726f206465706f736974000000000000000000000000000000006064820152608401610740565b611201611c88565b61120a33611d16565b5060006112163361169e565b905061122133611f08565b336000818152600460205260409020829055819061123f9082611fa9565b60405181815233907fbce78369dccab09eec1986f4d409ab09ffbb47d65423e5148fcf98411c5111c99060200160405180910390a2600061127f3361219b565b90508015611323576040517fdf50b9390000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063df50b93990604401600060405180830381600087803b15801561130a57600080fd5b505af115801561131e573d6000803e3d6000fd5b505050505b6040518181526001600160a01b0387169033907f0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b79060200160405180910390a361136d8686612289565b505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f79190613344565b156114445760405162461bcd60e51b815260206004820152601360248201527f4465706f736974732061726520706175736564000000000000000000000000006044820152606401610740565b600081116114ba5760405162461bcd60e51b815260206004820152602660248201527f53746162696c697479506f6f6c3a20416d6f756e74206d757374206265206e6f60448201527f6e2d7a65726f00000000000000000000000000000000000000000000000000006064820152608401610740565b3360009081526003602052604090204290556114d4611c88565b6114dd33611d16565b5060006114e93361169e565b90506114f433611f08565b6040517fe75b3ae7000000000000000000000000000000000000000000000000000000008152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e75b3ae790604401600060405180830381600087803b15801561157557600080fd5b505af1158015611589573d6000803e3d6000fd5b5050505060008260025461159d91906132b4565b60028190556040518181529091507f1943de03971a1d888cba90f6bca3d87496fdaca487c0f5664155c6e7ff151e049060200160405180910390a160006115e484846132b4565b3360008181526004602052604090208290559091506116039082611fa9565b60405181815233907fbce78369dccab09eec1986f4d409ab09ffbb47d65423e5148fcf98411c5111c99060200160405180910390a250505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561114d573d6000803e3d6000fd5b6001600160a01b0381166000908152600460205260408120548082036116c75750600092915050565b6001600160a01b0383166000908152600560209081526040808320815160808101835281548152600182015493810193909352600201546001600160801b0380821692840192909252600160801b90041660608201529061172883836123dc565b95945050505050565b600b60205282600052604060002060205281600052604060002081610100811061175a57600080fd5b0154925083915050565b6109668383836124c9565b6002546001600160a01b038216600090815260046020526040812054909190811580611799575080155b156117a8575060009392505050565b6000600d54670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663137ee36e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118389190613366565b6118429190613310565b61184c91906132b4565b9050600061185a84836132ee565b905060006009548261186c9190613310565b6001600160a01b0388166000908152600560209081526040808320815160808101835281548152600182015493810193909352600201546001600160801b03808216928401839052600160801b909104811660608401819052600a54959650929492939192829116830361197a576020808601516001600160801b038087166000908152600c84526040808220928816825291909352909120548791611911916132a1565b61191b91906132b4565b6001600160801b0385166000908152600c60205260408120919350633b9aca0091906119488660016132c7565b6001600160801b03166001600160801b031681526020019081526020016000205461197391906132ee565b9050611a16565b6020808601516001600160801b038087166000908152600c84526040808220928816825291909352909120546119b091906132a1565b6001600160801b0385166000908152600c60205260408120919350633b9aca009188916119de8760016132c7565b6001600160801b03166001600160801b0316815260200190815260200160002054611a0991906132b4565b611a1391906132ee565b90505b8451670de0b6b3a764000090611a2c83856132b4565b611a36908c613310565b611a4091906132ee565b611a4a91906132ee565b9c9b505050505050505050505050565b600e816101008110611a6b57600080fd5b0154905081565b6001600160a01b03821660009081526020819052604090205415611ad85760405162461bcd60e51b815260206004820152601960248201527f436f6c6c61746572616c206d7573742062652073756e736574000000000000006044820152606401610740565b600154808210611b2a5760405162461bcd60e51b815260206004820152600f60248201527f496e64657820746f6f206c6172676500000000000000000000000000000000006044820152606401610740565b600a546001600160801b03600160801b82048116911660005b82816001600160801b031611611bb25760005b82816001600160801b031611611ba9576001600160801b038083166000908152600b602090815260408083209385168352929052908120876101008110611b9f57611b9f61321c565b0155600101611b56565b50600101611b43565b50611bbe8460016132b4565b6001600160a01b038616600090815260208190526040902055600180547f9e147d339c63698deb55c3d0d44ed3eba29bac2a068a88c4bc5bde17d6331e19919086908110611c0e57611c0e61321c565b60009182526020918290200154604080516001600160a01b039283168152918916928201929092520160405180910390a18460018581548110611c5357611c5361321c565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505050505050565b611d147f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dde105316040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0f9190613366565b6125e0565b565b6001600160a01b0381166000908152600760209081526040808320600154600490935290832054909190808403611d4f57505050919050565b6001600160a01b0385166000908152600560209081526040808320600281015490546001600160801b03600160801b83048116808752600b80875285882092909416808852828752948720818852939095529394929390929081611db48660016132c7565b6001600160801b03168152602080820192909252604090810160009081206001600160a01b038e16825260069093529081209192505b88811015611edf5783816101008110611e0557611e0561321c565b015415611ecd5760019a50600082826101008110611e2557611e2561321c565b015485836101008110611e3a57611e3a61321c565b0154611e4691906132a1565b90506000633b9aca0085846101008110611e6257611e6261321c565b0154611e6e91906132ee565b9050670de0b6b3a764000087611e8483856132b4565b611e8e908d613310565b611e9891906132ee565b611ea291906132ee565b8c846101008110611eb557611eb561321c565b016000828254611ec591906132b4565b909155505050505b80611ed781613248565b915050611dea565b50505050505050505050919050565b6000818310611efd5781611eff565b825b90505b92915050565b6000611f13826126dc565b6001600160a01b038316600090815260086020526040902054909150611f3a9082906132b4565b6001600160a01b0390921660009081526008602052604090209190915550565b600081600254611f6a91906132a1565b60028190556040518181529091507f1943de03971a1d888cba90f6bca3d87496fdaca487c0f5664155c6e7ff151e049060200160405180910390a15050565b60008160000361207257506001600160a01b03821660009081526005602052604081208181556001808201839055600290910182905554905b81811015612028576001600160a01b03841660009081526006602052604081208261010081106120145761201461321c565b01558061202081613248565b915050611fe2565b5060408051600080825260208201526001600160a01b038516917fc48943df4095f4f20d171fd2872eafdc0eed4d9014ac3672f3bde7fd425449d5910160405180910390a2505050565b50600a546009546001600160801b03600160801b80840482166000818152600b6020908152604080832095909716808352948152868220838352600c82528783208684528252878320546001600160a01b038b168452600590925296822086815560018082018390559484028617600290910155925495939491939192905b8681101561214c578281610100811061210c5761210c61321c565b01546001600160a01b038a1660009081526006602052604090208261010081106121385761213861321c565b01558061214481613248565b9150506120f1565b5060408051848152602081018390526001600160a01b038a16917fc48943df4095f4f20d171fd2872eafdc0eed4d9014ac3672f3bde7fd425449d5910160405180910390a25050505050505050565b6001600160a01b038116600090815260046020526040812054801561223d576121c2611c88565b60006121cd84611d16565b905060006121da8561169e565b905060006121e882856132a1565b90506121f3866126dc565b945060008111806122015750825b8061220c5750600085115b15612239576001600160a01b0386166000908152600460205260409020829055816122378782611fa9565b505b5050505b6001600160a01b03831660009081526008602052604090205480156122825761226681846132b4565b6001600160a01b03851660009081526008602052604081205592505b5050919050565b805160015460009067ffffffffffffffff8111156122a9576122a961304f565b6040519080825280602002602001820160405280156122d2578160200160208202803683370190505b503360009081526007602052604081209192505b838110156123a25760008582815181106123025761230261321c565b602002602001015190506000838261010081106123215761232161321c565b015490508015612398578085838151811061233e5761233e61321c565b60200260200101818152505060008483610100811061235f5761235f61321c565b018190555061239888826001858154811061237c5761237c61321c565b6000918252602090912001546001600160a01b03169190612770565b50506001016122e6565b50336001600160a01b03167faecf5c2e84838a7ed87234d73965fc51f96b87b4c957f03bf22cfeb618c9aae183604051610da6919061300b565b805160408201516060830151600a546000939291906001600160801b03600160801b909104811690821610156124185760009350505050611f02565b600a5460009081906124349085906001600160801b031661337f565b9050806001600160801b03166000036124675784600954896124569190613310565b61246091906132ee565b915061249b565b806001600160801b031660010361249657633b9aca00856009548a61248c9190613310565b61245691906132ee565b600091505b6124a9633b9aca00896132ee565b8210156124be57600095505050505050611f02565b509695505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146125675760405162461bcd60e51b815260206004820152603060248201527f53746162696c697479506f6f6c3a2043616c6c6572206973206e6f74204c697160448201527f7569646174696f6e204d616e61676572000000000000000000000000000000006064820152608401610740565b6001600160a01b03831660009081526020819052604090205461258b6001826132a1565b60025490915080158061259c575083155b156125a8575050505050565b6125b0611c88565b6000806125bf858785876127f0565b915091506125ce8282866128dd565b6125d786611f5a565b50505050505050565b6002548015806125ee575081155b156125f7575050565b60006126038383612c48565b600a546009549192506001600160801b03600160801b820481169291169060009061262e9085613310565b6001600160801b038085166000908152600c60209081526040808320938716835292905290812054919250906126659083906132b4565b6001600160801b038581166000818152600c60209081526040808320948916808452948252918290208590558151858152908101929092528101919091529091507f2d6127771b164a9cc8827d24b5955db2a77e7a81dac389107ebb8bce9fb649689060600160405180910390a150505050505050565b6001600160a01b0381166000908152600460205260408120548082036127055750600092915050565b6001600160a01b038316600090815260056020908152604091829020825160808101845281548152600182015492810192909252600201546001600160801b0380821693830193909352600160801b900490911660608201526127688282612c9b565b949350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610966908490612d7f565b6000806000600e8461010081106128095761280961321c565b015461281d670de0b6b3a764000089613310565b61282791906132b4565b905084860361284657600061010e55670de0b6b3a7640000915061289d565b61010e5460009061285f670de0b6b3a764000089613310565b61286991906132a1565b905061287586826132ee565b6128809060016132b4565b92508061288d8785613310565b61289791906132a1565b61010e55505b6128a785826132ee565b92506128b38584613310565b6128bd90826132a1565b600e8561010081106128d1576128d161321c565b01555094509492505050565b6009546000806128f585670de0b6b3a76400006132a1565b600a546001600160801b03600160801b820481166000818152600b602090815260408083209490951680835293905292832093945090929091908761010081106129415761294161321c565b015490506000612951878b613310565b9050600061295f82846132b4565b6001600160801b038086166000908152600b60209081526040808320938a1683529290522090915081908a610100811061299b5761299b61321c565b0155604080518a8152602081018390526001600160801b03868116828401528716606082015290517fe150473acddd94d1c6add794bd840c8d3e297dc3e50d863b56c0fba04d0d02479181900360800190a185600003612ac157612a008460016132c7565b600a80546001600160801b03908116600160801b93821684021791829055604051929091041681527fb50f0f59e7cb5b421dc77581c3a9919e3806e076e5fa78a874c3f120cb7d874d9060200160405180910390a1600a80547fffffffffffffffffffffffffffffffff00000000000000000000000000000000169055604051600081527f1f9dfc70cd666adb18a39d60a797518f7b4febf4b6e24ef37d44f6e1e7219fbe9060200160405180910390a1670de0b6b3a76400009650612bb1565b633b9aca00670de0b6b3a7640000612ad9888b613310565b612ae391906132ee565b1015612b9157670de0b6b3a7640000633b9aca00612b01888b613310565b612b0b9190613310565b612b1591906132ee565b9650612b228560016132c7565b600a80547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166001600160801b039290921691821790556040519081527f1f9dfc70cd666adb18a39d60a797518f7b4febf4b6e24ef37d44f6e1e7219fbe9060200160405180910390a1612bb1565b670de0b6b3a7640000612ba4878a613310565b612bae91906132ee565b96505b60008711612c035760405162461bcd60e51b81526004016107409060208082526004908201527f4e65775000000000000000000000000000000000000000000000000000000000604082015260600190565b60098790556040518781527fc1a9618cb59ebca77cbdbc2949f126823c407ff13edb285fd0262519a9c18e8c9060200160405180910390a15050505050505050505050565b600080600d54670de0b6b3a764000085612c629190613310565b612c6c91906132b4565b90506000612c7a84836132ee565b9050612c868482613310565b612c9090836132a1565b600d55949350505050565b606081015160408083015160208085015185516001600160801b038087166000908152600c8552868120918616815293529382205491949390918590612ce29084906132a1565b6001600160801b0386166000908152600c6020526040812091925090633b9aca009082612d108860016132c7565b6001600160801b03166001600160801b0316815260200190815260200160002054612d3b91906132ee565b90506000670de0b6b3a764000084612d5384866132b4565b612d5d908d613310565b612d6791906132ee565b612d7191906132ee565b9a9950505050505050505050565b6000612dd4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e679092919063ffffffff16565b9050805160001480612df5575080806020019051810190612df59190613344565b6109665760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610740565b6060612768848460008585600080866001600160a01b03168587604051612e8e91906133c3565b60006040518083038185875af1925050503d8060008114612ecb576040519150601f19603f3d011682016040523d82523d6000602084013e612ed0565b606091505b5091509150612ee187838387612eec565b979650505050505050565b60608315612f5b578251600003612f54576001600160a01b0385163b612f545760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610740565b5081612768565b6127688383815115612f705781518083602001fd5b8060405162461bcd60e51b815260040161074091906133df565b6001600160a01b0381168114612f9f57600080fd5b50565b60008060408385031215612fb557600080fd5b8235612fc081612f8a565b946020939093013593505050565b600060208284031215612fe057600080fd5b8135612feb81612f8a565b9392505050565b60006020828403121561300457600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561304357835183529284019291840191600101613027565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561307857600080fd5b823561308381612f8a565b915060208381013567ffffffffffffffff808211156130a157600080fd5b818601915086601f8301126130b557600080fd5b8135818111156130c7576130c761304f565b8060051b604051601f19603f830116810181811085821117156130ec576130ec61304f565b60405291825284820192508381018501918983111561310a57600080fd5b938501935b828510156131285784358452938501939285019261310f565b8096505050505050509250929050565b80356001600160801b038116811461314f57600080fd5b919050565b6000806040838503121561316757600080fd5b61317083613138565b915061317e60208401613138565b90509250929050565b60008060006060848603121561319c57600080fd5b6131a584613138565b92506131b360208501613138565b9150604084013590509250925092565b6000602082840312156131d557600080fd5b813561ffff81168114612feb57600080fd5b6000806000606084860312156131fc57600080fd5b833561320781612f8a565b95602085013595506040909401359392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361327957613279613232565b5060010190565b600061ffff80831681810361329757613297613232565b6001019392505050565b81810381811115611f0257611f02613232565b80820180821115611f0257611f02613232565b6001600160801b038181168382160190808211156132e7576132e7613232565b5092915050565b60008261330b57634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417611f0257611f02613232565b60006020828403121561333957600080fd5b8151612feb81612f8a565b60006020828403121561335657600080fd5b81518015158114612feb57600080fd5b60006020828403121561337857600080fd5b5051919050565b6001600160801b038281168282160390808211156132e7576132e7613232565b60005b838110156133ba5781810151838201526020016133a2565b50506000910152565b600082516133d581846020870161339f565b9190910192915050565b60208152600082518060208401526133fe81604085016020870161339f565b601f01601f1916919091016040019291505056fea264697066735822122035a4e6c5028dcda1a4f699840450660b5cf98c2cca0142afc6038edb74b1a76964736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "startCollateralSunset(address)": {
        "details": "IMPORTANT: When sunsetting a collateral, `TroveManager.startSunset` should be called on all TM linked to that collateral",
        "params": {
          "collateral": "Collateral to sunset"
        }
      }
    },
    "title": "Zebra Stability Pool",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "startCollateralSunset(address)": {
        "notice": "Starts sunsetting a collateral         During sunsetting liquidated collateral handoff to the SP will revert"
      }
    },
    "notice": "Based on Liquity's `StabilityPool` https://github.com/liquity/dev/blob/main/packages/contracts/contracts/StabilityPool.sol Zebra's implementation is modified to support multiple collaterals. Deposits into the stability pool may be used to liquidate any supported collateral type.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16753,
        "contract": "contracts/core/StabilityPool.sol:StabilityPool",
        "label": "indexByCollateral",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_contract(IERC20)2332,t_uint256)"
      },
      {
        "astId": 16757,
        "contract": "contracts/core/StabilityPool.sol:StabilityPool",
        "label": "collateralTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_contract(IERC20)2332)dyn_storage"
      },
      {
        "astId": 16759,
        "contract": "contracts/core/StabilityPool.sol:StabilityPool",
        "label": "totalZebraUSDDeposits",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 16763,
        "contract": "contracts/core/StabilityPool.sol:StabilityPool",
        "label": "lockTime",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16767,
        "contract": "contracts/core/StabilityPool.sol:StabilityPool",
        "label": "accountDeposits",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16772,
        "contract": "contracts/core/StabilityPool.sol:StabilityPool",
        "label": "depositSnapshots",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Snapshots)16837_storage)"
      },
      {
        "astId": 16778,
        "contract": "contracts/core/StabilityPool.sol:StabilityPool",
        "label": "depositSums",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_uint256)256_storage)"
      },
      {
        "astId": 16784,
        "contract": "contracts/core/StabilityPool.sol:StabilityPool",
        "label": "collateralGainsByDepositor",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)256_storage)"
      },
      {
        "astId": 16788,
        "contract": "contracts/core/StabilityPool.sol:StabilityPool",
        "label": "storedPendingReward",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16791,
        "contract": "contracts/core/StabilityPool.sol:StabilityPool",
        "label": "P",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 16796,
        "contract": "contracts/core/StabilityPool.sol:StabilityPool",
        "label": "currentScale",
        "offset": 0,
        "slot": "10",
        "type": "t_uint128"
      },
      {
        "astId": 16798,
        "contract": "contracts/core/StabilityPool.sol:StabilityPool",
        "label": "currentEpoch",
        "offset": 16,
        "slot": "10",
        "type": "t_uint128"
      },
      {
        "astId": 16806,
        "contract": "contracts/core/StabilityPool.sol:StabilityPool",
        "label": "epochToScaleToSums",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint128,t_mapping(t_uint128,t_array(t_uint256)256_storage))"
      },
      {
        "astId": 16812,
        "contract": "contracts/core/StabilityPool.sol:StabilityPool",
        "label": "epochToScaleToG",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint128,t_mapping(t_uint128,t_uint256))"
      },
      {
        "astId": 16814,
        "contract": "contracts/core/StabilityPool.sol:StabilityPool",
        "label": "lastEsZebraError",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 16818,
        "contract": "contracts/core/StabilityPool.sol:StabilityPool",
        "label": "lastCollateralError_Offset",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint256)256_storage"
      },
      {
        "astId": 16820,
        "contract": "contracts/core/StabilityPool.sol:StabilityPool",
        "label": "lastDebtLossError_Offset",
        "offset": 0,
        "slot": "270",
        "type": "t_uint256"
      },
      {
        "astId": 16825,
        "contract": "contracts/core/StabilityPool.sol:StabilityPool",
        "label": "_sunsetIndexes",
        "offset": 0,
        "slot": "271",
        "type": "t_mapping(t_uint16,t_struct(SunsetIndex)16842_storage)"
      },
      {
        "astId": 16828,
        "contract": "contracts/core/StabilityPool.sol:StabilityPool",
        "label": "queue",
        "offset": 0,
        "slot": "272",
        "type": "t_struct(Queue)16847_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)2332)dyn_storage": {
        "base": "t_contract(IERC20)2332",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)256_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[256]",
        "numberOfBytes": "8192"
      },
      "t_contract(IERC20)2332": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)256_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[256])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)256_storage"
      },
      "t_mapping(t_address,t_struct(Snapshots)16837_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StabilityPool.Snapshots)",
        "numberOfBytes": "32",
        "value": "t_struct(Snapshots)16837_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)2332,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)2332",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint128,t_array(t_uint256)256_storage)": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => uint256[256])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)256_storage"
      },
      "t_mapping(t_uint128,t_mapping(t_uint128,t_array(t_uint256)256_storage))": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => mapping(uint128 => uint256[256]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint128,t_array(t_uint256)256_storage)"
      },
      "t_mapping(t_uint128,t_mapping(t_uint128,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => mapping(uint128 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint128,t_uint256)"
      },
      "t_mapping(t_uint128,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint16,t_struct(SunsetIndex)16842_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct StabilityPool.SunsetIndex)",
        "numberOfBytes": "32",
        "value": "t_struct(SunsetIndex)16842_storage"
      },
      "t_struct(Queue)16847_storage": {
        "encoding": "inplace",
        "label": "struct StabilityPool.Queue",
        "members": [
          {
            "astId": 16844,
            "contract": "contracts/core/StabilityPool.sol:StabilityPool",
            "label": "firstSunsetIndexKey",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 16846,
            "contract": "contracts/core/StabilityPool.sol:StabilityPool",
            "label": "nextSunsetIndexKey",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Snapshots)16837_storage": {
        "encoding": "inplace",
        "label": "struct StabilityPool.Snapshots",
        "members": [
          {
            "astId": 16830,
            "contract": "contracts/core/StabilityPool.sol:StabilityPool",
            "label": "P",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16832,
            "contract": "contracts/core/StabilityPool.sol:StabilityPool",
            "label": "G",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16834,
            "contract": "contracts/core/StabilityPool.sol:StabilityPool",
            "label": "scale",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 16836,
            "contract": "contracts/core/StabilityPool.sol:StabilityPool",
            "label": "epoch",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(SunsetIndex)16842_storage": {
        "encoding": "inplace",
        "label": "struct StabilityPool.SunsetIndex",
        "members": [
          {
            "astId": 16839,
            "contract": "contracts/core/StabilityPool.sol:StabilityPool",
            "label": "idx",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 16841,
            "contract": "contracts/core/StabilityPool.sol:StabilityPool",
            "label": "expiry",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}